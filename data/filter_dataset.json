{
  "total_count": 299,
  "exclude_count": 0,
  "success_count": 237,
  "failed_count": 59,
  "skip_count": 3,
  "test_cases": null,
  "repo_module": "entgo.io/ent",
  "base_commit": "4876b3f807c7f02e3f360689bedd292d4bdc7eab",
  "git_repo": "git@github.com:ai4se-boys/ent.git",
  "dataset": [
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "Decode",
      "signature": "(dec *mapDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec *mapDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tmapType := dec.mapType\n\tif mapType.UnsafeIsNil(ptr) {\n\t\tmapType.UnsafeSet(ptr, mapType.UnsafeMakeMap(0))\n\t}\n\n\tvar key unsafe.Pointer\n\tif !iter.ReadArrayCB(func(iter *jsoniter.Iterator) bool {\n\t\tif key == nil {\n\t\t\tkey = dec.keyType.UnsafeNew()\n\t\t\tdec.keyDec.Decode(key, iter)\n\t\t\treturn iter.Error == nil\n\t\t}\n\n\t\telem := dec.elemType.UnsafeNew()\n\t\tdec.elemDec.Decode(elem, iter)\n\t\tif iter.Error != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tmapType.UnsafeSetIndex(ptr, key, elem)\n\t\tkey = nil\n\t\treturn true\n\t}) {\n\t\treturn\n\t}\n\n\tif key != nil {\n\t\titer.ReportError(\"decode map\", \"odd number of map items\")\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 86,
      "end_line": 116,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapDecoder struct {\n\tmapType  reflect2.MapType\n\tkeyType  reflect2.Type\n\telemType reflect2.Type\n\tkeyDec   jsoniter.ValDecoder\n\telemDec  jsoniter.ValDecoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_array.go",
          "code_snippet": "func (iter *Iterator) ReadArrayCB(callback func(*Iterator) bool) (ret bool) {\n\tc := iter.nextToken()\n\tif c == '[' {\n\t\tif !iter.incrementDepth() {\n\t\t\treturn false\n\t\t}\n\t\tc = iter.nextToken()\n\t\tif c != ']' {\n\t\t\titer.unreadByte()\n\t\t\tif !callback(iter) {\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tc = iter.nextToken()\n\t\t\tfor c == ',' {\n\t\t\t\tif !callback(iter) {\n\t\t\t\t\titer.decrementDepth()\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tc = iter.nextToken()\n\t\t\t}\n\t\t\tif c != ']' {\n\t\t\t\titer.ReportError(\"ReadArrayCB\", \"expect ] in the end, but found \"+string([]byte{c}))\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn iter.decrementDepth()\n\t\t}\n\t\treturn iter.decrementDepth()\n\t}\n\tif c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn true // null\n\t}\n\titer.ReportError(\"ReadArrayCB\", \"expect [ or n, but found \"+string([]byte{c}))\n\treturn false\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        86,
        87,
        88,
        89,
        90,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        100,
        101,
        102,
        103,
        104,
        106,
        107,
        108,
        109,
        110,
        111,
        113,
        114,
        115
      ],
      "cover_details": {
        "line_cover_rate": 0.8387096774193549
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:DecoderOfMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoderOfMap",
      "signature": "(ext decodeExtension) DecoderOfMap (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfMap(typ reflect2.Type) jsoniter.ValDecoder {\n\tmapType := typ.(reflect2.MapType)\n\tkeyType, elemType := mapType.Key(), mapType.Elem()\n\treturn \u0026mapDecoder{\n\t\tmapType:  mapType,\n\t\tkeyType:  keyType,\n\t\telemType: elemType,\n\t\tkeyDec:   ext.LazyDecoderOf(keyType),\n\t\telemDec:  ext.LazyDecoderOf(elemType),\n\t}\n}",
      "function_comment": "// DecoderOfMap returns a value decoder of a map type.",
      "function_statement": "// DecoderOfMap returns a value decoder of a map type.",
      "start_line": 61,
      "end_line": 71,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapDecoder struct {\n\tmapType  reflect2.MapType\n\tkeyType  reflect2.Type\n\telemType reflect2.Type\n\tkeyDec   jsoniter.ValDecoder\n\telemDec  jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        }
      ],
      "name": "encode",
      "signature": "(enc marshalerEncoder) encode (marshaler Marshaler, stream *jsoniter.Stream)",
      "ground_truth": "func (enc marshalerEncoder) encode(marshaler Marshaler, stream *jsoniter.Stream) {\n\tdata, err := marshaler.MarshalGraphson()\n\tif err != nil {\n\t\tstream.Error = fmt.Errorf(\"graphson: error calling MarshalGraphson for type %s: %w\", enc.Type, err)\n\t\treturn\n\t}\n\tif !config.Valid(data) {\n\t\tstream.Error = fmt.Errorf(\"graphson: syntax error when marshaling type %s\", enc.Type)\n\t\treturn\n\t}\n\t_, stream.Error = stream.Write(data)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 68,
      "end_line": 79,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "Marshaler interface {\n\tMarshalGraphson() ([]byte, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) Write(p []byte) (nn int, err error) {\n\tstream.buf = append(stream.buf, p...)\n\tif stream.out != nil {\n\t\tnn, err = stream.out.Write(stream.buf)\n\t\tstream.buf = stream.buf[nn:]\n\t\treturn\n\t}\n\treturn len(p), nil\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:CreateDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "CreateDecoder",
      "signature": "(ext decodeExtension) CreateDecoder (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) CreateDecoder(typ reflect2.Type) jsoniter.ValDecoder {\n\tif dec := ext.DecoderOfRegistered(typ); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoderOfUnmarshaler(typ); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoderOfNative(typ); dec != nil {\n\t\treturn dec\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Array:\n\t\treturn ext.DecoderOfArray(typ)\n\tcase reflect.Slice:\n\t\treturn ext.DecoderOfSlice(typ)\n\tcase reflect.Map:\n\t\treturn ext.DecoderOfMap(typ)\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// CreateDecoder returns a value decoder for type.",
      "function_statement": "// CreateDecoder returns a value decoder for type.",
      "start_line": 59,
      "end_line": 79,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (decodeExtension) DecoderOfRegistered(typ reflect2.Type) jsoniter.ValDecoder {\n\tdec := typeDecoders[typ.String()]\n\tif dec != nil {\n\t\treturn registeredDecoder{dec}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tdec := typeDecoders[ptrType.Elem().String()]\n\t\tif dec != nil {\n\t\t\treturn registeredDecoder{\n\t\t\t\tValDecoder: \u0026jsoniter.OptionalDecoder{\n\t\t\t\t\tValueType:    ptrType.Elem(),\n\t\t\t\t\tValueDecoder: dec,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (decodeExtension) DecoderOfUnmarshaler(typ reflect2.Type) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(unmarshalerType) {\n\t\treturn referenceDecoder{\n\t\t\tunmarshalerDecoder{ptrType},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (decodeExtension) DecoderOfNative(typ reflect2.Type) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Decoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfArray(typ reflect2.Type) jsoniter.ValDecoder {\n\tarrayType := typ.(reflect2.ArrayType)\n\treturn arrayDecoder{\n\t\tarrayType: arrayType,\n\t\telemDec:   ext.LazyDecoderOf(arrayType.Elem()),\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfSlice(typ reflect2.Type) jsoniter.ValDecoder {\n\tsliceType := typ.(reflect2.SliceType)\n\telemType := sliceType.Elem()\n\tif elemType.Kind() == reflect.Uint8 {\n\t\treturn nil\n\t}\n\treturn sliceDecoder{\n\t\tsliceType: sliceType,\n\t\telemDec:   ext.LazyDecoderOf(elemType),\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfMap(typ reflect2.Type) jsoniter.ValDecoder {\n\tmapType := typ.(reflect2.MapType)\n\tkeyType, elemType := mapType.Key(), mapType.Elem()\n\treturn \u0026mapDecoder{\n\t\tmapType:  mapType,\n\t\tkeyType:  keyType,\n\t\telemType: elemType,\n\t\tkeyDec:   ext.LazyDecoderOf(keyType),\n\t\telemDec:  ext.LazyDecoderOf(elemType),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77
      ],
      "cover_details": {
        "line_cover_rate": 0.9047619047619048
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:requestAttrs",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "requestAttrs",
      "signature": "requestAttrs (req *gremlin.Request, withQuery bool) []trace.Attribute",
      "ground_truth": "func requestAttrs(req *gremlin.Request, withQuery bool) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.StringAttribute(RequestIDAttribute, req.RequestID),\n\t\ttrace.StringAttribute(OperationAttribute, req.Operation),\n\t}\n\tif withQuery {\n\t\tquery, _ := req.Arguments[gremlin.ArgsGremlin].(string)\n\t\tattrs = append(attrs, trace.StringAttribute(QueryAttribute, query))\n\t\tif bindings, ok := req.Arguments[gremlin.ArgsBindings].(map[string]any); ok {\n\t\t\tattrs = append(attrs, bindingsAttrs(bindings)...)\n\t\t}\n\t}\n\treturn attrs\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 53,
      "end_line": 66,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "RequestIDAttribute = \"gremlin.request_id\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "OperationAttribute = \"gremlin.operation\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "QueryAttribute     = \"gremlin.query\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsBindings = \"bindings\"",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func bindingsAttrs(bindings map[string]any) []trace.Attribute {\n\tattrs := make([]trace.Attribute, 0, len(bindings))\n\tfor key, val := range bindings {\n\t\tkey = BindingAttribute + \".\" + key\n\t\tattrs = append(attrs, bindingToAttr(key, val))\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:pascalWords",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_EnumName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_Constant"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_DefaultName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        }
      ],
      "name": "pascalWords",
      "signature": "pascalWords (words []string) string",
      "ground_truth": "func pascalWords(words []string) string {\n\tfor i, w := range words {\n\t\tupper := strings.ToUpper(w)\n\t\tif _, ok := acronyms[upper]; ok {\n\t\t\twords[i] = upper\n\t\t} else {\n\t\t\twords[i] = rules.Capitalize(w)\n\t\t}\n\t}\n\treturn strings.Join(words, \"\")\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 165,
      "end_line": 175,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "acronyms = make(map[string]struct{})",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Capitalize(word string) string {\n\treturn strings.ToUpper(word[:1]) + word[1:]\n}",
          "ref_module": "inflect"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ToUpper(s string) string {\n\tisASCII, hasLower := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasLower = hasLower || ('a' \u003c= c \u0026\u0026 c \u003c= 'z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasLower {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'a' \u003c= c \u0026\u0026 c \u003c= 'z' {\n\t\t\t\tc -= 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToUpper, s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Join(elems []string, sep string) string {\n\tswitch len(elems) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn elems[0]\n\t}\n\n\tvar n int\n\tif len(sep) \u003e 0 {\n\t\tif len(sep) \u003e= maxInt/(len(elems)-1) {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(sep) * (len(elems) - 1)\n\t}\n\tfor _, elem := range elems {\n\t\tif len(elem) \u003e maxInt-n {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(elem)\n\t}\n\n\tvar b Builder\n\tb.Grow(n)\n\tb.WriteString(elems[0])\n\tfor _, s := range elems[1:] {\n\t\tb.WriteString(sep)\n\t\tb.WriteString(s)\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        174
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/stats.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/stats_test.go",
          "func_name": "TestStatsCollection"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t statsTransport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t statsTransport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tstats.Record(ctx, RequestCount.M(1))\n\tstart := time.Now()\n\trsp, err := t.base.RoundTrip(ctx, req)\n\tlatency := float64(time.Since(start)) / float64(time.Millisecond)\n\tvar (\n\t\ttags = make([]tag.Mutator, 1)\n\t\tms   = []stats.Measurement{RoundTripLatency.M(latency)}\n\t)\n\tif err == nil {\n\t\ttags[0] = tag.Upsert(StatusCode, strconv.Itoa(rsp.Status.Code))\n\t\tms = append(ms, ResponseBytes.M(int64(len(rsp.Result.Data))))\n\t} else {\n\t\ttags[0] = tag.Upsert(StatusCode, \"error\")\n\t}\n\t_ = stats.RecordWithTags(ctx, tags, ms...)\n\treturn rsp, err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 100,
      "end_line": 117,
      "file_path": "./dialect/gremlin/ocgremlin/stats.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "statsTransport struct {\n\tbase gremlin.RoundTripper\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "RequestCount = stats.Int64(\n\t\t\"gremlin/request_count\",\n\t\t\"Number of Gremlin requests started\",\n\t\tstats.UnitDimensionless,\n\t)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "RoundTripLatency = stats.Float64(\n\t\t\"gremlin/roundtrip_latency\",\n\t\t\"End-to-end latency\",\n\t\tstats.UnitMilliseconds,\n\t)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "StatusCode, _ = tag.NewKey(\"gremlin_status_code\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "ResponseBytes = stats.Int64(\n\t\t\"gremlin/response_bytes\",\n\t\t\"Total number of bytes in response data\",\n\t\tstats.UnitBytes,\n\t)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/record.go",
          "code_snippet": "func Record(ctx context.Context, ms ...Measurement) {\n\t// Record behaves the same as RecordWithOptions, but because we do not have to handle generic functionality\n\t// (RecordOptions) we can reduce some allocations to speed up this hot path\n\tif len(ms) == 0 {\n\t\treturn\n\t}\n\trecorder := internal.MeasurementRecorder.(measurementRecorder)\n\trecord := false\n\tfor _, m := range ms {\n\t\tif m.desc.subscribed() {\n\t\t\trecord = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !record {\n\t\treturn\n\t}\n\trecorder(tag.FromContext(ctx), ms, nil)\n\treturn\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/measure_int64.go",
          "code_snippet": "func (m *Int64Measure) M(v int64) Measurement {\n\treturn Measurement{\n\t\tm:    m,\n\t\tdesc: m.desc,\n\t\tv:    float64(v),\n\t}\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/tag/map.go",
          "code_snippet": "Mutator interface {\n\tMutate(t *Map) (*Map, error)\n}",
          "ref_module": "tag"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/measure.go",
          "code_snippet": "Measurement struct {\n\tv    float64\n\tm    Measure\n\tdesc *measureDescriptor\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/measure_float64.go",
          "code_snippet": "func (m *Float64Measure) M(v float64) Measurement {\n\treturn Measurement{\n\t\tm:    m,\n\t\tdesc: m.desc,\n\t\tv:    v,\n\t}\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/tag/map.go",
          "code_snippet": "func Upsert(k Key, v string, mds ...Metadata) Mutator {\n\treturn \u0026mutator{\n\t\tfn: func(m *Map) (*Map, error) {\n\t\t\tif !checkValue(v) {\n\t\t\t\treturn nil, errInvalidValue\n\t\t\t}\n\t\t\tm.upsert(k, v, createMetadatas(mds...))\n\t\t\treturn m, nil\n\t\t},\n\t}\n}",
          "ref_module": "tag"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/record.go",
          "code_snippet": "func RecordWithTags(ctx context.Context, mutators []tag.Mutator, ms ...Measurement) error {\n\treturn RecordWithOptions(ctx, WithTags(mutators...), WithMeasurements(ms...))\n}",
          "ref_module": "stats"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := runtimeNow()\n\tif mono == 0 {\n\t\treturn Time{uint64(nsec), sec + unixToInternal, Local}\n\t}\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Since(t Time) Duration {\n\tif t.wall\u0026hasMonotonic != 0 {\n\t\t// Common case optimization: if t has monotonic time, then Sub will use only it.\n\t\treturn subMono(runtimeNano()-startNano, t.ext)\n\t}\n\treturn Now().Sub(t)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strconv/itoa.go",
          "code_snippet": "func Itoa(i int) string {\n\treturn FormatInt(int64(i), 10)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116
      ],
      "cover_details": {
        "line_cover_rate": 0.9444444444444444
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:EncoderOfRegistered",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "EncoderOfRegistered",
      "signature": "(encodeExtension) EncoderOfRegistered (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) EncoderOfRegistered(typ reflect2.Type) jsoniter.ValEncoder {\n\tenc := typeEncoders[typ.String()]\n\tif enc != nil {\n\t\treturn registeredEncoder{enc}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tenc := typeEncoders[ptrType.Elem().String()]\n\t\tif enc != nil {\n\t\t\treturn registeredEncoder{\n\t\t\t\tValEncoder: \u0026jsoniter.OptionalEncoder{\n\t\t\t\t\tValueEncoder: enc,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// EncoderOfRegistered returns a value encoder of a registered type.",
      "function_statement": "// EncoderOfRegistered returns a value encoder of a registered type.",
      "start_line": 32,
      "end_line": 49,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "typeEncoders = map[string]jsoniter.ValEncoder{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "registeredEncoder struct{ jsoniter.ValEncoder }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "PtrType interface {\n\tType\n\tElem() Type\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_optional.go",
          "code_snippet": "OptionalEncoder struct {\n\tValueEncoder ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/struct.go:DecoratorOfStructField",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecoratorOfStructField",
      "signature": "(encodeExtension) DecoratorOfStructField (enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) DecoratorOfStructField(enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder {\n\ttyp, _ := parseTag(tag)\n\tif typ == \"\" {\n\t\treturn nil\n\t}\n\n\tencoder, ok := enc.(typeEncoder)\n\tif !ok {\n\t\tencoder = typeEncoder{ValEncoder: enc}\n\t}\n\tencoder.Type = Type(typ)\n\n\treturn encoder\n}",
      "function_comment": "// DecoratorOfStructField decorates a struct field value encoder.",
      "function_statement": "// DecoratorOfStructField decorates a struct field value encoder.",
      "start_line": 10,
      "end_line": 23,
      "file_path": "./dialect/gremlin/encoding/graphson/struct.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/tags.go",
          "code_snippet": "func parseTag(tag string) (string, tagOptions) {\n\tif idx := strings.Index(tag, \",\"); idx != -1 {\n\t\treturn tag[:idx], tagOptions(tag[idx+1:])\n\t}\n\treturn tag, \"\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        10,
        11,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:DecorateDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "DecorateDecoder",
      "signature": "(ext decodeExtension) DecorateDecoder (typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecorateDecoder(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif dec := ext.DecoratorOfRegistered(dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfUnmarshaler(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfTyper(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfNative(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Ptr, reflect.Struct:\n\t\treturn dec\n\tcase reflect.Interface:\n\t\treturn ext.DecoratorOfInterface(typ, dec)\n\tcase reflect.Slice:\n\t\treturn ext.DecoratorOfSlice(typ, dec)\n\tcase reflect.Array:\n\t\treturn ext.DecoratorOfArray(dec)\n\tcase reflect.Map:\n\t\treturn ext.DecoratorOfMap(dec)\n\tdefault:\n\t\treturn ext.DecoderOfError(\"graphson: unsupported type: %s\", typ.String())\n\t}\n}",
      "function_comment": "// DecorateDecoder decorates an passed in value decoder for type.",
      "function_statement": "// DecorateDecoder decorates an passed in value decoder for type.",
      "start_line": 82,
      "end_line": 109,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (decodeExtension) DecoratorOfRegistered(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := dec.(registeredDecoder); ok {\n\t\treturn dec\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (decodeExtension) DecoratorOfUnmarshaler(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif reflect2.PtrTo(typ).Implements(unmarshalerType) {\n\t\treturn dec\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfTyper(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerDecoder{\n\t\t\ttypeDecoder: typeDecoder{ValDecoder: dec},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (decodeExtension) DecoratorOfNative(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool:\n\t\treturn dec\n\tcase reflect.String:\n\t\treturn typeDecoder{dec, typeCheckerFunc(func(Type) error { return nil })}\n\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n\t\treflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n\t\treturn typeDecoder{dec, integerTypes}\n\tcase reflect.Float32:\n\t\treturn typeDecoder{dec, floatTypes}\n\tcase reflect.Float64:\n\t\treturn typeDecoder{dec, doubleTypes}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (decodeExtension) DecoratorOfInterface(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := typ.(*reflect2.UnsafeEFaceType); ok {\n\t\treturn efaceDecoder{typ, dec}\n\t}\n\treturn dec\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfSlice(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif typ.(reflect2.SliceType).Elem().Kind() == reflect.Uint8 {\n\t\treturn typeDecoder{dec, byteBufferType}\n\t}\n\treturn typeDecoder{dec, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfArray(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (decodeExtension) DecoratorOfMap(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, mapType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func (decodeExtension) DecoderOfError(format string, args ...any) jsoniter.ValDecoder {\n\treturn decoratorOfError(format, args...)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:bindingToAttr",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        }
      ],
      "name": "bindingToAttr",
      "signature": "bindingToAttr (key string, val any) trace.Attribute",
      "ground_truth": "func bindingToAttr(key string, val any) trace.Attribute {\n\tswitch v := val.(type) {\n\tcase nil:\n\t\treturn trace.StringAttribute(key, \"\")\n\tcase int64:\n\t\treturn trace.Int64Attribute(key, v)\n\tcase float64:\n\t\treturn trace.Float64Attribute(key, v)\n\tcase string:\n\t\treturn trace.StringAttribute(key, v)\n\tcase bool:\n\t\treturn trace.BoolAttribute(key, v)\n\tdefault:\n\t\ts := fmt.Sprintf(\"%v\", v)\n\t\tif len(s) \u003e 256 {\n\t\t\ts = s[:256]\n\t\t}\n\t\treturn trace.StringAttribute(key, s)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 77,
      "end_line": 96,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Int64Attribute(key string, value int64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Float64Attribute(key string, value float64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func BoolAttribute(key string, value bool) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectType",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "reflectType",
      "signature": "(efaceDecoder) reflectType (typ Type) reflect2.Type",
      "ground_truth": "func (efaceDecoder) reflectType(typ Type) reflect2.Type {\n\tswitch typ {\n\tcase doubleType:\n\t\treturn reflect2.TypeOf(float64(0))\n\tcase floatType:\n\t\treturn reflect2.TypeOf(float32(0))\n\tcase byteType:\n\t\treturn reflect2.TypeOf(uint8(0))\n\tcase int16Type:\n\t\treturn reflect2.TypeOf(int16(0))\n\tcase int32Type:\n\t\treturn reflect2.TypeOf(int32(0))\n\tcase int64Type, bigIntegerType:\n\t\treturn reflect2.TypeOf(int64(0))\n\tcase byteBufferType:\n\t\treturn reflect2.TypeOf([]byte{})\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 101,
      "end_line": 120,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "doubleType Type = \"g:Double\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "floatType  Type = \"g:Float\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteType       Type = \"gx:Byte\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int16Type      Type = \"gx:Int16\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int32Type  Type = \"g:Int32\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "bigIntegerType Type = \"gx:BigInteger\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int64Type  Type = \"g:Int64\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteBufferType Type = \"gx:ByteBuffer\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/request.go:NewEvalRequest",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportRoundTripper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindings"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadRequest"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestClientCanceledContext"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestClientQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseStatus"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestEvaluateRequestWithoutBindingsEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestEvaluateRequestEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseBody"
        }
      ],
      "name": "NewEvalRequest",
      "signature": "NewEvalRequest (query string, opts ...RequestOption) *Request",
      "ground_truth": "func NewEvalRequest(query string, opts ...RequestOption) *Request {\n\tr := \u0026Request{\n\t\tRequestID: uuid.New().String(),\n\t\tOperation: OpsEval,\n\t\tArguments: map[string]any{\n\t\t\tArgsGremlin:  query,\n\t\t\tArgsLanguage: \"gremlin-groovy\",\n\t\t},\n\t}\n\tfor i := range opts {\n\t\topts[i](r)\n\t}\n\treturn r\n}",
      "function_comment": "// NewEvalRequest returns a new evaluation request request.",
      "function_statement": "// NewEvalRequest returns a new evaluation request request.",
      "start_line": 33,
      "end_line": 46,
      "file_path": "./dialect/gremlin/request.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "RequestOption func(*Request)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "OpsEval = \"eval\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsLanguage = \"language\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/google/uuid@v1.3.0/uuid.go",
          "code_snippet": "func (uuid UUID) String() string {\n\tvar buf [36]byte\n\tencodeHex(buf[:], uuid)\n\treturn string(buf[:])\n}",
          "ref_module": "uuid"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/google/uuid@v1.3.0/version4.go",
          "code_snippet": "func New() UUID {\n\treturn Must(NewRandom())\n}",
          "ref_module": "uuid"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        }
      ],
      "name": "Decode",
      "signature": "(dec unmarshalerDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec unmarshalerDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tbytes := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tunmarshaler := dec.UnsafeIndirect(ptr).(Unmarshaler)\n\tif err := unmarshaler.UnmarshalGraphson(bytes); err != nil {\n\t\titer.ReportError(\n\t\t\t\"unmarshal graphson\",\n\t\t\tfmt.Sprintf(\n\t\t\t\t\"graphson: error calling UnmarshalGraphson for type %s: %s\",\n\t\t\t\tdec.Type, err,\n\t\t\t),\n\t\t)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 108,
      "end_line": 124,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "unmarshalerDecoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "Unmarshaler interface {\n\tUnmarshalGraphson([]byte) error\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        108,
        109,
        110,
        111,
        112,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "cover_details": {
        "line_cover_rate": 0.8823529411764706
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        }
      ],
      "name": "Encode",
      "signature": "(enc *mapEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc *mapEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\titer := enc.mapType.UnsafeIterate(ptr)\n\tif !iter.HasNext() {\n\t\tstream.WriteEmptyArray()\n\t\treturn\n\t}\n\n\tstream.WriteArrayStart()\n\tfor {\n\t\tkey, elem := iter.UnsafeNext()\n\t\tenc.keyEnc.Encode(key, stream)\n\t\tstream.WriteMore()\n\t\tenc.elemEnc.Encode(elem, stream)\n\t\tif !iter.HasNext() {\n\t\t\tbreak\n\t\t}\n\t\tstream.WriteMore()\n\t}\n\tstream.WriteArrayEnd()\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 35,
      "end_line": 54,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapEncoder struct {\n\tmapType reflect2.MapType\n\tkeyEnc  jsoniter.ValEncoder\n\telemEnc jsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapIterator interface {\n\tHasNext() bool\n\tNext() (key interface{}, elem interface{})\n\tUnsafeNext() (key unsafe.Pointer, elem unsafe.Pointer)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteEmptyArray() {\n\tstream.writeTwoBytes('[', ']')\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteArrayStart() {\n\tstream.indention += stream.cfg.indentionStep\n\tstream.writeByte('[')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteMore() {\n\tstream.writeByte(',')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteArrayEnd() {\n\tstream.writeIndention(stream.cfg.indentionStep)\n\tstream.indention -= stream.cfg.indentionStep\n\tstream.writeByte(']')\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        53
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:CreateEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "CreateEncoder",
      "signature": "(ext encodeExtension) CreateEncoder (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) CreateEncoder(typ reflect2.Type) jsoniter.ValEncoder {\n\tif enc := ext.EncoderOfRegistered(typ); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.EncoderOfNative(typ); enc != nil {\n\t\treturn enc\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Map:\n\t\treturn ext.EncoderOfMap(typ)\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// CreateEncoder returns a value encoder for type.",
      "function_statement": "// CreateEncoder returns a value encoder for type.",
      "start_line": 57,
      "end_line": 70,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (encodeExtension) EncoderOfRegistered(typ reflect2.Type) jsoniter.ValEncoder {\n\tenc := typeEncoders[typ.String()]\n\tif enc != nil {\n\t\treturn registeredEncoder{enc}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tenc := typeEncoders[ptrType.Elem().String()]\n\t\tif enc != nil {\n\t\t\treturn registeredEncoder{\n\t\t\t\tValEncoder: \u0026jsoniter.OptionalEncoder{\n\t\t\t\t\tValueEncoder: enc,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (encodeExtension) EncoderOfNative(typ reflect2.Type) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Encoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (ext encodeExtension) EncoderOfMap(typ reflect2.Type) jsoniter.ValEncoder {\n\tmapType := typ.(reflect2.MapType)\n\treturn \u0026mapEncoder{\n\t\tmapType: mapType,\n\t\tkeyEnc:  ext.LazyEncoderOf(mapType.Key()),\n\t\telemEnc: ext.LazyEncoderOf(mapType.Elem()),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/internal/ws/conn.go:DialContext",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectClosure"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestQueryCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestSimpleQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestBadResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestPartialResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestAuthentication"
        }
      ],
      "name": "DialContext",
      "signature": "(d *Dialer) DialContext (ctx context.Context, uri string) (*Conn, error)",
      "ground_truth": "func (d *Dialer) DialContext(ctx context.Context, uri string) (*Conn, error) {\n\tc, rsp, err := d.Dialer.DialContext(ctx, uri, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"gremlin: dialing uri %s: %w\", uri, err)\n\t}\n\tdefer rsp.Body.Close()\n\n\tconn := \u0026Conn{\n\t\tconn: c,\n\t\tuser: d.user,\n\t\tpass: d.pass,\n\t\tsend: make(chan io.Reader),\n\t}\n\tconn.grp, conn.ctx = errgroup.WithContext(context.Background())\n\n\tconn.grp.Go(conn.sender)\n\tconn.grp.Go(conn.receiver)\n\n\treturn conn, nil\n}",
      "function_comment": "// DialContext creates a new Gremlin connection.",
      "function_statement": "// DialContext creates a new Gremlin connection.",
      "start_line": 107,
      "end_line": 126,
      "file_path": "./dialect/gremlin/internal/ws/conn.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Dialer struct {\n\t\t// Underlying websocket dialer.\n\t\twebsocket.Dialer\n\n\t\t// Gremlin server basic auth credentials.\n\t\tuser, pass string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Conn struct {\n\t\t// Underlying websocket connection.\n\t\tconn *websocket.Conn\n\n\t\t// Credentials for basic authentication.\n\t\tuser, pass string\n\n\t\t// Goroutine tracking.\n\t\tctx context.Context\n\t\tgrp *errgroup.Group\n\n\t\t// Channel of outbound requests.\n\t\tsend chan io.Reader\n\n\t\t// Map of in flight requests.\n\t\tinflight sync.Map\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) sender() error {\n\tpinger := time.NewTicker(pingPeriod)\n\tdefer pinger.Stop()\n\n\t// closing connection terminates receiver\n\tdefer c.conn.Close()\n\n\tfor {\n\t\tselect {\n\t\tcase r := \u003c-c.send:\n\t\t\t// ensure write completes within a window\n\t\t\tc.conn.SetWriteDeadline(time.Now().Add(writeWait))\n\n\t\t\t// fetch next message writer\n\t\t\tw, err := c.conn.NextWriter(websocket.BinaryMessage)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"getting message writer: %w\", err)\n\t\t\t}\n\n\t\t\t// write mime header\n\t\t\tif _, err := w.Write(encoding.GraphSON3Mime); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing mime header: %w\", err)\n\t\t\t}\n\n\t\t\t// write request body\n\t\t\tif _, err := io.Copy(w, r); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing request: %w\", err)\n\t\t\t}\n\n\t\t\t// finish message write\n\t\t\tif err := w.Close(); err != nil {\n\t\t\t\treturn fmt.Errorf(\"closing message writer: %w\", err)\n\t\t\t}\n\t\tcase \u003c-c.ctx.Done():\n\t\t\t// connection closing\n\t\t\treturn c.conn.WriteControl(\n\t\t\t\twebsocket.CloseMessage,\n\t\t\t\twebsocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"),\n\t\t\t\ttime.Time{},\n\t\t\t)\n\t\tcase \u003c-pinger.C:\n\t\t\t// periodic connection keepalive\n\t\t\tif err := c.conn.WriteControl(websocket.PingMessage, nil, time.Now().Add(writeWait)); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) receiver() error {\n\t// handle keepalive responses\n\tc.conn.SetReadDeadline(time.Now().Add(pongWait))\n\tc.conn.SetPongHandler(func(string) error {\n\t\treturn c.conn.SetReadDeadline(time.Now().Add(pongWait))\n\t})\n\n\t// complete all in flight requests on termination\n\tdefer c.inflight.Range(func(id, ifr any) bool {\n\t\tifr.(*inflight).result \u003c- result{err: ErrConnClosed}\n\t\tc.inflight.Delete(id)\n\t\treturn true\n\t})\n\n\tfor {\n\t\t// rely on sender connection close during termination\n\t\t_, r, err := c.conn.NextReader()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t}\n\n\t\t// decode received response\n\t\tvar rsp gremlin.Response\n\t\tif err := graphson.NewDecoder(r).Decode(\u0026rsp); err != nil {\n\t\t\treturn fmt.Errorf(\"reading response: %w\", err)\n\t\t}\n\n\t\tifr, ok := c.inflight.Load(rsp.RequestID)\n\t\tif !ok {\n\t\t\t// context cancellation aborts inflight requests\n\t\t\tcontinue\n\t\t}\n\n\t\t// handle incoming response\n\t\tif done := c.receive(ifr.(*inflight), \u0026rsp); done {\n\t\t\t// stop tracking finished requests\n\t\t\tc.inflight.Delete(rsp.RequestID)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/client.go",
          "code_snippet": "func (d *Dialer) DialContext(ctx context.Context, urlStr string, requestHeader http.Header) (*Conn, *http.Response, error) {\n\tif d == nil {\n\t\td = \u0026nilDialer\n\t}\n\n\tchallengeKey, err := generateChallengeKey()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tswitch u.Scheme {\n\tcase \"ws\":\n\t\tu.Scheme = \"http\"\n\tcase \"wss\":\n\t\tu.Scheme = \"https\"\n\tdefault:\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\tif u.User != nil {\n\t\t// User name and password are not allowed in websocket URIs.\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\treq := \u0026http.Request{\n\t\tMethod:     http.MethodGet,\n\t\tURL:        u,\n\t\tProto:      \"HTTP/1.1\",\n\t\tProtoMajor: 1,\n\t\tProtoMinor: 1,\n\t\tHeader:     make(http.Header),\n\t\tHost:       u.Host,\n\t}\n\treq = req.WithContext(ctx)\n\n\t// Set the cookies present in the cookie jar of the dialer\n\tif d.Jar != nil {\n\t\tfor _, cookie := range d.Jar.Cookies(u) {\n\t\t\treq.AddCookie(cookie)\n\t\t}\n\t}\n\n\t// Set the request headers using the capitalization for names and values in\n\t// RFC examples. Although the capitalization shouldn't matter, there are\n\t// servers that depend on it. The Header.Set method is not used because the\n\t// method canonicalizes the header names.\n\treq.Header[\"Upgrade\"] = []string{\"websocket\"}\n\treq.Header[\"Connection\"] = []string{\"Upgrade\"}\n\treq.Header[\"Sec-WebSocket-Key\"] = []string{challengeKey}\n\treq.Header[\"Sec-WebSocket-Version\"] = []string{\"13\"}\n\tif len(d.Subprotocols) \u003e 0 {\n\t\treq.Header[\"Sec-WebSocket-Protocol\"] = []string{strings.Join(d.Subprotocols, \", \")}\n\t}\n\tfor k, vs := range requestHeader {\n\t\tswitch {\n\t\tcase k == \"Host\":\n\t\t\tif len(vs) \u003e 0 {\n\t\t\t\treq.Host = vs[0]\n\t\t\t}\n\t\tcase k == \"Upgrade\" ||\n\t\t\tk == \"Connection\" ||\n\t\t\tk == \"Sec-Websocket-Key\" ||\n\t\t\tk == \"Sec-Websocket-Version\" ||\n\t\t\tk == \"Sec-Websocket-Extensions\" ||\n\t\t\t(k == \"Sec-Websocket-Protocol\" \u0026\u0026 len(d.Subprotocols) \u003e 0):\n\t\t\treturn nil, nil, errors.New(\"websocket: duplicate header not allowed: \" + k)\n\t\tcase k == \"Sec-Websocket-Protocol\":\n\t\t\treq.Header[\"Sec-WebSocket-Protocol\"] = vs\n\t\tdefault:\n\t\t\treq.Header[k] = vs\n\t\t}\n\t}\n\n\tif d.EnableCompression {\n\t\treq.Header[\"Sec-WebSocket-Extensions\"] = []string{\"permessage-deflate; server_no_context_takeover; client_no_context_takeover\"}\n\t}\n\n\tif d.HandshakeTimeout != 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(ctx, d.HandshakeTimeout)\n\t\tdefer cancel()\n\t}\n\n\t// Get network dial function.\n\tvar netDial func(network, add string) (net.Conn, error)\n\n\tswitch u.Scheme {\n\tcase \"http\":\n\t\tif d.NetDialContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDial != nil {\n\t\t\tnetDial = d.NetDial\n\t\t}\n\tcase \"https\":\n\t\tif d.NetDialTLSContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialTLSContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDialContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDial != nil {\n\t\t\tnetDial = d.NetDial\n\t\t}\n\tdefault:\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\tif netDial == nil {\n\t\tnetDialer := \u0026net.Dialer{}\n\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn netDialer.DialContext(ctx, network, addr)\n\t\t}\n\t}\n\n\t// If needed, wrap the dial function to set the connection deadline.\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tforwardDial := netDial\n\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\tc, err := forwardDial(network, addr)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\terr = c.SetDeadline(deadline)\n\t\t\tif err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn c, nil\n\t\t}\n\t}\n\n\t// If needed, wrap the dial function to connect through a proxy.\n\tif d.Proxy != nil {\n\t\tproxyURL, err := d.Proxy(req)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tif proxyURL != nil {\n\t\t\tdialer, err := proxy_FromURL(proxyURL, netDialerFunc(netDial))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tnetDial = dialer.Dial\n\t\t}\n\t}\n\n\thostPort, hostNoPort := hostPortNoPort(u)\n\ttrace := httptrace.ContextClientTrace(ctx)\n\tif trace != nil \u0026\u0026 trace.GetConn != nil {\n\t\ttrace.GetConn(hostPort)\n\t}\n\n\tnetConn, err := netDial(\"tcp\", hostPort)\n\tif trace != nil \u0026\u0026 trace.GotConn != nil {\n\t\ttrace.GotConn(httptrace.GotConnInfo{\n\t\t\tConn: netConn,\n\t\t})\n\t}\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tdefer func() {\n\t\tif netConn != nil {\n\t\t\tnetConn.Close()\n\t\t}\n\t}()\n\n\tif u.Scheme == \"https\" \u0026\u0026 d.NetDialTLSContext == nil {\n\t\t// If NetDialTLSContext is set, assume that the TLS handshake has already been done\n\n\t\tcfg := cloneTLSConfig(d.TLSClientConfig)\n\t\tif cfg.ServerName == \"\" {\n\t\t\tcfg.ServerName = hostNoPort\n\t\t}\n\t\ttlsConn := tls.Client(netConn, cfg)\n\t\tnetConn = tlsConn\n\n\t\tif trace != nil \u0026\u0026 trace.TLSHandshakeStart != nil {\n\t\t\ttrace.TLSHandshakeStart()\n\t\t}\n\t\terr := doHandshake(ctx, tlsConn, cfg)\n\t\tif trace != nil \u0026\u0026 trace.TLSHandshakeDone != nil {\n\t\t\ttrace.TLSHandshakeDone(tlsConn.ConnectionState(), err)\n\t\t}\n\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t}\n\n\tconn := newConn(netConn, false, d.ReadBufferSize, d.WriteBufferSize, d.WriteBufferPool, nil, nil)\n\n\tif err := req.Write(netConn); err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif trace != nil \u0026\u0026 trace.GotFirstResponseByte != nil {\n\t\tif peek, err := conn.br.Peek(1); err == nil \u0026\u0026 len(peek) == 1 {\n\t\t\ttrace.GotFirstResponseByte()\n\t\t}\n\t}\n\n\tresp, err := http.ReadResponse(conn.br, req)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif d.Jar != nil {\n\t\tif rc := resp.Cookies(); len(rc) \u003e 0 {\n\t\t\td.Jar.SetCookies(u, rc)\n\t\t}\n\t}\n\n\tif resp.StatusCode != 101 ||\n\t\t!tokenListContainsValue(resp.Header, \"Upgrade\", \"websocket\") ||\n\t\t!tokenListContainsValue(resp.Header, \"Connection\", \"upgrade\") ||\n\t\tresp.Header.Get(\"Sec-Websocket-Accept\") != computeAcceptKey(challengeKey) {\n\t\t// Before closing the network connection on return from this\n\t\t// function, slurp up some of the response to aid application\n\t\t// debugging.\n\t\tbuf := make([]byte, 1024)\n\t\tn, _ := io.ReadFull(resp.Body, buf)\n\t\tresp.Body = ioutil.NopCloser(bytes.NewReader(buf[:n]))\n\t\treturn nil, resp, ErrBadHandshake\n\t}\n\n\tfor _, ext := range parseExtensions(resp.Header) {\n\t\tif ext[\"\"] != \"permessage-deflate\" {\n\t\t\tcontinue\n\t\t}\n\t\t_, snct := ext[\"server_no_context_takeover\"]\n\t\t_, cnct := ext[\"client_no_context_takeover\"]\n\t\tif !snct || !cnct {\n\t\t\treturn nil, resp, errInvalidCompression\n\t\t}\n\t\tconn.newCompressionWriter = compressNoContextTakeover\n\t\tconn.newDecompressionReader = decompressNoContextTakeover\n\t\tbreak\n\t}\n\n\tresp.Body = ioutil.NopCloser(bytes.NewReader([]byte{}))\n\tconn.subprotocol = resp.Header.Get(\"Sec-Websocket-Protocol\")\n\n\tnetConn.SetDeadline(time.Time{})\n\tnetConn = nil // to avoid close in defer.\n\treturn conn, resp, nil\n}",
          "ref_module": "websocket"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/response.go",
          "code_snippet": "Response struct {\n\tStatus     string // e.g. \"200 OK\"\n\tStatusCode int    // e.g. 200\n\tProto      string // e.g. \"HTTP/1.0\"\n\tProtoMajor int    // e.g. 1\n\tProtoMinor int    // e.g. 0\n\n\t// Header maps header keys to values. If the response had multiple\n\t// headers with the same key, they may be concatenated, with comma\n\t// delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers\n\t// be semantically equivalent to a comma-delimited sequence.) When\n\t// Header values are duplicated by other fields in this struct (e.g.,\n\t// ContentLength, TransferEncoding, Trailer), the field values are\n\t// authoritative.\n\t//\n\t// Keys in the map are canonicalized (see CanonicalHeaderKey).\n\tHeader Header\n\n\t// Body represents the response body.\n\t//\n\t// The response body is streamed on demand as the Body field\n\t// is read. If the network connection fails or the server\n\t// terminates the response, Body.Read calls return an error.\n\t//\n\t// The http Client and Transport guarantee that Body is always\n\t// non-nil, even on responses without a body or responses with\n\t// a zero-length body. It is the caller's responsibility to\n\t// close Body. The default HTTP client's Transport may not\n\t// reuse HTTP/1.x \"keep-alive\" TCP connections if the Body is\n\t// not read to completion and closed.\n\t//\n\t// The Body is automatically dechunked if the server replied\n\t// with a \"chunked\" Transfer-Encoding.\n\t//\n\t// As of Go 1.12, the Body will also implement io.Writer\n\t// on a successful \"101 Switching Protocols\" response,\n\t// as used by WebSockets and HTTP/2's \"h2c\" mode.\n\tBody io.ReadCloser\n\n\t// ContentLength records the length of the associated content. The\n\t// value -1 indicates that the length is unknown. Unless Request.Method\n\t// is \"HEAD\", values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\tContentLength int64\n\n\t// Contains transfer encodings from outer-most to inner-most. Value is\n\t// nil, means that \"identity\" encoding is used.\n\tTransferEncoding []string\n\n\t// Close records whether the header directed that the connection be\n\t// closed after reading Body. The value is advice for clients: neither\n\t// ReadResponse nor Response.Write ever closes a connection.\n\tClose bool\n\n\t// Uncompressed reports whether the response was sent compressed but\n\t// was decompressed by the http package. When true, reading from\n\t// Body yields the uncompressed content instead of the compressed\n\t// content actually set from the server, ContentLength is set to -1,\n\t// and the \"Content-Length\" and \"Content-Encoding\" fields are deleted\n\t// from the responseHeader. To get the original response from\n\t// the server, set Transport.DisableCompression to true.\n\tUncompressed bool\n\n\t// Trailer maps trailer keys to values in the same\n\t// format as Header.\n\t//\n\t// The Trailer initially contains only nil values, one for\n\t// each key specified in the server's \"Trailer\" header\n\t// value. Those values are not added to Header.\n\t//\n\t// Trailer must not be accessed concurrently with Read calls\n\t// on the Body.\n\t//\n\t// After Body.Read has returned io.EOF, Trailer will contain\n\t// any trailer values sent by the server.\n\tTrailer Header\n\n\t// Request is the request that was sent to obtain this Response.\n\t// Request's Body is nil (having already been consumed).\n\t// This is only populated for Client requests.\n\tRequest *Request\n\n\t// TLS contains information about the TLS connection on which the\n\t// response was received. It is nil for unencrypted responses.\n\t// The pointer is shared between responses and should not be\n\t// modified.\n\tTLS *tls.ConnectionState\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/sync@v0.11.0/errgroup/errgroup.go",
          "code_snippet": "func WithContext(ctx context.Context) (*Group, context.Context) {\n\tctx, cancel := withCancelCause(ctx)\n\treturn \u0026Group{cancel: cancel}, ctx\n}",
          "ref_module": "errgroup"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "func Background() Context {\n\treturn backgroundCtx{}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/sync@v0.11.0/errgroup/errgroup.go",
          "code_snippet": "func (g *Group) Go(f func() error) {\n\tif g.sem != nil {\n\t\tg.sem \u003c- token{}\n\t}\n\n\tg.wg.Add(1)\n\tgo func() {\n\t\tdefer g.done()\n\n\t\tif err := f(); err != nil {\n\t\t\tg.errOnce.Do(func() {\n\t\t\t\tg.err = err\n\t\t\t\tif g.cancel != nil {\n\t\t\t\t\tg.cancel(g.err)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}()\n}",
          "ref_module": "errgroup"
        }
      ],
      "covered_lines": [
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125
      ],
      "cover_details": {
        "line_cover_rate": 0.95
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/util.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeSyntaxError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "Decode",
      "signature": "(dec typeDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec typeDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tif iter.WhatIsNext() != jsoniter.ObjectValue {\n\t\tdec.ValDecoder.Decode(ptr, iter)\n\t\treturn\n\t}\n\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tvar tv typeValue\n\tif err := jsoniter.Unmarshal(data, \u0026tv); err != nil {\n\t\titer.ReportError(\"unmarshal type value\", err.Error())\n\t\treturn\n\t}\n\n\tif err := dec.CheckType(tv.Type); err != nil {\n\t\titer.ReportError(\"check type\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(tv.Value)\n\tdefer config.ReturnIterator(it)\n\n\tdec.ValDecoder.Decode(ptr, it)\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode value\", it.Error.Error())\n\t}\n}",
      "function_comment": "// Decode belongs to jsoniter.ValDecoder interface.",
      "function_statement": "// Decode belongs to jsoniter.ValDecoder interface.",
      "start_line": 61,
      "end_line": 90,
      "file_path": "./dialect/gremlin/encoding/graphson/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeValue struct {\n\t\tType  Type\n\t\tValue jsoniter.RawMessage\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeChecker interface {\n\t\tCheckType(Type) error\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "ObjectValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Unmarshal(data []byte, v interface{}) error {\n\treturn ConfigDefault.Unmarshal(data, v)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/pool.go",
          "code_snippet": "IteratorPool interface {\n\tBorrowIterator(data []byte) *Iterator\n\tReturnIterator(iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        69,
        70,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "decode",
      "signature": "(dec efaceDecoder) decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec efaceDecoder) decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\trtype, err := dec.reflectBytes(data)\n\tif err != nil {\n\t\titer.ReportError(\"decode empty interface\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(data)\n\tdefer config.ReturnIterator(it)\n\n\tvar val any\n\tif rtype != nil {\n\t\tval = rtype.New()\n\t\tit.ReadVal(val)\n\t\tval = rtype.Indirect(val)\n\t} else {\n\t\tif jsoniter.Get(data, TypeKey).LastError() == nil {\n\t\t\tvk := jsoniter.Get(data, ValueKey)\n\t\t\tif vk.LastError() == nil {\n\t\t\t\tval = vk.GetInterface()\n\t\t\t}\n\t\t}\n\t\tif val == nil {\n\t\t\tval = it.Read()\n\t\t}\n\t}\n\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode empty interface\", it.Error.Error())\n\t\treturn\n\t}\n\n\t// nolint: gas\n\tdec.typ.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 43,
      "end_line": 82,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (dec efaceDecoder) reflectBytes(data []byte) (reflect2.Type, error) {\n\ttyp := Type(jsoniter.Get(data, TypeKey).ToString())\n\trtype := dec.reflectType(typ)\n\tif rtype != nil {\n\t\treturn rtype, nil\n\t}\n\n\tswitch typ {\n\tcase listType:\n\t\treturn dec.reflectSlice(data)\n\tcase mapType:\n\t\treturn dec.reflectMap(data)\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "ValueKey = \"@value\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/pool.go",
          "code_snippet": "IteratorPool interface {\n\tBorrowIterator(data []byte) *Iterator\n\tReturnIterator(iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "func (iter *Iterator) ReadVal(obj interface{}) {\n\tdepth := iter.depth\n\tcacheKey := reflect2.RTypeOf(obj)\n\tdecoder := iter.cfg.getDecoderFromCache(cacheKey)\n\tif decoder == nil {\n\t\ttyp := reflect2.TypeOf(obj)\n\t\tif typ == nil || typ.Kind() != reflect.Ptr {\n\t\t\titer.ReportError(\"ReadVal\", \"can only unmarshal into pointer\")\n\t\t\treturn\n\t\t}\n\t\tdecoder = iter.cfg.DecoderOf(typ)\n\t}\n\tptr := reflect2.PtrOf(obj)\n\tif ptr == nil {\n\t\titer.ReportError(\"ReadVal\", \"can not read into nil pointer\")\n\t\treturn\n\t}\n\tdecoder.Decode(ptr, iter)\n\tif iter.depth != depth {\n\t\titer.ReportError(\"ReadVal\", \"unexpected mismatched nesting\")\n\t\treturn\n\t}\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/any.go",
          "code_snippet": "Any interface {\n\tLastError() error\n\tValueType() ValueType\n\tMustBeValid() Any\n\tToBool() bool\n\tToInt() int\n\tToInt32() int32\n\tToInt64() int64\n\tToUint() uint\n\tToUint32() uint32\n\tToUint64() uint64\n\tToFloat32() float32\n\tToFloat64() float64\n\tToString() string\n\tToVal(val interface{})\n\tGet(path ...interface{}) Any\n\tSize() int\n\tKeys() []string\n\tGetInterface() interface{}\n\tWriteTo(stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Get(data []byte, path ...interface{}) Any {\n\treturn ConfigDefault.Get(data, path...)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) Read() interface{} {\n\tvalueType := iter.WhatIsNext()\n\tswitch valueType {\n\tcase StringValue:\n\t\treturn iter.ReadString()\n\tcase NumberValue:\n\t\tif iter.cfg.configBeforeFrozen.UseNumber {\n\t\t\treturn json.Number(iter.readNumberAsString())\n\t\t}\n\t\treturn iter.ReadFloat64()\n\tcase NilValue:\n\t\titer.skipFourBytes('n', 'u', 'l', 'l')\n\t\treturn nil\n\tcase BoolValue:\n\t\treturn iter.ReadBool()\n\tcase ArrayValue:\n\t\tarr := []interface{}{}\n\t\titer.ReadArrayCB(func(iter *Iterator) bool {\n\t\t\tvar elem interface{}\n\t\t\titer.ReadVal(\u0026elem)\n\t\t\tarr = append(arr, elem)\n\t\t\treturn true\n\t\t})\n\t\treturn arr\n\tcase ObjectValue:\n\t\tobj := map[string]interface{}{}\n\t\titer.ReadMapCB(func(Iter *Iterator, field string) bool {\n\t\t\tvar elem interface{}\n\t\t\titer.ReadVal(\u0026elem)\n\t\t\tobj[field] = elem\n\t\t\treturn true\n\t\t})\n\t\treturn obj\n\tdefault:\n\t\titer.ReportError(\"Read\", fmt.Sprintf(\"unexpected value type: %v\", valueType))\n\t\treturn nil\n\t}\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        75,
        76,
        77,
        78,
        81
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:DecorateEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "DecorateEncoder",
      "signature": "(ext encodeExtension) DecorateEncoder (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecorateEncoder(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif enc := ext.DecoratorOfRegistered(enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfMarshaler(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfTyper(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfNative(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Ptr, reflect.Interface, reflect.Struct:\n\t\treturn enc\n\tcase reflect.Array:\n\t\treturn ext.DecoratorOfArray(enc)\n\tcase reflect.Slice:\n\t\treturn ext.DecoratorOfSlice(typ, enc)\n\tcase reflect.Map:\n\t\treturn ext.DecoratorOfMap(enc)\n\tdefault:\n\t\treturn ext.EncoderOfError(\"graphson: unsupported type: %s\", typ.String())\n\t}\n}",
      "function_comment": "// DecorateEncoder decorates an passed in value encoder for type.",
      "function_statement": "// DecorateEncoder decorates an passed in value encoder for type.",
      "start_line": 73,
      "end_line": 98,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (encodeExtension) DecoratorOfRegistered(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif _, ok := enc.(registeredEncoder); ok {\n\t\treturn enc\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (ext encodeExtension) DecoratorOfMarshaler(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ == marshalerType {\n\t\tenc := marshalerEncoder{enc, typ}\n\t\treturn directMarshalerEncoder{enc}\n\t}\n\tif typ.Implements(marshalerType) {\n\t\treturn marshalerEncoder{enc, typ}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(marshalerType) {\n\t\tptrEnc := ext.LazyEncoderOf(ptrType)\n\t\tenc := marshalerEncoder{ptrEnc, ptrType}\n\t\treturn referenceEncoder{enc}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (ext encodeExtension) DecoratorOfTyper(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ.Kind() != reflect.Struct {\n\t\treturn nil\n\t}\n\tif typ.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\treturn typ.UnsafeIndirect(ptr).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (encodeExtension) DecoratorOfNative(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool, reflect.String:\n\t\treturn enc\n\tcase reflect.Int64, reflect.Int, reflect.Uint32:\n\t\treturn typeEncoder{enc, int64Type}\n\tcase reflect.Int32, reflect.Int8, reflect.Uint16:\n\t\treturn typeEncoder{enc, int32Type}\n\tcase reflect.Int16:\n\t\treturn typeEncoder{enc, int16Type}\n\tcase reflect.Uint64, reflect.Uint:\n\t\treturn typeEncoder{enc, bigIntegerType}\n\tcase reflect.Uint8:\n\t\treturn typeEncoder{enc, byteType}\n\tcase reflect.Float32:\n\t\treturn typeEncoder{enc, floatType}\n\tcase reflect.Float64:\n\t\treturn typeEncoder{enc, doubleType}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (encodeExtension) DecoratorOfArray(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (encodeExtension) DecoratorOfSlice(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tencoder := typeEncoder{ValEncoder: enc}\n\tsliceType := typ.(reflect2.SliceType)\n\tif sliceType.Elem().Kind() == reflect.Uint8 {\n\t\tencoder.Type = byteBufferType\n\t} else {\n\t\tencoder.Type = listType\n\t}\n\treturn sliceEncoder{sliceType, encoder}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (encodeExtension) DecoratorOfMap(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, mapType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func (encodeExtension) EncoderOfError(format string, args ...any) jsoniter.ValEncoder {\n\treturn decoratorOfError(format, args...)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "reflectMap",
      "signature": "(efaceDecoder) reflectMap (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (efaceDecoder) reflectMap(data []byte) (reflect2.Type, error) {\n\tvar key, elem any\n\tif err := Unmarshal(\n\t\tbytes.Replace(data, []byte(mapType), []byte(listType), 1),\n\t\t\u0026[...]*any{\u0026key, \u0026elem},\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot unmarshal first map item: %w\", err)\n\t}\n\n\tif key == nil {\n\t\treturn reflect2.TypeOf(map[any]any{}), nil\n\t} else if elem == nil {\n\t\treturn nil, errors.New(\"expect map element, but found only key\")\n\t}\n\n\tmapType := reflect.MapOf(reflect.TypeOf(key), reflect.TypeOf(elem))\n\treturn reflect2.Type2(mapType), nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 136,
      "end_line": 153,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "func Unmarshal(data []byte, v any) error {\n\treturn config.Unmarshal(data, v)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func Type2(type1 reflect.Type) Type {\n\tif type1 == nil {\n\t\treturn nil\n\t}\n\treturn ConfigUnsafe.Type2(type1)\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/bytes/bytes.go",
          "code_snippet": "func Replace(s, old, new []byte, n int) []byte {\n\tm := 0\n\tif n != 0 {\n\t\t// Compute number of replacements.\n\t\tm = Count(s, old)\n\t}\n\tif m == 0 {\n\t\t// Just return a copy.\n\t\treturn append([]byte(nil), s...)\n\t}\n\tif n \u003c 0 || m \u003c n {\n\t\tn = m\n\t}\n\n\t// Apply replacements to buffer.\n\tt := make([]byte, len(s)+n*(len(new)-len(old)))\n\tw := 0\n\tstart := 0\n\tfor i := 0; i \u003c n; i++ {\n\t\tj := start\n\t\tif len(old) == 0 {\n\t\t\tif i \u003e 0 {\n\t\t\t\t_, wid := utf8.DecodeRune(s[start:])\n\t\t\t\tj += wid\n\t\t\t}\n\t\t} else {\n\t\t\tj += Index(s[start:], old)\n\t\t}\n\t\tw += copy(t[w:], s[start:j])\n\t\tw += copy(t[w:], new)\n\t\tstart = j + len(old)\n\t}\n\tw += copy(t[w:], s[start:])\n\treturn t[0:w]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/map_swiss.go",
          "code_snippet": "func MapOf(key, elem Type) Type {\n\tktyp := key.common()\n\tetyp := elem.common()\n\n\tif ktyp.Equal == nil {\n\t\tpanic(\"reflect.MapOf: invalid key type \" + stringFor(ktyp))\n\t}\n\n\t// Look in cache.\n\tckey := cacheKey{Map, ktyp, etyp, 0}\n\tif mt, ok := lookupCache.Load(ckey); ok {\n\t\treturn mt.(Type)\n\t}\n\n\t// Look in known types.\n\ts := \"map[\" + stringFor(ktyp) + \"]\" + stringFor(etyp)\n\tfor _, tt := range typesByString(s) {\n\t\tmt := (*mapType)(unsafe.Pointer(tt))\n\t\tif mt.Key == ktyp \u0026\u0026 mt.Elem == etyp {\n\t\t\tti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))\n\t\t\treturn ti.(Type)\n\t\t}\n\t}\n\n\tgroup, slot := groupAndSlotOf(key, elem)\n\n\t// Make a map type.\n\t// Note: flag values must match those used in the TMAP case\n\t// in ../cmd/compile/internal/reflectdata/reflect.go:writeType.\n\tvar imap any = (map[unsafe.Pointer]unsafe.Pointer)(nil)\n\tmt := **(**mapType)(unsafe.Pointer(\u0026imap))\n\tmt.Str = resolveReflectName(newName(s, \"\", false, false))\n\tmt.TFlag = 0\n\tmt.Hash = fnv1(etyp.Hash, 'm', byte(ktyp.Hash\u003e\u003e24), byte(ktyp.Hash\u003e\u003e16), byte(ktyp.Hash\u003e\u003e8), byte(ktyp.Hash))\n\tmt.Key = ktyp\n\tmt.Elem = etyp\n\tmt.Group = group.common()\n\tmt.Hasher = func(p unsafe.Pointer, seed uintptr) uintptr {\n\t\treturn typehash(ktyp, p, seed)\n\t}\n\tmt.GroupSize = mt.Group.Size()\n\tmt.SlotSize = slot.Size()\n\tmt.ElemOff = slot.Field(1).Offset\n\tmt.Flags = 0\n\tif needKeyUpdate(ktyp) {\n\t\tmt.Flags |= abi.SwissMapNeedKeyUpdate\n\t}\n\tif hashMightPanic(ktyp) {\n\t\tmt.Flags |= abi.SwissMapHashMightPanic\n\t}\n\tif ktyp.Size_ \u003e abi.SwissMapMaxKeyBytes {\n\t\tmt.Flags |= abi.SwissMapIndirectKey\n\t}\n\tif etyp.Size_ \u003e abi.SwissMapMaxKeyBytes {\n\t\tmt.Flags |= abi.SwissMapIndirectElem\n\t}\n\tmt.PtrToThis = 0\n\n\tti, _ := lookupCache.LoadOrStore(ckey, toRType(\u0026mt.Type))\n\treturn ti.(Type)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        151,
        152
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        }
      ],
      "name": "Decode",
      "signature": "(dec float64Decoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec float64Decoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tvar val float64\n\tswitch next := iter.WhatIsNext(); next {\n\tcase jsoniter.NumberValue:\n\t\tval = iter.ReadFloat64()\n\tcase jsoniter.StringValue:\n\t\tswitch str := iter.ReadString(); str {\n\t\tcase \"NaN\":\n\t\t\tval = math.NaN()\n\t\tcase \"Infinity\":\n\t\t\tval = math.Inf(1)\n\t\tcase \"-Infinity\":\n\t\t\tval = math.Inf(-1)\n\t\tdefault:\n\t\t\titer.ReportError(\"decode float64\", \"invalid value \"+str)\n\t\t}\n\tdefault:\n\t\titer.ReportError(\"decode float64\", fmt.Sprintf(\"unexpected value type: %d\", next))\n\t}\n\n\tif iter.Error == nil || iter.Error == io.EOF {\n\t\t// nolint: gas\n\t\tdec.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 113,
      "end_line": 137,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Decoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "NumberValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_float.go",
          "code_snippet": "func (iter *Iterator) ReadFloat64() (ret float64) {\n\tc := iter.nextToken()\n\tif c == '-' {\n\t\treturn -iter.readPositiveFloat64()\n\t}\n\titer.unreadByte()\n\treturn iter.readPositiveFloat64()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "StringValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_str.go",
          "code_snippet": "func (iter *Iterator) ReadString() (ret string) {\n\tc := iter.nextToken()\n\tif c == '\"' {\n\t\tfor i := iter.head; i \u003c iter.tail; i++ {\n\t\t\tc := iter.buf[i]\n\t\t\tif c == '\"' {\n\t\t\t\tret = string(iter.buf[iter.head:i])\n\t\t\t\titer.head = i + 1\n\t\t\t\treturn ret\n\t\t\t} else if c == '\\\\' {\n\t\t\t\tbreak\n\t\t\t} else if c \u003c ' ' {\n\t\t\t\titer.ReportError(\"ReadString\",\n\t\t\t\t\tfmt.Sprintf(`invalid control character found: %d`, c))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\treturn iter.readStringSlowPath()\n\t} else if c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn \"\"\n\t}\n\titer.ReportError(\"ReadString\", `expects \" or n, but found `+string([]byte{c}))\n\treturn\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func NaN() float64 { return Float64frombits(uvnan) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func Inf(sign int) float64 {\n\tvar v uint64\n\tif sign \u003e= 0 {\n\t\tv = uvinf\n\t} else {\n\t\tv = uvneginf\n\t}\n\treturn Float64frombits(v)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        129,
        130,
        133,
        134,
        135,
        136
      ],
      "cover_details": {
        "line_cover_rate": 0.84
      }
    },
    {
      "id": "entgo.io/ent/cmd/internal/printer/printer.go:node",
      "testcases": [
        {
          "package": "entgo.io/ent/cmd/internal/printer",
          "rel_file_path": "cmd/internal/printer/printer_test.go",
          "func_name": "TestPrinter_Print"
        }
      ],
      "name": "node",
      "signature": "(p Config) node (t *gen.Type)",
      "ground_truth": "func (p Config) node(t *gen.Type) {\n\tvar (\n\t\tb      strings.Builder\n\t\tid     []*gen.Field\n\t\ttable  = tablewriter.NewWriter(\u0026b)\n\t\theader = []string{\"Field\", \"Type\", \"Unique\", \"Optional\", \"Nillable\", \"Default\", \"UpdateDefault\", \"Immutable\", \"StructTag\", \"Validators\", \"Comment\"}\n\t)\n\tb.WriteString(t.Name + \":\\n\")\n\ttable.Options(\n\t\ttablewriter.WithHeaderConfig(tw.CellConfig{\n\t\t\tPadding: tw.CellPadding{\n\t\t\t\tGlobal: tw.Padding{\n\t\t\t\t\tLeft:  tw.Space,\n\t\t\t\t\tRight: tw.Space,\n\t\t\t\t},\n\t\t\t},\n\t\t\tFormatting: tw.CellFormatting{\n\t\t\t\tAutoFormat: tw.Off,\n\t\t\t},\n\t\t}),\n\t\ttablewriter.WithRendition(tw.Rendition{\n\t\t\tSymbols: tw.NewSymbols(tw.StyleASCII),\n\t\t}),\n\t)\n\ttable.Header(header)\n\tvar alignment = make([]tw.Align, 0)\n\tif t.ID != nil {\n\t\tid = append(id, t.ID)\n\t}\n\tfor _, f := range append(id, t.Fields...) {\n\t\tv := reflect.ValueOf(*f)\n\t\trow := make([]string, len(header))\n\t\tfor i := 0; i \u003c len(row)-1; i++ {\n\t\t\tfield := v.FieldByNameFunc(func(name string) bool {\n\t\t\t\t// The first field is mapped from \"Name\" to \"Field\".\n\t\t\t\treturn name == \"Name\" \u0026\u0026 i == 0 || name == header[i]\n\t\t\t})\n\t\t\trow[i] = fmt.Sprint(field.Interface())\n\t\t\t_, err := strconv.Atoi(row[i])\n\t\t\tif err == nil {\n\t\t\t\talignment = append(alignment, tw.AlignRight)\n\t\t\t} else {\n\t\t\t\talignment = append(alignment, tw.AlignLeft)\n\t\t\t}\n\t\t}\n\t\trow[len(row)-1] = f.Comment()\n\t\t_ = table.Append(row)\n\t\ttable.Options(\n\t\t\ttablewriter.WithRowAlignmentConfig(\n\t\t\t\ttw.CellAlignment{PerColumn: alignment},\n\t\t\t),\n\t\t)\n\t}\n\terr := table.Render()\n\tif err != nil {\n\t\treturn\n\t}\n\t// Create new table for edges\n\ttable = tablewriter.NewWriter(\u0026b)\n\ttable.Options(\n\t\ttablewriter.WithHeaderConfig(tw.CellConfig{\n\t\t\tFormatting: tw.CellFormatting{AutoFormat: tw.Off},\n\t\t\tPadding: tw.CellPadding{\n\t\t\t\tGlobal: tw.Padding{\n\t\t\t\t\tLeft:  tw.Space,\n\t\t\t\t\tRight: tw.Space,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\ttablewriter.WithRendition(tw.Rendition{\n\t\t\tSymbols: tw.NewSymbols(tw.StyleASCII),\n\t\t}),\n\t)\n\ttable.Header([]string{\"Edge\", \"Type\", \"Inverse\", \"BackRef\", \"Relation\", \"Unique\", \"Optional\", \"Comment\"})\n\thasEdges := false\n\tfor _, e := range t.Edges {\n\t\thasEdges = true\n\t\terr := table.Append([]string{\n\t\t\te.Name,\n\t\t\te.Type.Name,\n\t\t\tstrconv.FormatBool(e.IsInverse()),\n\t\t\te.Inverse,\n\t\t\te.Rel.Type.String(),\n\t\t\tstrconv.FormatBool(e.Unique),\n\t\t\tstrconv.FormatBool(e.Optional),\n\t\t\te.Comment(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tif hasEdges {\n\t\terr := table.Render()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tio.WriteString(p, strings.ReplaceAll(b.String(), \"\\n\", \"\\n\\t\")+\"\\n\")\n}",
      "function_comment": "// node returns description of a type. The format of the description is:\n//\n//\tType:\n//\t\t\t\u003cFields Table\u003e\n//\n//\t\t\t\u003cEdges Table\u003e",
      "function_statement": "// node returns description of a type. The format of the description is:\n//\n//\tType:\n//\t\t\t\u003cFields Table\u003e\n//\n//\t\t\t\u003cEdges Table\u003e",
      "start_line": 43,
      "end_line": 141,
      "file_path": "./cmd/internal/printer/printer.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/cmd/internal/printer/printer.go",
          "code_snippet": "Config struct {\n\tio.Writer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Field struct {\n\t\tcfg *Config\n\t\tdef *load.Field\n\t\ttyp *Type\n\t\t// Name is the name of this field in the database schema.\n\t\tName string\n\t\t// Type holds the type information of the field.\n\t\tType *field.TypeInfo\n\t\t// Unique indicate if this field is a unique field.\n\t\tUnique bool\n\t\t// Optional indicates is this field is optional on create.\n\t\tOptional bool\n\t\t// Nillable indicates that this field can be null in the\n\t\t// database and pointer in the generated entities.\n\t\tNillable bool\n\t\t// Default indicates if this field has a default value for creation.\n\t\tDefault bool\n\t\t// Enums information for enum fields.\n\t\tEnums []Enum\n\t\t// UpdateDefault indicates if this field has a default value for update.\n\t\tUpdateDefault bool\n\t\t// Immutable indicates is this field cannot be updated.\n\t\tImmutable bool\n\t\t// StructTag of the field. default to \"json\".\n\t\tStructTag string\n\t\t// Validators holds the number of validators the field have.\n\t\tValidators int\n\t\t// Position info of the field.\n\t\tPosition *load.Position\n\t\t// UserDefined indicates that this field was defined explicitly by the user in\n\t\t// the schema. Unlike the default id field, which is defined by the generator.\n\t\tUserDefined bool\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// referenced foreign-key.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (f Field) Comment() string {\n\tif f.def != nil {\n\t\treturn f.def.Comment\n\t}\n\treturn \"\"\n}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) IsInverse() bool { return e.Inverse != \"\" }",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (r Rel) String() string {\n\ts := \"Unknown\"\n\tswitch r {\n\tcase O2O:\n\t\ts = \"O2O\"\n\tcase O2M:\n\t\ts = \"O2M\"\n\tcase M2O:\n\t\ts = \"M2O\"\n\tcase M2M:\n\t\ts = \"M2M\"\n\t}\n\treturn s\n}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Relation struct {\n\t\t// Type holds the relation type of the edge.\n\t\tType Rel\n\t\t// Table holds the relation table for this edge.\n\t\t// For O2O and O2M, it's the table name of the type we're this edge point to.\n\t\t// For M2O, this is the owner's type, and for M2M this is the join table.\n\t\tTable string\n\t\t// Columns holds the relation column(s) in the relation table above.\n\t\t// For O2M, M2O and O2O, it contains one element with the column name.\n\t\t// For M2M edges, it contains two columns defined in the join table with\n\t\t// the same order as defined in the schema: (owner_id, reference_id).\n\t\tColumns []string\n\t\t// foreign-key information for non-M2M edges.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) Comment() string {\n\tif e.def != nil {\n\t\treturn e.def.Comment\n\t}\n\treturn \"\"\n}",
          "ref_module": "gen"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func NewWriter(w io.Writer) *Table {\n\tt := NewTable(w)\n\tif t.logger != nil {\n\t\tt.logger.Debug(\"NewWriter created buffered Table\")\n\t}\n\treturn t\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Options(opts ...Option) *Table {\n\n\t// add logger\n\tif t.logger == nil {\n\t\tt.logger = ll.New(\"table\").Handler(lh.NewTextHandler(t.trace))\n\t}\n\n\t// loop through options\n\tfor _, opt := range opts {\n\t\topt(t)\n\t}\n\n\t// force debugging mode if set\n\t// This should  be move away form WithDebug\n\tif t.config.Debug == true {\n\t\tt.logger.Enable()\n\t\tt.logger.Resume()\n\t} else {\n\t\tt.logger.Disable()\n\t\tt.logger.Suspend()\n\t}\n\n\t// Get additional system information for debugging\n\tgoVersion := runtime.Version()\n\tgoOS := runtime.GOOS\n\tgoArch := runtime.GOARCH\n\tnumCPU := runtime.NumCPU()\n\n\tt.logger.Infof(\"Environment: LC_CTYPE=%s, LANG=%s, TERM=%s\", os.Getenv(\"LC_CTYPE\"), os.Getenv(\"LANG\"), os.Getenv(\"TERM\"))\n\tt.logger.Infof(\"Go Runtime: Version=%s, OS=%s, Arch=%s, CPUs=%d\", goVersion, goOS, goArch, numCPU)\n\n\t// send logger to renderer\n\t// this will overwrite the default logger\n\tt.renderer.Logger(t.logger)\n\treturn t\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithHeaderConfig(config tw.CellConfig) Option {\n\treturn func(target *Table) {\n\t\ttarget.config.Header = config\n\t\tif target.logger != nil {\n\t\t\ttarget.logger.Debug(\"Option: WithHeaderConfig applied to Table.\")\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellConfig struct {\n\tFormatting   CellFormatting // Cell formatting options\n\tPadding      CellPadding    // Padding configuration\n\tCallbacks    CellCallbacks  // Callback functions (unused)\n\tFilter       CellFilter     // Function to filter cell content (renamed from Filter Filter)\n\tAlignment    CellAlignment  // Alignment configuration for cells\n\tColMaxWidths CellWidth      // Per-column maximum width overrides\n\n\t// Deprecated: use Alignment.PerColumn instead. Will be removed in a future version.\n\t// will be removed soon\n\tColumnAligns []Align // Per-column alignment overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellPadding struct {\n\tGlobal    Padding   // Default padding applied to all cells\n\tPerColumn []Padding // Column-specific padding overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/types.go",
          "code_snippet": "Padding struct {\n\tLeft   string\n\tRight  string\n\tTop    string\n\tBottom string\n\n\t// Overwrite forces tablewriter to use this padding configuration exactly as specified,\n\t// even when empty. When false (default), empty Padding fields will inherit defaults.\n\t//\n\t// For explicit no-padding, use the PaddingNone constant instead of setting Overwrite.\n\tOverwrite bool\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "Space   = \" \"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellFormatting struct {\n\tAutoWrap  int // Wrapping behavior (e.g., WrapTruncate, WrapNormal)\n\tMergeMode int // Bitmask for merge behavior (e.g., MergeHorizontal, MergeVertical)\n\n\t// Changed form bool to State\n\t// See https://github.com/olekukonko/tablewriter/issues/261\n\tAutoFormat State // Enables automatic formatting (e.g., title case for headers)\n\n\t// Deprecated: kept for compatibility\n\t// will be removed soon\n\tAlignment Align // Text alignment within the cell (e.g., Left, Right, Center)\n\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "Off     State = Fail",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithRendition(rendition tw.Rendition) Option {\n\treturn func(target *Table) {\n\t\tif target.renderer == nil {\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Warn(\"Option: WithRendition: No renderer set on table.\")\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif ru, ok := target.renderer.(tw.Renditioning); ok {\n\t\t\tru.Rendition(rendition)\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Debugf(\"Option: WithRendition: Applied to renderer via Renditioning.SetRendition(): %+v\", rendition)\n\t\t\t}\n\t\t} else {\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Warnf(\"Option: WithRendition: Current renderer type %T does not implement tw.Renditioning. Rendition may not be applied as expected.\", target.renderer)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/renderer.go",
          "code_snippet": "Rendition struct {\n\tBorders   Border   // Border visibility settings\n\tSymbols   Symbols  // Symbols used for table drawing\n\tSettings  Settings // Rendering behavior settings\n\tStreaming bool\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/symbols.go",
          "code_snippet": "func NewSymbols(style BorderStyle) Symbols {\n\tswitch style {\n\tcase StyleASCII:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameASCII,\n\t\t\trow:    \"-\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t},\n\t\t\theaderLeft:  \"+\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \"+\",\n\t\t}\n\tcase StyleLight, StyleDefault:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLight,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┼\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌\", \"┬\", \"┐\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"└\", \"┴\", \"┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"┼\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleHeavy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHeavy,\n\t\t\trow:    \"━\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╋\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┏\", \"┳\", \"┓\",\n\t\t\t\t\"┣\", \"╋\", \"┫\",\n\t\t\t\t\"┗\", \"┻\", \"┛\",\n\t\t\t},\n\t\t\theaderLeft:  \"┣\",\n\t\t\theaderMid:   \"╋\",\n\t\t\theaderRight: \"┫\",\n\t\t}\n\tcase StyleDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDouble,\n\t\t\trow:    \"═\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╬\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔\", \"╦\", \"╗\",\n\t\t\t\t\"╠\", \"╬\", \"╣\",\n\t\t\t\t\"╚\", \"╩\", \"╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╠\",\n\t\t\theaderMid:   \"╬\",\n\t\t\theaderRight: \"╣\",\n\t\t}\n\tcase StyleDoubleLong:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDoubleLong,\n\t\t\trow:    \"═╡═\",\n\t\t\tcolumn: \"╞\",\n\t\t\tcenter: \"╪\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔═╡\", \"═╤═\", \"╡═╗\",\n\t\t\t\t\"╟ \", \"╪ \", \" ╢\",\n\t\t\t\t\"╚═╡\", \"═╧═\", \"╡═╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╟═╡\",\n\t\t\theaderMid:   \"╪═╡\",\n\t\t\theaderRight: \"╡═╢\",\n\t\t}\n\tcase StyleLightHeavy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLightHeavy,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╂\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┍\", \"┯\", \"┑\",\n\t\t\t\t\"┝\", \"╂\", \"┥\",\n\t\t\t\t\"┕\", \"┷\", \"┙\",\n\t\t\t},\n\t\t\theaderLeft:  \"┝\",\n\t\t\theaderMid:   \"╂\",\n\t\t\theaderRight: \"┥\",\n\t\t}\n\tcase StyleHeavyLight:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHeavyLight,\n\t\t\trow:    \"━\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┎\", \"┰\", \"┒\",\n\t\t\t\t\"┠\", \"┿\", \"┨\",\n\t\t\t\t\"┖\", \"┸\", \"┚\",\n\t\t\t},\n\t\t\theaderLeft:  \"┠\",\n\t\t\theaderMid:   \"┿\",\n\t\t\theaderRight: \"┨\",\n\t\t}\n\tcase StyleLightDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLightDouble,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╫\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╓\", \"╥\", \"╖\",\n\t\t\t\t\"╟\", \"╫\", \"╢\",\n\t\t\t\t\"╙\", \"╨\", \"╜\",\n\t\t\t},\n\t\t\theaderLeft:  \"╟\",\n\t\t\theaderMid:   \"╫\",\n\t\t\theaderRight: \"╢\",\n\t\t}\n\tcase StyleDoubleLight:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDoubleLight,\n\t\t\trow:    \"═\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"╪\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╒\", \"╤\", \"╕\",\n\t\t\t\t\"╞\", \"╪\", \"╡\",\n\t\t\t\t\"╘\", \"╧\", \"╛\",\n\t\t\t},\n\t\t\theaderLeft:  \"╞\",\n\t\t\theaderMid:   \"╪\",\n\t\t\theaderRight: \"╡\",\n\t\t}\n\tcase StyleRounded:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameRounded,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┼\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╭\", \"┬\", \"╮\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"╰\", \"┴\", \"╯\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"┼\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleMarkdown:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMarkdown,\n\t\t\trow:    \"-\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"|\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"|\", \"|\", \"|\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t},\n\t\t\theaderLeft:  \"|\",\n\t\t\theaderMid:   \"|\",\n\t\t\theaderRight: \"|\",\n\t\t}\n\tcase StyleGraphical:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameGraphical,\n\t\t\trow:    \"┄┄\",\n\t\t\tcolumn: \"┆\",\n\t\t\tcenter: \"╂\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌┄\", \"┄┄\", \"┄┐\",\n\t\t\t\t\"┆ \", \"╂ \", \" ┆\",\n\t\t\t\t\"└┄\", \"┄┄\", \"┄┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├┄\",\n\t\t\theaderMid:   \"╂┄\",\n\t\t\theaderRight: \"┄┤\",\n\t\t}\n\tcase StyleMerger:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMerger,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌\", \"┬\", \"┐\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"└\", \"┴\", \"┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleDotted:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDotted,\n\t\t\trow:    \"·\",\n\t\t\tcolumn: \":\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\".\", \"·\", \".\",\n\t\t\t\t\":\", \"+\", \":\",\n\t\t\t\t\"'\", \"·\", \"'\",\n\t\t\t},\n\t\t\theaderLeft:  \":\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \":\",\n\t\t}\n\tcase StyleArrow:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArrow,\n\t\t\trow:    \"→\",\n\t\t\tcolumn: \"↓\",\n\t\t\tcenter: \"↔\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"↗\", \"↑\", \"↖\",\n\t\t\t\t\"→\", \"↔\", \"←\",\n\t\t\t\t\"↘\", \"↓\", \"↙\",\n\t\t\t},\n\t\t\theaderLeft:  \"→\",\n\t\t\theaderMid:   \"↔\",\n\t\t\theaderRight: \"←\",\n\t\t}\n\tcase StyleStarry:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameStarry,\n\t\t\trow:    \"★\",\n\t\t\tcolumn: \"☆\",\n\t\t\tcenter: \"✶\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"✧\", \"✯\", \"✧\",\n\t\t\t\t\"✦\", \"✶\", \"✦\",\n\t\t\t\t\"✧\", \"✯\", \"✧\",\n\t\t\t},\n\t\t\theaderLeft:  \"✦\",\n\t\t\theaderMid:   \"✶\",\n\t\t\theaderRight: \"✦\",\n\t\t}\n\tcase StyleHearts:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHearts,\n\t\t\trow:    \"♥\",\n\t\t\tcolumn: \"❤\",\n\t\t\tcenter: \"✚\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"❥\", \"♡\", \"❥\",\n\t\t\t\t\"❣\", \"✚\", \"❣\",\n\t\t\t\t\"❦\", \"♡\", \"❦\",\n\t\t\t},\n\t\t\theaderLeft:  \"❣\",\n\t\t\theaderMid:   \"✚\",\n\t\t\theaderRight: \"❣\",\n\t\t}\n\tcase StyleCircuit:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCircuit,\n\t\t\trow:    \"=\",\n\t\t\tcolumn: \"||\",\n\t\t\tcenter: \"\u003c\u003e\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"/*\", \"##\", \"*/\",\n\t\t\t\t\"//\", \"\u003c\u003e\", \"\\\\\",\n\t\t\t\t\"\\\\*\", \"##\", \"*/\",\n\t\t\t},\n\t\t\theaderLeft:  \"//\",\n\t\t\theaderMid:   \"\u003c\u003e\",\n\t\t\theaderRight: \"\\\\\",\n\t\t}\n\tcase StyleNature:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameNature,\n\t\t\trow:    \"~\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"❀\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🌱\", \"🌿\", \"🌱\",\n\t\t\t\t\"🍃\", \"❀\", \"🍃\",\n\t\t\t\t\"🌻\", \"🌾\", \"🌻\",\n\t\t\t},\n\t\t\theaderLeft:  \"🍃\",\n\t\t\theaderMid:   \"❀\",\n\t\t\theaderRight: \"🍃\",\n\t\t}\n\tcase StyleArtistic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArtistic,\n\t\t\trow:    \"▬\",\n\t\t\tcolumn: \"▐\",\n\t\t\tcenter: \"⬔\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◈\", \"◊\", \"◈\",\n\t\t\t\t\"◀\", \"⬔\", \"▶\",\n\t\t\t\t\"◭\", \"▣\", \"◮\",\n\t\t\t},\n\t\t\theaderLeft:  \"◀\",\n\t\t\theaderMid:   \"⬔\",\n\t\t\theaderRight: \"▶\",\n\t\t}\n\tcase Style8Bit:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleName8Bit,\n\t\t\trow:    \"■\",\n\t\t\tcolumn: \"█\",\n\t\t\tcenter: \"♦\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔\", \"▲\", \"╗\",\n\t\t\t\t\"◄\", \"♦\", \"►\",\n\t\t\t\t\"╚\", \"▼\", \"╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"◄\",\n\t\t\theaderMid:   \"♦\",\n\t\t\theaderRight: \"►\",\n\t\t}\n\tcase StyleChaos:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameChaos,\n\t\t\trow:    \"≈\",\n\t\t\tcolumn: \"§\",\n\t\t\tcenter: \"☯\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌘\", \"∞\", \"⌥\",\n\t\t\t\t\"⚡\", \"☯\", \"♞\",\n\t\t\t\t\"⌂\", \"∆\", \"◊\",\n\t\t\t},\n\t\t\theaderLeft:  \"⚡\",\n\t\t\theaderMid:   \"☯\",\n\t\t\theaderRight: \"♞\",\n\t\t}\n\tcase StyleDots:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDots,\n\t\t\trow:    \"·\",\n\t\t\tcolumn: \" \",\n\t\t\tcenter: \"·\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"·\", \"·\", \"·\",\n\t\t\t\t\" \", \"·\", \" \",\n\t\t\t\t\"·\", \"·\", \"·\",\n\t\t\t},\n\t\t\theaderLeft:  \" \",\n\t\t\theaderMid:   \"·\",\n\t\t\theaderRight: \" \",\n\t\t}\n\tcase StyleBlocks:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameBlocks,\n\t\t\trow:    \"▀\",\n\t\t\tcolumn: \"█\",\n\t\t\tcenter: \"█\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"▛\", \"▀\", \"▜\",\n\t\t\t\t\"▌\", \"█\", \"▐\",\n\t\t\t\t\"▙\", \"▄\", \"▟\",\n\t\t\t},\n\t\t\theaderLeft:  \"▌\",\n\t\t\theaderMid:   \"█\",\n\t\t\theaderRight: \"▐\",\n\t\t}\n\tcase StyleZen:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameZen,\n\t\t\trow:    \"~\",\n\t\t\tcolumn: \" \",\n\t\t\tcenter: \"☯\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\" \", \"♨\", \" \",\n\t\t\t\t\" \", \"☯\", \" \",\n\t\t\t\t\" \", \"♨\", \" \",\n\t\t\t},\n\t\t\theaderLeft:  \" \",\n\t\t\theaderMid:   \"☯\",\n\t\t\theaderRight: \" \",\n\t\t}\n\tcase StyleVintage:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameVintage,\n\t\t\trow:    \"────\",\n\t\t\tcolumn: \" ⁜ \",\n\t\t\tcenter: \" ✠ \",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔══\", \"══╤\", \"══╗\",\n\t\t\t\t\" ⁜ \", \" ✠ \", \" ⁜ \",\n\t\t\t\t\"╚══\", \"══╧\", \"══╝\",\n\t\t\t},\n\t\t\theaderLeft:  \" ├─\",\n\t\t\theaderMid:   \"─✠─\",\n\t\t\theaderRight: \"─┤ \",\n\t\t}\n\tcase StyleSketch:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameSketch,\n\t\t\trow:    \"~~\",\n\t\t\tcolumn: \"/\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\" .\", \"~~\", \". \",\n\t\t\t\t\"/ \", \"+ \", \" \\\\\",\n\t\t\t\t\" '\", \"~~\", \"` \",\n\t\t\t},\n\t\t\theaderLeft:  \"/~\",\n\t\t\theaderMid:   \"+~\",\n\t\t\theaderRight: \"~\\\\\",\n\t\t}\n\tcase StyleArrowDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArrowDouble,\n\t\t\trow:    \"»»\",\n\t\t\tcolumn: \"⫸\",\n\t\t\tcenter: \"✿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌜»\", \"»»\", \"»⌝\",\n\t\t\t\t\"⫸ \", \"✿ \", \" ⫷\",\n\t\t\t\t\"⌞»\", \"»»\", \"»⌟\",\n\t\t\t},\n\t\t\theaderLeft:  \"⫸»\",\n\t\t\theaderMid:   \"✿»\",\n\t\t\theaderRight: \"»⫷\",\n\t\t}\n\tcase StyleCelestial:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCelestial,\n\t\t\trow:    \"✦✧\",\n\t\t\tcolumn: \"☽\",\n\t\t\tcenter: \"☀\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"✧✦\", \"✦✧\", \"✦✧\",\n\t\t\t\t\"☽ \", \"☀ \", \" ☾\",\n\t\t\t\t\"✧✦\", \"✦✧\", \"✦✧\",\n\t\t\t},\n\t\t\theaderLeft:  \"☽✦\",\n\t\t\theaderMid:   \"☀✧\",\n\t\t\theaderRight: \"✦☾\",\n\t\t}\n\tcase StyleCyber:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCyber,\n\t\t\trow:    \"═╦═\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╬\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔╦═\", \"╦═╦\", \"═╦╗\",\n\t\t\t\t\"║ \", \"╬ \", \" ║\",\n\t\t\t\t\"╚╩═\", \"╩═╩\", \"═╩╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╠╦═\",\n\t\t\theaderMid:   \"╬═╦\",\n\t\t\theaderRight: \"═╦╣\",\n\t\t}\n\tcase StyleRunic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameRunic,\n\t\t\trow:    \"ᛖᛖᛖ\",\n\t\t\tcolumn: \"ᛟ\",\n\t\t\tcenter: \"ᛞ\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"ᛏᛖᛖ\", \"ᛖᛖᛖ\", \"ᛖᛖᛏ\",\n\t\t\t\t\"ᛟ \", \"ᛞ \", \" ᛟ\",\n\t\t\t\t\"ᛗᛖᛖ\", \"ᛖᛖᛖ\", \"ᛖᛖᛗ\",\n\t\t\t},\n\t\t\theaderLeft:  \"ᛟᛖᛖ\",\n\t\t\theaderMid:   \"ᛞᛖᛖ\",\n\t\t\theaderRight: \"ᛖᛖᛟ\",\n\t\t}\n\tcase StyleIndustrial:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameIndustrial,\n\t\t\trow:    \"━╋━\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╋\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┏╋━\", \"╋━╋\", \"━╋┓\",\n\t\t\t\t\"┃ \", \"╋ \", \" ┃\",\n\t\t\t\t\"┗╋━\", \"╋━╋\", \"━╋┛\",\n\t\t\t},\n\t\t\theaderLeft:  \"┣╋━\",\n\t\t\theaderMid:   \"╋━╋\",\n\t\t\theaderRight: \"━╋┫\",\n\t\t}\n\tcase StyleInk:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameInk,\n\t\t\trow:    \"﹌\",\n\t\t\tcolumn: \"︱\",\n\t\t\tcenter: \"✒\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"﹏\", \"﹌\", \"﹏\",\n\t\t\t\t\"︱ \", \"✒ \", \" ︱\",\n\t\t\t\t\"﹋\", \"﹌\", \"﹋\",\n\t\t\t},\n\t\t\theaderLeft:  \"︱﹌\",\n\t\t\theaderMid:   \"✒﹌\",\n\t\t\theaderRight: \"﹌︱\",\n\t\t}\n\tcase StyleArcade:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArcade,\n\t\t\trow:    \"■□\",\n\t\t\tcolumn: \"▐\",\n\t\t\tcenter: \"◉\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"▞■\", \"■□\", \"□▚\",\n\t\t\t\t\"▐ \", \"◉ \", \" ▐\",\n\t\t\t\t\"▚■\", \"■□\", \"□▞\",\n\t\t\t},\n\t\t\theaderLeft:  \"▐■\",\n\t\t\theaderMid:   \"◉□\",\n\t\t\theaderRight: \"■▐\",\n\t\t}\n\tcase StyleBlossom:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameBlossom,\n\t\t\trow:    \"🌸\",\n\t\t\tcolumn: \"🌿\",\n\t\t\tcenter: \"✿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🌷\", \"🌸\", \"🌷\",\n\t\t\t\t\"🌿\", \"✿\", \"🌿\",\n\t\t\t\t\"🌱\", \"🌸\", \"🌱\",\n\t\t\t},\n\t\t\theaderLeft:  \"🌿🌸\",\n\t\t\theaderMid:   \"✿🌸\",\n\t\t\theaderRight: \"🌸🌿\",\n\t\t}\n\tcase StyleFrosted:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameFrosted,\n\t\t\trow:    \"░▒░\",\n\t\t\tcolumn: \"▓\",\n\t\t\tcenter: \"◍\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◌░▒\", \"░▒░\", \"▒░◌\",\n\t\t\t\t\"▓ \", \"◍ \", \" ▓\",\n\t\t\t\t\"◌░▒\", \"░▒░\", \"▒░◌\",\n\t\t\t},\n\t\t\theaderLeft:  \"▓░▒\",\n\t\t\theaderMid:   \"◍▒░\",\n\t\t\theaderRight: \"░▒▓\",\n\t\t}\n\tcase StyleMosaic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMosaic,\n\t\t\trow:    \"▰▱\",\n\t\t\tcolumn: \"⧉\",\n\t\t\tcenter: \"⬖\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⧠▰\", \"▰▱\", \"▱⧠\",\n\t\t\t\t\"⧉ \", \"⬖ \", \" ⧉\",\n\t\t\t\t\"⧅▰\", \"▰▱\", \"▱⧅\",\n\t\t\t},\n\t\t\theaderLeft:  \"⧉▰\",\n\t\t\theaderMid:   \"⬖▱\",\n\t\t\theaderRight: \"▰⧉\",\n\t\t}\n\tcase StyleUFO:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameUFO,\n\t\t\trow:    \"⊚⊚\",\n\t\t\tcolumn: \"☽\",\n\t\t\tcenter: \"☢\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌖⊚\", \"⊚⊚\", \"⊚⌖\",\n\t\t\t\t\"☽ \", \"☢ \", \" ☽\",\n\t\t\t\t\"⌗⊚\", \"⊚⊚\", \"⊚⌗\",\n\t\t\t},\n\t\t\theaderLeft:  \"☽⊚\",\n\t\t\theaderMid:   \"☢⊚\",\n\t\t\theaderRight: \"⊚☽\",\n\t\t}\n\tcase StyleSteampunk:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameSteampunk,\n\t\t\trow:    \"═⚙═\",\n\t\t\tcolumn: \"⛓️\",\n\t\t\tcenter: \"⚔️\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🜂⚙═\", \"═⚙═\", \"═⚙🜂\",\n\t\t\t\t\"⛓️ \", \"⚔️ \", \" ⛓️\",\n\t\t\t\t\"🜄⚙═\", \"═⚙═\", \"═⚙🜄\",\n\t\t\t},\n\t\t\theaderLeft:  \"⛓️⚙═\",\n\t\t\theaderMid:   \"⚔️═⚙\",\n\t\t\theaderRight: \"═⚙⛓️\",\n\t\t}\n\tcase StyleGalaxy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameGalaxy,\n\t\t\trow:    \"≋≋\",\n\t\t\tcolumn: \"♆\",\n\t\t\tcenter: \"☄️\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌇≋\", \"≋≋\", \"≋⌇\",\n\t\t\t\t\"♆ \", \"☄️ \", \" ♆\",\n\t\t\t\t\"⌇≋\", \"≋≋\", \"≋⌇\",\n\t\t\t},\n\t\t\theaderLeft:  \"♆≋\",\n\t\t\theaderMid:   \"☄️≋\",\n\t\t\theaderRight: \"≋♆\",\n\t\t}\n\tcase StyleJazz:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameJazz,\n\t\t\trow:    \"♬♬\",\n\t\t\tcolumn: \"▷\",\n\t\t\tcenter: \"★\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"♔♬\", \"♬♬\", \"♬♔\",\n\t\t\t\t\"▷ \", \"★ \", \" ◁\",\n\t\t\t\t\"♕♬\", \"♬♬\", \"♬♕\",\n\t\t\t},\n\t\t\theaderLeft:  \"▷♬\",\n\t\t\theaderMid:   \"★♬\",\n\t\t\theaderRight: \"♬◁\",\n\t\t}\n\tcase StylePuzzle:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNamePuzzle,\n\t\t\trow:    \"▣▣\",\n\t\t\tcolumn: \"◫\",\n\t\t\tcenter: \"✚\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◩▣\", \"▣▣\", \"▣◪\",\n\t\t\t\t\"◫ \", \"✚ \", \" ◫\",\n\t\t\t\t\"◧▣\", \"▣▣\", \"▣◨\",\n\t\t\t},\n\t\t\theaderLeft:  \"◫▣\",\n\t\t\theaderMid:   \"✚▣\",\n\t\t\theaderRight: \"▣◫\",\n\t\t}\n\tcase StyleHypno:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHypno,\n\t\t\trow:    \"◜◝\",\n\t\t\tcolumn: \"꩜\",\n\t\t\tcenter: \"⃰\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◟◜\", \"◜◝\", \"◝◞\",\n\t\t\t\t\"꩜ \", \"⃰ \", \" ꩜\",\n\t\t\t\t\"◟◜\", \"◜◝\", \"◝◞\",\n\t\t\t},\n\t\t\theaderLeft:  \"꩜◜\",\n\t\t\theaderMid:   \"⃰◝\",\n\t\t\theaderRight: \"◜꩜\",\n\t\t}\n\tdefault:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameNothing,\n\t\t\trow:    \"\",\n\t\t\tcolumn: \"\",\n\t\t\tcenter: \"\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t},\n\t\t\theaderLeft:  \"\",\n\t\t\theaderMid:   \"\",\n\t\t\theaderRight: \"\",\n\t\t}\n\t}\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/symbols.go",
          "code_snippet": "StyleASCII",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Header(elements ...any) {\n\tt.ensureInitialized()\n\tt.logger.Debugf(\"Header() method called with raw variadic elements: %v (len %d). Streaming: %v, Started: %v\", elements, len(elements), t.config.Stream.Enable, t.hasPrinted)\n\n\t// just forget\n\tif t.config.Behavior.Header.Hide.Enabled() {\n\t\treturn\n\t}\n\n\t// add come common default\n\tif t.config.Header.Formatting.AutoFormat == tw.Unknown {\n\t\tt.config.Header.Formatting.AutoFormat = tw.On\n\t}\n\n\tif t.config.Stream.Enable \u0026\u0026 t.hasPrinted {\n\t\t//  Streaming Path\n\t\tactualCellsToProcess := t.processVariadic(elements)\n\t\theadersAsStrings, err := t.convertCellsToStrings(actualCellsToProcess, t.config.Header)\n\t\tif err != nil {\n\t\t\tt.logger.Errorf(\"Header(): Failed to convert header elements to strings for streaming: %v\", err)\n\t\t\theadersAsStrings = []string{} // Use empty on error\n\t\t}\n\t\terrStream := t.streamRenderHeader(headersAsStrings) // streamRenderHeader handles padding to streamNumCols internally\n\t\tif errStream != nil {\n\t\t\tt.logger.Errorf(\"Error rendering streaming header: %v\", errStream)\n\t\t}\n\t\treturn\n\t}\n\n\t//  Batch Path\n\tprocessedElements := t.processVariadic(elements)\n\tt.logger.Debugf(\"Header() (Batch): Effective cells to process: %v\", processedElements)\n\n\theadersAsStrings, err := t.convertCellsToStrings(processedElements, t.config.Header)\n\tif err != nil {\n\t\tt.logger.Errorf(\"Header() (Batch): Failed to convert to strings: %v\", err)\n\t\tt.headers = [][]string{} // Set to empty on error\n\t\treturn\n\t}\n\n\t// prepareContent uses t.config.Header for AutoFormat and MaxWidth constraints.\n\t// It processes based on the number of columns in headersAsStrings.\n\tpreparedHeaderLines := t.prepareContent(headersAsStrings, t.config.Header)\n\tt.headers = preparedHeaderLines // Store directly. Padding to t.maxColumns() will happen in prepareContexts.\n\n\tt.logger.Debugf(\"Header set (batch mode), lines stored: %d. First line if exists: %v\", len(t.headers), func() []string {\n\t\tif len(t.headers) \u003e 0 {\n\t\t\treturn t.headers[0]\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}())\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/types.go",
          "code_snippet": "Align string",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "AlignRight   Align = \"right\"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "AlignLeft    Align = \"left\"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Append(rows ...interface{}) error { // rows is already []interface{}\n\tt.ensureInitialized()\n\n\tif t.config.Stream.Enable \u0026\u0026 t.hasPrinted {\n\t\tt.logger.Debugf(\"Append() called in streaming mode with %d items for a single row\", len(rows))\n\t\tvar rowItemForStream interface{}\n\t\tif len(rows) == 1 {\n\t\t\trowItemForStream = rows[0]\n\t\t} else {\n\t\t\trowItemForStream = rows // Pass the slice of items if multiple args\n\t\t}\n\t\tif err := t.streamAppendRow(rowItemForStream); err != nil {\n\t\t\tt.logger.Errorf(\"Error rendering streaming row: %v\", err)\n\t\t\treturn fmt.Errorf(\"failed to stream append row: %w\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\t//Batch Mode Logic\n\tt.logger.Debugf(\"Append (Batch) received %d arguments: %v\", len(rows), rows)\n\n\tvar cellsSource interface{}\n\tif len(rows) == 1 {\n\t\tcellsSource = rows[0]\n\t\tt.logger.Debug(\"Append (Batch): Single argument provided. Treating it as the source for row cells.\")\n\t} else {\n\t\tcellsSource = rows // 'rows' is []interface{} containing all arguments\n\t\tt.logger.Debug(\"Append (Batch): Multiple arguments provided. Treating them directly as cells for one row.\")\n\t}\n\n\tif err := t.appendSingle(cellsSource); err != nil {\n\t\tt.logger.Errorf(\"Append (Batch) failed for cellsSource %v: %v\", cellsSource, err)\n\t\treturn err\n\t}\n\n\tt.logger.Debugf(\"Append (Batch) completed for one row, total rows in table: %d\", len(t.rows))\n\treturn nil\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithRowAlignmentConfig(alignment tw.CellAlignment) Option {\n\treturn func(target *Table) {\n\t\ttarget.config.Row.Alignment = alignment\n\t\tif target.logger != nil {\n\t\t\ttarget.logger.Debugf(\"Option: WithRowAlignmentConfig applied to Table: %+v\", alignment)\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellAlignment struct {\n\tGlobal    Align   // Default alignment applied to all cells\n\tPerColumn []Align // Column-specific alignment overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Render() error {\n\treturn t.render()\n}",
          "ref_module": "tablewriter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) FieldByNameFunc(match func(string) bool) Value {\n\tif f, ok := toRType(v.typ()).FieldByNameFunc(match); ok {\n\t\treturn v.FieldByIndex(f.Index)\n\t}\n\treturn Value{}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprint(a ...any) string {\n\tp := newPrinter()\n\tp.doPrint(a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func Atoi(s string) (int, error) {\n\tconst fnAtoi = \"Atoi\"\n\n\tsLen := len(s)\n\tif intSize == 32 \u0026\u0026 (0 \u003c sLen \u0026\u0026 sLen \u003c 10) ||\n\t\tintSize == 64 \u0026\u0026 (0 \u003c sLen \u0026\u0026 sLen \u003c 19) {\n\t\t// Fast path for small integers that fit int type.\n\t\ts0 := s\n\t\tif s[0] == '-' || s[0] == '+' {\n\t\t\ts = s[1:]\n\t\t\tif len(s) \u003c 1 {\n\t\t\t\treturn 0, syntaxError(fnAtoi, s0)\n\t\t\t}\n\t\t}\n\n\t\tn := 0\n\t\tfor _, ch := range []byte(s) {\n\t\t\tch -= '0'\n\t\t\tif ch \u003e 9 {\n\t\t\t\treturn 0, syntaxError(fnAtoi, s0)\n\t\t\t}\n\t\t\tn = n*10 + int(ch)\n\t\t}\n\t\tif s0[0] == '-' {\n\t\t\tn = -n\n\t\t}\n\t\treturn n, nil\n\t}\n\n\t// Slow path for invalid, big, or underscored integers.\n\ti64, err := ParseInt(s, 10, 0)\n\tif nerr, ok := err.(*NumError); ok {\n\t\tnerr.Func = fnAtoi\n\t}\n\treturn int(i64), err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strconv/atob.go",
          "code_snippet": "func FormatBool(b bool) string {\n\tif b {\n\t\treturn \"true\"\n\t}\n\treturn \"false\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func WriteString(w Writer, s string) (n int, err error) {\n\tif sw, ok := w.(StringWriter); ok {\n\t\treturn sw.WriteString(s)\n\t}\n\treturn w.Write([]byte(s))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ReplaceAll(s, old, new string) string {\n\treturn Replace(s, old, new, -1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        134,
        135,
        136,
        140
      ],
      "cover_details": {
        "line_cover_rate": 0.8787878787878788
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:ruleset",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Label"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_EnumName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Table"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Package"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_Constant"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_WithRuntimeMixin"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_TagTypes"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_DefaultName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_incremental"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestBuilderField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestValidSchemaName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_AddIndex"
        }
      ],
      "name": "ruleset",
      "signature": "ruleset () *inflect.Ruleset",
      "ground_truth": "func ruleset() *inflect.Ruleset {\n\trules := inflect.NewDefaultRuleset()\n\t// Add common initialism from golint and more.\n\tfor _, w := range []string{\n\t\t\"ACL\", \"API\", \"ASCII\", \"AWS\", \"CPU\", \"CSS\", \"DNS\", \"EOF\", \"GB\", \"GUID\",\n\t\t\"HCL\", \"HTML\", \"HTTP\", \"HTTPS\", \"ID\", \"IP\", \"JSON\", \"KB\", \"LHS\", \"MAC\",\n\t\t\"MB\", \"QPS\", \"RAM\", \"RHS\", \"RPC\", \"SLA\", \"SMTP\", \"SQL\", \"SSH\", \"SSO\",\n\t\t\"TCP\", \"TLS\", \"TTL\", \"UDP\", \"UI\", \"UID\", \"URI\", \"URL\", \"UTF8\", \"UUID\",\n\t\t\"VM\", \"XML\", \"XMPP\", \"XSRF\", \"XSS\",\n\t} {\n\t\tacronyms[w] = struct{}{}\n\t\trules.AddAcronym(w)\n\t}\n\treturn rules\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 315,
      "end_line": 329,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "acronyms = make(map[string]struct{})",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "Ruleset struct {\n\tuncountables   map[string]bool\n\tplurals        []*Rule\n\tsingulars      []*Rule\n\thumans         []*Rule\n\tacronyms       []*Rule\n\tacronymMatcher *regexp.Regexp\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func NewDefaultRuleset() *Ruleset {\n\trs := NewRuleset()\n\trs.AddPlural(\"s\", \"s\")\n\trs.AddPlural(\"testis\", \"testes\")\n\trs.AddPlural(\"axis\", \"axes\")\n\trs.AddPlural(\"octopus\", \"octopi\")\n\trs.AddPlural(\"virus\", \"viri\")\n\trs.AddPlural(\"octopi\", \"octopi\")\n\trs.AddPlural(\"viri\", \"viri\")\n\trs.AddPlural(\"alias\", \"aliases\")\n\trs.AddPlural(\"status\", \"statuses\")\n\trs.AddPlural(\"bus\", \"buses\")\n\trs.AddPlural(\"buffalo\", \"buffaloes\")\n\trs.AddPlural(\"tomato\", \"tomatoes\")\n\trs.AddPlural(\"tum\", \"ta\")\n\trs.AddPlural(\"ium\", \"ia\")\n\trs.AddPlural(\"ta\", \"ta\")\n\trs.AddPlural(\"ia\", \"ia\")\n\trs.AddPlural(\"sis\", \"ses\")\n\trs.AddPlural(\"lf\", \"lves\")\n\trs.AddPlural(\"rf\", \"rves\")\n\trs.AddPlural(\"afe\", \"aves\")\n\trs.AddPlural(\"bfe\", \"bves\")\n\trs.AddPlural(\"cfe\", \"cves\")\n\trs.AddPlural(\"dfe\", \"dves\")\n\trs.AddPlural(\"efe\", \"eves\")\n\trs.AddPlural(\"gfe\", \"gves\")\n\trs.AddPlural(\"hfe\", \"hves\")\n\trs.AddPlural(\"ife\", \"ives\")\n\trs.AddPlural(\"jfe\", \"jves\")\n\trs.AddPlural(\"kfe\", \"kves\")\n\trs.AddPlural(\"lfe\", \"lves\")\n\trs.AddPlural(\"mfe\", \"mves\")\n\trs.AddPlural(\"nfe\", \"nves\")\n\trs.AddPlural(\"ofe\", \"oves\")\n\trs.AddPlural(\"pfe\", \"pves\")\n\trs.AddPlural(\"qfe\", \"qves\")\n\trs.AddPlural(\"rfe\", \"rves\")\n\trs.AddPlural(\"sfe\", \"sves\")\n\trs.AddPlural(\"tfe\", \"tves\")\n\trs.AddPlural(\"ufe\", \"uves\")\n\trs.AddPlural(\"vfe\", \"vves\")\n\trs.AddPlural(\"wfe\", \"wves\")\n\trs.AddPlural(\"xfe\", \"xves\")\n\trs.AddPlural(\"yfe\", \"yves\")\n\trs.AddPlural(\"zfe\", \"zves\")\n\trs.AddPlural(\"hive\", \"hives\")\n\trs.AddPlural(\"quy\", \"quies\")\n\trs.AddPlural(\"by\", \"bies\")\n\trs.AddPlural(\"cy\", \"cies\")\n\trs.AddPlural(\"dy\", \"dies\")\n\trs.AddPlural(\"fy\", \"fies\")\n\trs.AddPlural(\"gy\", \"gies\")\n\trs.AddPlural(\"hy\", \"hies\")\n\trs.AddPlural(\"jy\", \"jies\")\n\trs.AddPlural(\"ky\", \"kies\")\n\trs.AddPlural(\"ly\", \"lies\")\n\trs.AddPlural(\"my\", \"mies\")\n\trs.AddPlural(\"ny\", \"nies\")\n\trs.AddPlural(\"py\", \"pies\")\n\trs.AddPlural(\"qy\", \"qies\")\n\trs.AddPlural(\"ry\", \"ries\")\n\trs.AddPlural(\"sy\", \"sies\")\n\trs.AddPlural(\"ty\", \"ties\")\n\trs.AddPlural(\"vy\", \"vies\")\n\trs.AddPlural(\"wy\", \"wies\")\n\trs.AddPlural(\"xy\", \"xies\")\n\trs.AddPlural(\"zy\", \"zies\")\n\trs.AddPlural(\"x\", \"xes\")\n\trs.AddPlural(\"ch\", \"ches\")\n\trs.AddPlural(\"ss\", \"sses\")\n\trs.AddPlural(\"sh\", \"shes\")\n\trs.AddPlural(\"matrix\", \"matrices\")\n\trs.AddPlural(\"vertix\", \"vertices\")\n\trs.AddPlural(\"indix\", \"indices\")\n\trs.AddPlural(\"matrex\", \"matrices\")\n\trs.AddPlural(\"vertex\", \"vertices\")\n\trs.AddPlural(\"index\", \"indices\")\n\trs.AddPlural(\"mouse\", \"mice\")\n\trs.AddPlural(\"louse\", \"lice\")\n\trs.AddPlural(\"mice\", \"mice\")\n\trs.AddPlural(\"lice\", \"lice\")\n\trs.AddPluralExact(\"ox\", \"oxen\", true)\n\trs.AddPluralExact(\"oxen\", \"oxen\", true)\n\trs.AddPluralExact(\"quiz\", \"quizzes\", true)\n\trs.AddSingular(\"s\", \"\")\n\trs.AddSingular(\"news\", \"news\")\n\trs.AddSingular(\"ta\", \"tum\")\n\trs.AddSingular(\"ia\", \"ium\")\n\trs.AddSingular(\"analyses\", \"analysis\")\n\trs.AddSingular(\"bases\", \"basis\")\n\trs.AddSingular(\"diagnoses\", \"diagnosis\")\n\trs.AddSingular(\"parentheses\", \"parenthesis\")\n\trs.AddSingular(\"prognoses\", \"prognosis\")\n\trs.AddSingular(\"synopses\", \"synopsis\")\n\trs.AddSingular(\"theses\", \"thesis\")\n\trs.AddSingular(\"analyses\", \"analysis\")\n\trs.AddSingular(\"aves\", \"afe\")\n\trs.AddSingular(\"bves\", \"bfe\")\n\trs.AddSingular(\"cves\", \"cfe\")\n\trs.AddSingular(\"dves\", \"dfe\")\n\trs.AddSingular(\"eves\", \"efe\")\n\trs.AddSingular(\"gves\", \"gfe\")\n\trs.AddSingular(\"hves\", \"hfe\")\n\trs.AddSingular(\"ives\", \"ife\")\n\trs.AddSingular(\"jves\", \"jfe\")\n\trs.AddSingular(\"kves\", \"kfe\")\n\trs.AddSingular(\"lves\", \"lfe\")\n\trs.AddSingular(\"mves\", \"mfe\")\n\trs.AddSingular(\"nves\", \"nfe\")\n\trs.AddSingular(\"oves\", \"ofe\")\n\trs.AddSingular(\"pves\", \"pfe\")\n\trs.AddSingular(\"qves\", \"qfe\")\n\trs.AddSingular(\"rves\", \"rfe\")\n\trs.AddSingular(\"sves\", \"sfe\")\n\trs.AddSingular(\"tves\", \"tfe\")\n\trs.AddSingular(\"uves\", \"ufe\")\n\trs.AddSingular(\"vves\", \"vfe\")\n\trs.AddSingular(\"wves\", \"wfe\")\n\trs.AddSingular(\"xves\", \"xfe\")\n\trs.AddSingular(\"yves\", \"yfe\")\n\trs.AddSingular(\"zves\", \"zfe\")\n\trs.AddSingular(\"hives\", \"hive\")\n\trs.AddSingular(\"tives\", \"tive\")\n\trs.AddSingular(\"lves\", \"lf\")\n\trs.AddSingular(\"rves\", \"rf\")\n\trs.AddSingular(\"quies\", \"quy\")\n\trs.AddSingular(\"bies\", \"by\")\n\trs.AddSingular(\"cies\", \"cy\")\n\trs.AddSingular(\"dies\", \"dy\")\n\trs.AddSingular(\"fies\", \"fy\")\n\trs.AddSingular(\"gies\", \"gy\")\n\trs.AddSingular(\"hies\", \"hy\")\n\trs.AddSingular(\"jies\", \"jy\")\n\trs.AddSingular(\"kies\", \"ky\")\n\trs.AddSingular(\"lies\", \"ly\")\n\trs.AddSingular(\"mies\", \"my\")\n\trs.AddSingular(\"nies\", \"ny\")\n\trs.AddSingular(\"pies\", \"py\")\n\trs.AddSingular(\"qies\", \"qy\")\n\trs.AddSingular(\"ries\", \"ry\")\n\trs.AddSingular(\"sies\", \"sy\")\n\trs.AddSingular(\"ties\", \"ty\")\n\trs.AddSingular(\"vies\", \"vy\")\n\trs.AddSingular(\"wies\", \"wy\")\n\trs.AddSingular(\"xies\", \"xy\")\n\trs.AddSingular(\"zies\", \"zy\")\n\trs.AddSingular(\"series\", \"series\")\n\trs.AddSingular(\"movies\", \"movie\")\n\trs.AddSingular(\"xes\", \"x\")\n\trs.AddSingular(\"ches\", \"ch\")\n\trs.AddSingular(\"sses\", \"ss\")\n\trs.AddSingular(\"shes\", \"sh\")\n\trs.AddSingular(\"mice\", \"mouse\")\n\trs.AddSingular(\"lice\", \"louse\")\n\trs.AddSingular(\"buses\", \"bus\")\n\trs.AddSingular(\"oes\", \"o\")\n\trs.AddSingular(\"shoes\", \"shoe\")\n\trs.AddSingular(\"crises\", \"crisis\")\n\trs.AddSingular(\"axes\", \"axis\")\n\trs.AddSingular(\"testes\", \"testis\")\n\trs.AddSingular(\"octopi\", \"octopus\")\n\trs.AddSingular(\"viri\", \"virus\")\n\trs.AddSingular(\"statuses\", \"status\")\n\trs.AddSingular(\"aliases\", \"alias\")\n\trs.AddSingularExact(\"oxen\", \"ox\", true)\n\trs.AddSingular(\"vertices\", \"vertex\")\n\trs.AddSingular(\"indices\", \"index\")\n\trs.AddSingular(\"matrices\", \"matrix\")\n\trs.AddSingularExact(\"quizzes\", \"quiz\", true)\n\trs.AddSingular(\"databases\", \"database\")\n\trs.AddIrregular(\"person\", \"people\")\n\trs.AddIrregular(\"man\", \"men\")\n\trs.AddIrregular(\"child\", \"children\")\n\trs.AddIrregular(\"sex\", \"sexes\")\n\trs.AddIrregular(\"move\", \"moves\")\n\trs.AddIrregular(\"zombie\", \"zombies\")\n\trs.AddUncountable(\"equipment\")\n\trs.AddUncountable(\"information\")\n\trs.AddUncountable(\"rice\")\n\trs.AddUncountable(\"money\")\n\trs.AddUncountable(\"species\")\n\trs.AddUncountable(\"series\")\n\trs.AddUncountable(\"fish\")\n\trs.AddUncountable(\"sheep\")\n\trs.AddUncountable(\"jeans\")\n\trs.AddUncountable(\"police\")\n\treturn rs\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) AddAcronym(word string) {\n\tr := new(Rule)\n\tr.suffix = word\n\tr.replacement = rs.Titleize(strings.ToLower(word))\n\trs.acronyms = append(rs.acronyms, r)\n}",
          "ref_module": "inflect"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328
      ],
      "cover_details": {
        "line_cover_rate": 0.9333333333333333
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        }
      ],
      "name": "Encode",
      "signature": "(enc float64Encoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc float64Encoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tf := enc.UnsafeIndirect(ptr).(float64)\n\tswitch {\n\tcase math.IsNaN(f):\n\t\tstream.WriteString(\"NaN\")\n\tcase math.IsInf(f, 1):\n\t\tstream.WriteString(\"Infinity\")\n\tcase math.IsInf(f, -1):\n\t\tstream.WriteString(\"-Infinity\")\n\tdefault:\n\t\tstream.WriteFloat64(f)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 89,
      "end_line": 101,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Encoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_str.go",
          "code_snippet": "func (stream *Stream) WriteString(s string) {\n\tvalLen := len(s)\n\tstream.buf = append(stream.buf, '\"')\n\t// write string, the fast path, without utf8 and escape support\n\ti := 0\n\tfor ; i \u003c valLen; i++ {\n\t\tc := s[i]\n\t\tif c \u003e 31 \u0026\u0026 c != '\"' \u0026\u0026 c != '\\\\' {\n\t\t\tstream.buf = append(stream.buf, c)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tif i == valLen {\n\t\tstream.buf = append(stream.buf, '\"')\n\t\treturn\n\t}\n\twriteStringSlowPath(stream, i, s, valLen)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_float.go",
          "code_snippet": "func (stream *Stream) WriteFloat64(val float64) {\n\tif math.IsInf(val, 0) || math.IsNaN(val) {\n\t\tstream.Error = fmt.Errorf(\"unsupported value: %f\", val)\n\t\treturn\n\t}\n\tabs := math.Abs(val)\n\tfmt := byte('f')\n\t// Note: Must use float32 comparisons for underlying float32 value to get precise cutoffs right.\n\tif abs != 0 {\n\t\tif abs \u003c 1e-6 || abs \u003e= 1e21 {\n\t\t\tfmt = 'e'\n\t\t}\n\t}\n\tstream.buf = strconv.AppendFloat(stream.buf, float64(val), fmt, -1, 64)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func IsNaN(f float64) (is bool) {\n\t// IEEE 754 says that only NaNs satisfy f != f.\n\t// To avoid the floating-point hardware, could use:\n\t//\tx := Float64bits(f);\n\t//\treturn uint32(x\u003e\u003eshift)\u0026mask == mask \u0026\u0026 x != uvinf \u0026\u0026 x != uvneginf\n\treturn f != f\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func IsInf(f float64, sign int) bool {\n\t// Test for infinity by comparing against maximum float.\n\t// To avoid the floating-point hardware, could use:\n\t//\tx := Float64bits(f);\n\t//\treturn sign \u003e= 0 \u0026\u0026 x == uvinf || sign \u003c= 0 \u0026\u0026 x == uvneginf;\n\treturn sign \u003e= 0 \u0026\u0026 f \u003e MaxFloat64 || sign \u003c= 0 \u0026\u0026 f \u003c -MaxFloat64\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t *traceTransport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t *traceTransport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tctx, span := trace.StartSpan(ctx,\n\t\tt.formatSpanName(ctx, req),\n\t\ttrace.WithSampler(t.startOptions.Sampler),\n\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t)\n\tdefer span.End()\n\n\tspan.AddAttributes(requestAttrs(req, t.withQuery)...)\n\trsp, err := t.base.RoundTrip(ctx, req)\n\tif err != nil {\n\t\tspan.SetStatus(trace.Status{Code: trace.StatusCodeUnknown, Message: err.Error()})\n\t\treturn rsp, err\n\t}\n\n\tspan.AddAttributes(responseAttrs(rsp)...)\n\tspan.SetStatus(TraceStatus(rsp.Status.Code))\n\treturn rsp, err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 33,
      "end_line": 51,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "traceTransport struct {\n\tbase           gremlin.RoundTripper\n\tstartOptions   trace.StartOptions\n\tformatSpanName func(context.Context, *gremlin.Request) string\n\twithQuery      bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func requestAttrs(req *gremlin.Request, withQuery bool) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.StringAttribute(RequestIDAttribute, req.RequestID),\n\t\ttrace.StringAttribute(OperationAttribute, req.Operation),\n\t}\n\tif withQuery {\n\t\tquery, _ := req.Arguments[gremlin.ArgsGremlin].(string)\n\t\tattrs = append(attrs, trace.StringAttribute(QueryAttribute, query))\n\t\tif bindings, ok := req.Arguments[gremlin.ArgsBindings].(map[string]any); ok {\n\t\t\tattrs = append(attrs, bindingsAttrs(bindings)...)\n\t\t}\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func responseAttrs(rsp *gremlin.Response) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.Int64Attribute(CodeAttribute, int64(rsp.Status.Code)),\n\t}\n\tif rsp.Status.Message != \"\" {\n\t\tattrs = append(attrs, trace.StringAttribute(MessageAttribute, rsp.Status.Message))\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func TraceStatus(status int) trace.Status {\n\tvar code int32\n\tswitch status {\n\tcase gremlin.StatusSuccess,\n\t\tgremlin.StatusNoContent,\n\t\tgremlin.StatusPartialContent:\n\t\tcode = trace.StatusCodeOK\n\tcase gremlin.StatusUnauthorized:\n\t\tcode = trace.StatusCodePermissionDenied\n\tcase gremlin.StatusAuthenticate:\n\t\tcode = trace.StatusCodeUnauthenticated\n\tcase gremlin.StatusMalformedRequest,\n\t\tgremlin.StatusInvalidRequestArguments,\n\t\tgremlin.StatusScriptEvaluationError:\n\t\tcode = trace.StatusCodeInvalidArgument\n\tcase gremlin.StatusServerError,\n\t\tgremlin.StatusServerSerializationError:\n\t\tcode = trace.StatusCodeInternal\n\tcase gremlin.StatusServerTimeout:\n\t\tcode = trace.StatusCodeDeadlineExceeded\n\tdefault:\n\t\tcode = trace.StatusCodeUnknown\n\t}\n\treturn trace.Status{Code: code, Message: gremlin.StatusText(status)}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func StartSpan(ctx context.Context, name string, o ...StartOption) (context.Context, *Span) {\n\treturn DefaultTracer.StartSpan(ctx, name, o...)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "func WithSampler(sampler Sampler) StartOption {\n\treturn func(o *StartOptions) {\n\t\to.Sampler = sampler\n\t}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "StartOptions struct {\n\t// Sampler to consult for this Span. If provided, it is always consulted.\n\t//\n\t// If not provided, then the behavior differs based on whether\n\t// the parent of this Span is remote, local, or there is no parent.\n\t// In the case of a remote parent or no parent, the\n\t// default sampler (see Config) will be consulted. Otherwise,\n\t// when there is a non-remote parent, no new sampling decision will be made:\n\t// we will preserve the sampling of the parent.\n\tSampler Sampler\n\n\t// SpanKind represents the kind of a span. If none is set,\n\t// SpanKindUnspecified is used.\n\tSpanKind int\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "func WithSpanKind(spanKind int) StartOption {\n\treturn func(o *StartOptions) {\n\t\to.SpanKind = spanKind\n\t}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "SpanKindClient",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) End() {\n\tif s == nil {\n\t\treturn\n\t}\n\ts.internal.End()\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) AddAttributes(attributes ...Attribute) {\n\tif !s.IsRecordingEvents() {\n\t\treturn\n\t}\n\ts.internal.AddAttributes(attributes...)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) SetStatus(status Status) {\n\tif !s.IsRecordingEvents() {\n\t\treturn\n\t}\n\ts.internal.SetStatus(status)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Status struct {\n\t// Code is a status code.  Zero indicates success.\n\t//\n\t// If Code will be propagated to Google APIs, it ideally should be a value from\n\t// https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto .\n\tCode    int32\n\tMessage string\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeUnknown            = 2",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50
      ],
      "cover_details": {
        "line_cover_rate": 0.8947368421052632
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/expand.go:ExpandBindings",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestConfigBuild"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindings"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindingsNoQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestNewClient"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        }
      ],
      "name": "ExpandBindings",
      "signature": "ExpandBindings (rt RoundTripper) RoundTripper",
      "ground_truth": "func ExpandBindings(rt RoundTripper) RoundTripper {\n\treturn RoundTripperFunc(func(ctx context.Context, r *Request) (*Response, error) {\n\t\tbindings, ok := r.Arguments[ArgsBindings]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\tquery, ok := r.Arguments[ArgsGremlin]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\t{\n\t\t\tquery, bindings := query.(string), bindings.(map[string]any)\n\t\t\tkeys := make(sort.StringSlice, 0, len(bindings))\n\t\t\tfor k := range bindings {\n\t\t\t\tkeys = append(keys, k)\n\t\t\t}\n\t\t\tsort.Sort(sort.Reverse(keys))\n\t\t\tkv := make([]string, 0, len(bindings)*2)\n\t\t\tfor _, k := range keys {\n\t\t\t\ts, err := jsoniter.MarshalToString(bindings[k])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"marshal bindings value for key %s: %w\", k, err)\n\t\t\t\t}\n\t\t\t\tkv = append(kv, k, s)\n\t\t\t}\n\t\t\tdelete(r.Arguments, ArgsBindings)\n\t\t\tr.Arguments[ArgsGremlin] = strings.NewReplacer(kv...).Replace(query)\n\t\t}\n\t\treturn rt.RoundTrip(ctx, r)\n\t})\n}",
      "function_comment": "// ExpandBindings expands the given RoundTripper and expands the request bindings into the Gremlin traversal.",
      "function_statement": "// ExpandBindings expands the given RoundTripper and expands the request bindings into the Gremlin traversal.",
      "start_line": 17,
      "end_line": 47,
      "file_path": "./dialect/gremlin/expand.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripperFunc func(context.Context, *Request) (*Response, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsBindings = \"bindings\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func MarshalToString(v interface{}) (string, error) {\n\treturn ConfigDefault.MarshalToString(v)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "StringSlice []string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "func Sort(data Interface) {\n\tn := data.Len()\n\tif n \u003c= 1 {\n\t\treturn\n\t}\n\tlimit := bits.Len(uint(n))\n\tpdqsort(data, 0, n, limit)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "func Reverse(data Interface) Interface {\n\treturn \u0026reverse{data}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func delete(m map[Type]Type1, key Type)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func (r *Replacer) Replace(s string) string {\n\tr.once.Do(r.buildOnce)\n\treturn r.r.Replace(s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func NewReplacer(oldnew ...string) *Replacer {\n\tif len(oldnew)%2 == 1 {\n\t\tpanic(\"strings.NewReplacer: odd argument count\")\n\t}\n\treturn \u0026Replacer{oldnew: append([]string(nil), oldnew...)}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        45
      ],
      "cover_details": {
        "line_cover_rate": 0.8709677419354839
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:DecoderOfSlice",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecoderOfSlice",
      "signature": "(ext decodeExtension) DecoderOfSlice (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfSlice(typ reflect2.Type) jsoniter.ValDecoder {\n\tsliceType := typ.(reflect2.SliceType)\n\telemType := sliceType.Elem()\n\tif elemType.Kind() == reflect.Uint8 {\n\t\treturn nil\n\t}\n\treturn sliceDecoder{\n\t\tsliceType: sliceType,\n\t\telemDec:   ext.LazyDecoderOf(elemType),\n\t}\n}",
      "function_comment": "// DecoderOfSlice returns a value decoder of a slice type.",
      "function_statement": "// DecoderOfSlice returns a value decoder of a slice type.",
      "start_line": 35,
      "end_line": 45,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "sliceDecoder struct {\n\tsliceType reflect2.SliceType\n\telemDec   jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "SliceType interface {\n\tListType\n\tMakeSlice(length int, cap int) interface{}\n\tUnsafeMakeSlice(length int, cap int) unsafe.Pointer\n\tGrow(obj interface{}, newLength int)\n\tUnsafeGrow(ptr unsafe.Pointer, newLength int)\n\tAppend(obj interface{}, elem interface{})\n\tUnsafeAppend(obj unsafe.Pointer, elem unsafe.Pointer)\n\tLengthOf(obj interface{}) int\n\tUnsafeLengthOf(ptr unsafe.Pointer) int\n\tSetNil(obj interface{})\n\tUnsafeSetNil(ptr unsafe.Pointer)\n\tCap(obj interface{}) int\n\tUnsafeCap(ptr unsafe.Pointer) int\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ListType interface {\n\tType\n\tElem() Type\n\tSetIndex(obj interface{}, index int, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, index int, elem unsafe.Pointer)\n\tGetIndex(obj interface{}, index int) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, index int) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44
      ],
      "cover_details": {
        "line_cover_rate": 0.9090909090909091
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectBytes",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "reflectBytes",
      "signature": "(dec efaceDecoder) reflectBytes (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (dec efaceDecoder) reflectBytes(data []byte) (reflect2.Type, error) {\n\ttyp := Type(jsoniter.Get(data, TypeKey).ToString())\n\trtype := dec.reflectType(typ)\n\tif rtype != nil {\n\t\treturn rtype, nil\n\t}\n\n\tswitch typ {\n\tcase listType:\n\t\treturn dec.reflectSlice(data)\n\tcase mapType:\n\t\treturn dec.reflectMap(data)\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 84,
      "end_line": 99,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectType(typ Type) reflect2.Type {\n\tswitch typ {\n\tcase doubleType:\n\t\treturn reflect2.TypeOf(float64(0))\n\tcase floatType:\n\t\treturn reflect2.TypeOf(float32(0))\n\tcase byteType:\n\t\treturn reflect2.TypeOf(uint8(0))\n\tcase int16Type:\n\t\treturn reflect2.TypeOf(int16(0))\n\tcase int32Type:\n\t\treturn reflect2.TypeOf(int32(0))\n\tcase int64Type, bigIntegerType:\n\t\treturn reflect2.TypeOf(int64(0))\n\tcase byteBufferType:\n\t\treturn reflect2.TypeOf([]byte{})\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectSlice(data []byte) (reflect2.Type, error) {\n\tvar elem any\n\tif err := Unmarshal(data, \u0026[...]*any{\u0026elem}); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot read first list element: %w\", err)\n\t}\n\n\tif elem == nil {\n\t\treturn reflect2.TypeOf([]any{}), nil\n\t}\n\n\tsliceType := reflect.SliceOf(reflect.TypeOf(elem))\n\treturn reflect2.Type2(sliceType), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectMap(data []byte) (reflect2.Type, error) {\n\tvar key, elem any\n\tif err := Unmarshal(\n\t\tbytes.Replace(data, []byte(mapType), []byte(listType), 1),\n\t\t\u0026[...]*any{\u0026key, \u0026elem},\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot unmarshal first map item: %w\", err)\n\t}\n\n\tif key == nil {\n\t\treturn reflect2.TypeOf(map[any]any{}), nil\n\t} else if elem == nil {\n\t\treturn nil, errors.New(\"expect map element, but found only key\")\n\t}\n\n\tmapType := reflect.MapOf(reflect.TypeOf(key), reflect.TypeOf(elem))\n\treturn reflect2.Type2(mapType), nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/any.go",
          "code_snippet": "Any interface {\n\tLastError() error\n\tValueType() ValueType\n\tMustBeValid() Any\n\tToBool() bool\n\tToInt() int\n\tToInt32() int32\n\tToInt64() int64\n\tToUint() uint\n\tToUint32() uint32\n\tToUint64() uint64\n\tToFloat32() float32\n\tToFloat64() float64\n\tToString() string\n\tToVal(val interface{})\n\tGet(path ...interface{}) Any\n\tSize() int\n\tKeys() []string\n\tGetInterface() interface{}\n\tWriteTo(stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Get(data []byte, path ...interface{}) Any {\n\treturn ConfigDefault.Get(data, path...)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        92,
        93,
        94,
        95,
        96,
        97
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:DecoratorOfMarshaler",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "DecoratorOfMarshaler",
      "signature": "(ext encodeExtension) DecoratorOfMarshaler (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecoratorOfMarshaler(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ == marshalerType {\n\t\tenc := marshalerEncoder{enc, typ}\n\t\treturn directMarshalerEncoder{enc}\n\t}\n\tif typ.Implements(marshalerType) {\n\t\treturn marshalerEncoder{enc, typ}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(marshalerType) {\n\t\tptrEnc := ext.LazyEncoderOf(ptrType)\n\t\tenc := marshalerEncoder{ptrEnc, ptrType}\n\t\treturn referenceEncoder{enc}\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoratorOfMarshaler decorates a value encoder of a Marshaler interface.",
      "function_statement": "// DecoratorOfMarshaler decorates a value encoder of a Marshaler interface.",
      "start_line": 17,
      "end_line": 32,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerType   = reflect2.TypeOfPtr((*Marshaler)(nil)).Elem()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "directMarshalerEncoder struct {\n\tmarshalerEncoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (encodeExtension) LazyEncoderOf(typ reflect2.Type) jsoniter.ValEncoder {\n\treturn \u0026lazyEncoder{resolve: func() jsoniter.ValEncoder {\n\t\treturn config.EncoderOf(typ)\n\t}}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "referenceEncoder struct {\n\tjsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31
      ],
      "cover_details": {
        "line_cover_rate": 0.9375
      }
    }
  ]
}