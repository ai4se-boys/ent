{
  "total_count": 299,
  "exclude_count": 0,
  "success_count": 249,
  "failed_count": 47,
  "skip_count": 3,
  "test_cases": null,
  "repo_module": "entgo.io/ent",
  "base_commit": "f67bb2dfae3246ad937f20c63bce137517438619",
  "git_repo": "git@github.com:ai4se-boys/ent.git",
  "dataset": [
    {
      "id": "entgo.io/ent/dialect/sql/builder.go:C",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestSelector_UnqualifiedColumns"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestFormattedColumnFromSubQuery"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestSelector_JoinedTable"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestSelector_Columns"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestSelector_JoinedTableView"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestUpdateBuilder_SetExpr"
        }
      ],
      "name": "C",
      "signature": "(s *SelectTable) C (column string) string",
      "ground_truth": "func (s *SelectTable) C(column string) string {\n\tname := s.name\n\tif s.as != \"\" {\n\t\tname = s.as\n\t}\n\tb := \u0026Builder{dialect: s.dialect}\n\tif s.as == \"\" {\n\t\tb.writeSchema(s.schema)\n\t}\n\tb.Ident(name).WriteByte('.').Ident(column)\n\treturn b.String()\n}",
      "function_comment": "// C returns a formatted string for the table column.",
      "function_statement": "// C returns a formatted string for the table column.",
      "start_line": 1609,
      "end_line": 1620,
      "file_path": "./dialect/sql/builder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "SelectTable struct {\n\tBuilder\n\tas     string\n\tname   string\n\tschema string\n\tquote  bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) writeSchema(schema string) {\n\tif schema != \"\" \u0026\u0026 b.dialect != dialect.SQLite {\n\t\tb.Ident(schema).WriteByte('.')\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteByte(c byte) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteByte(c)\n\treturn b\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\tif b.sb == nil {\n\t\treturn \"\"\n\t}\n\treturn b.sb.String()\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1609,
        1610,
        1611,
        1612,
        1613,
        1614,
        1615,
        1616,
        1617,
        1618,
        1619
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:methods",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBool"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString_ValueScanner"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes_ValueScanner"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestInt_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestFloat_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestSlices"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestFloat"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestTime"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Enums"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_UUID"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Other"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestRType_Implements"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestInt"
        }
      ],
      "name": "methods",
      "signature": "methods (t reflect.Type, rtype *RType)",
      "ground_truth": "func methods(t reflect.Type, rtype *RType) {\n\t// For type T, add methods with\n\t// pointer receiver as well (*T).\n\tif t.Kind() != reflect.Ptr {\n\t\tt = reflect.PtrTo(t)\n\t}\n\tn := t.NumMethod()\n\tfor i := 0; i \u003c n; i++ {\n\t\tm := t.Method(i)\n\t\tin := make([]*RType, m.Type.NumIn()-1)\n\t\tfor j := range in {\n\t\t\targ := m.Type.In(j + 1)\n\t\t\tin[j] = \u0026RType{Name: arg.Name(), Ident: arg.String(), Kind: arg.Kind(), PkgPath: arg.PkgPath()}\n\t\t}\n\t\tout := make([]*RType, m.Type.NumOut())\n\t\tfor j := range out {\n\t\t\tret := m.Type.Out(j)\n\t\t\tout[j] = \u0026RType{Name: ret.Name(), Ident: ret.String(), Kind: ret.Kind(), PkgPath: ret.PkgPath()}\n\t\t}\n\t\trtype.Methods[m.Name] = struct{ In, Out []*RType }{in, out}\n\t}\n}",
      "function_comment": "// pkgName returns the package name from a Go",
      "function_statement": "// pkgName returns the package name from a Go",
      "start_line": 1515,
      "end_line": 1536,
      "file_path": "./schema/field/field.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "RType struct {\n\tName    string // reflect.Type.Name\n\tIdent   string // reflect.Type.String\n\tKind    reflect.Kind\n\tPkgPath string\n\tMethods map[string]struct{ In, Out []*RType }\n\t// Used only for in-package checks.\n\trtype reflect.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func PtrTo(t Type) Type { return PointerTo(t) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Method struct {\n\t// Name is the method name.\n\tName string\n\n\t// PkgPath is the package path that qualifies a lower case (unexported)\n\t// method name. It is empty for upper case (exported) method names.\n\t// The combination of PkgPath and Name uniquely identifies a method\n\t// in a method set.\n\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers\n\tPkgPath string\n\n\tType  Type  // method type\n\tFunc  Value // func with receiver as first argument\n\tIndex int   // index for Type.Method\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1515,
        1516,
        1517,
        1518,
        1519,
        1520,
        1521,
        1522,
        1523,
        1524,
        1525,
        1526,
        1527,
        1528,
        1529,
        1530,
        1531,
        1532,
        1533,
        1534
      ],
      "cover_details": {
        "line_cover_rate": 0.9090909090909091
      }
    },
    {
      "id": "entgo.io/ent/entc/load/schema.go:NewIndex",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalSchema"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalMixin"
        }
      ],
      "name": "NewIndex",
      "signature": "NewIndex (idx *index.Descriptor) *Index",
      "ground_truth": "func NewIndex(idx *index.Descriptor) *Index {\n\tni := \u0026Index{\n\t\tEdges:       idx.Edges,\n\t\tFields:      idx.Fields,\n\t\tUnique:      idx.Unique,\n\t\tStorageKey:  idx.StorageKey,\n\t\tAnnotations: make(map[string]any),\n\t}\n\tfor _, at := range idx.Annotations {\n\t\tni.addAnnotation(at)\n\t}\n\treturn ni\n}",
      "function_comment": "// NewIndex creates an loaded index from index descriptor.",
      "function_statement": "// NewIndex creates an loaded index from index descriptor.",
      "start_line": 169,
      "end_line": 181,
      "file_path": "./entc/load/schema.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/index/index.go",
          "code_snippet": "Descriptor struct {\n\tUnique      bool                // unique index.\n\tEdges       []string            // edge columns.\n\tFields      []string            // field columns.\n\tStorageKey  string              // custom index name.\n\tAnnotations []schema.Annotation // index annotations.\n}",
          "ref_module": "index"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Index struct {\n\tUnique      bool           `json:\"unique,omitempty\"`\n\tEdges       []string       `json:\"edges,omitempty\"`\n\tFields      []string       `json:\"fields,omitempty\"`\n\tStorageKey  string         `json:\"storage_key,omitempty\"`\n\tAnnotations map[string]any `json:\"annotations,omitempty\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "func (i *Index) addAnnotation(an schema.Annotation) {\n\taddAnnotation(i.Annotations, an)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/struct.go:DecoratorOfStructField",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecoratorOfStructField",
      "signature": "(encodeExtension) DecoratorOfStructField (enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) DecoratorOfStructField(enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder {\n\ttyp, _ := parseTag(tag)\n\tif typ == \"\" {\n\t\treturn nil\n\t}\n\n\tencoder, ok := enc.(typeEncoder)\n\tif !ok {\n\t\tencoder = typeEncoder{ValEncoder: enc}\n\t}\n\tencoder.Type = Type(typ)\n\n\treturn encoder\n}",
      "function_comment": "// DecoratorOfStructField decorates a struct field value encoder.",
      "function_statement": "// DecoratorOfStructField decorates a struct field value encoder.",
      "start_line": 10,
      "end_line": 23,
      "file_path": "./dialect/gremlin/encoding/graphson/struct.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/tags.go",
          "code_snippet": "func parseTag(tag string) (string, tagOptions) {\n\tif idx := strings.Index(tag, \",\"); idx != -1 {\n\t\treturn tag[:idx], tagOptions(tag[idx+1:])\n\t}\n\treturn tag, \"\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        10,
        11,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        }
      ],
      "name": "Encode",
      "signature": "(enc *mapEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc *mapEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\titer := enc.mapType.UnsafeIterate(ptr)\n\tif !iter.HasNext() {\n\t\tstream.WriteEmptyArray()\n\t\treturn\n\t}\n\n\tstream.WriteArrayStart()\n\tfor {\n\t\tkey, elem := iter.UnsafeNext()\n\t\tenc.keyEnc.Encode(key, stream)\n\t\tstream.WriteMore()\n\t\tenc.elemEnc.Encode(elem, stream)\n\t\tif !iter.HasNext() {\n\t\t\tbreak\n\t\t}\n\t\tstream.WriteMore()\n\t}\n\tstream.WriteArrayEnd()\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 35,
      "end_line": 54,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapEncoder struct {\n\tmapType reflect2.MapType\n\tkeyEnc  jsoniter.ValEncoder\n\telemEnc jsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapIterator interface {\n\tHasNext() bool\n\tNext() (key interface{}, elem interface{})\n\tUnsafeNext() (key unsafe.Pointer, elem unsafe.Pointer)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteEmptyArray() {\n\tstream.writeTwoBytes('[', ']')\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteArrayStart() {\n\tstream.indention += stream.cfg.indentionStep\n\tstream.writeByte('[')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteMore() {\n\tstream.writeByte(',')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteArrayEnd() {\n\tstream.writeIndention(stream.cfg.indentionStep)\n\tstream.indention -= stream.cfg.indentionStep\n\tstream.writeByte(']')\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        53
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:requestAttrs",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "requestAttrs",
      "signature": "requestAttrs (req *gremlin.Request, withQuery bool) []trace.Attribute",
      "ground_truth": "func requestAttrs(req *gremlin.Request, withQuery bool) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.StringAttribute(RequestIDAttribute, req.RequestID),\n\t\ttrace.StringAttribute(OperationAttribute, req.Operation),\n\t}\n\tif withQuery {\n\t\tquery, _ := req.Arguments[gremlin.ArgsGremlin].(string)\n\t\tattrs = append(attrs, trace.StringAttribute(QueryAttribute, query))\n\t\tif bindings, ok := req.Arguments[gremlin.ArgsBindings].(map[string]any); ok {\n\t\t\tattrs = append(attrs, bindingsAttrs(bindings)...)\n\t\t}\n\t}\n\treturn attrs\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 53,
      "end_line": 66,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "RequestIDAttribute = \"gremlin.request_id\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "OperationAttribute = \"gremlin.operation\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "QueryAttribute     = \"gremlin.query\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsBindings = \"bindings\"",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func bindingsAttrs(bindings map[string]any) []trace.Attribute {\n\tattrs := make([]trace.Attribute, 0, len(bindings))\n\tfor key, val := range bindings {\n\t\tkey = BindingAttribute + \".\" + key\n\t\tattrs = append(attrs, bindingToAttr(key, val))\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/entql.go:evalBinary",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/entql_test.go",
          "func_name": "TestGraph_EvalP"
        }
      ],
      "name": "evalBinary",
      "signature": "(e *state) evalBinary (expr *entql.BinaryExpr) *sql.Predicate",
      "ground_truth": "func (e *state) evalBinary(expr *entql.BinaryExpr) *sql.Predicate {\n\tswitch expr.Op {\n\tcase entql.OpOr:\n\t\treturn sql.Or(e.evalExpr(expr.X), e.evalExpr(expr.Y))\n\tcase entql.OpAnd:\n\t\treturn sql.And(e.evalExpr(expr.X), e.evalExpr(expr.Y))\n\tcase entql.OpEQ, entql.OpNEQ:\n\t\tif expr.Y == (*entql.Value)(nil) {\n\t\t\tf, ok := expr.X.(*entql.Field)\n\t\t\texpect(ok, \"*entql.Field, got %T\", expr.Y)\n\t\t\treturn nullFunc[expr.Op](e.field(f))\n\t\t}\n\t\tfallthrough\n\tdefault:\n\t\tfield, ok := expr.X.(*entql.Field)\n\t\texpect(ok, \"expr.X to be *entql.Field (got %T)\", expr.X)\n\t\t_, ok = expr.Y.(*entql.Field)\n\t\tif !ok {\n\t\t\t_, ok = expr.Y.(*entql.Value)\n\t\t}\n\t\texpect(ok, \"expr.Y to be *entql.Field or *entql.Value (got %T)\", expr.X)\n\t\tswitch x := expr.Y.(type) {\n\t\tcase *entql.Field:\n\t\t\treturn sql.ColumnsOp(e.field(field), e.field(x), binary[expr.Op])\n\t\tcase *entql.Value:\n\t\t\tc := e.field(field)\n\t\t\treturn sql.P(func(b *sql.Builder) {\n\t\t\t\tb.Ident(c).WriteOp(binary[expr.Op])\n\t\t\t\targs(b, x)\n\t\t\t})\n\t\tdefault:\n\t\t\tpanic(\"unreachable\")\n\t\t}\n\t}\n}",
      "function_comment": "// evalBinary evaluates binary expressions.",
      "function_statement": "// evalBinary evaluates binary expressions.",
      "start_line": 206,
      "end_line": 240,
      "file_path": "./dialect/sql/sqlgraph/entql.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "state struct {\n\tsql.Builder\n\tcontext  *Node\n\tselector *sql.Selector\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "BinaryExpr struct {\n\t\tOp   Op\n\t\tX, Y Expr\n\t}",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Predicate struct {\n\tBuilder\n\tdepth int\n\tfns   []func(*Builder)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "OpOr",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Or(preds ...*Predicate) *Predicate {\n\tp := P()\n\treturn p.Append(func(b *Builder) {\n\t\tp.mayWrap(preds, b, \"OR\")\n\t})\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "func (e *state) evalExpr(expr entql.Expr) *sql.Predicate {\n\tswitch expr := expr.(type) {\n\tcase *entql.BinaryExpr:\n\t\treturn e.evalBinary(expr)\n\tcase *entql.UnaryExpr:\n\t\treturn sql.Not(e.evalExpr(expr.X))\n\tcase *entql.NaryExpr:\n\t\tps := make([]*sql.Predicate, len(expr.Xs))\n\t\tfor i, x := range expr.Xs {\n\t\t\tps[i] = e.evalExpr(x)\n\t\t}\n\t\treturn nary[expr.Op](ps...)\n\tcase *entql.CallExpr:\n\t\tswitch expr.Func {\n\t\tcase entql.FuncHasPrefix, entql.FuncHasSuffix, entql.FuncContains, entql.FuncEqualFold, entql.FuncContainsFold:\n\t\t\texpect(len(expr.Args) == 2, \"invalid number of arguments for %s\", expr.Func)\n\t\t\tf, ok := expr.Args[0].(*entql.Field)\n\t\t\texpect(ok, \"*entql.Field, got %T\", expr.Args[0])\n\t\t\tv, ok := expr.Args[1].(*entql.Value)\n\t\t\texpect(ok, \"*entql.Value, got %T\", expr.Args[1])\n\t\t\ts, ok := v.V.(string)\n\t\t\texpect(ok, \"string value, got %T\", v.V)\n\t\t\treturn strFunc[expr.Func](e.field(f), s)\n\t\tcase entql.FuncHasEdge:\n\t\t\texpect(len(expr.Args) \u003e 0, \"invalid number of arguments for %s\", expr.Func)\n\t\t\tedge, ok := expr.Args[0].(*entql.Edge)\n\t\t\texpect(ok, \"*entql.Edge, got %T\", expr.Args[0])\n\t\t\treturn e.evalEdge(edge.Name, expr.Args[1:]...)\n\t\t}\n\t}\n\tpanic(\"invalid\")\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "OpAnd   Op = iota",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func And(preds ...*Predicate) *Predicate {\n\tp := P()\n\treturn p.Append(func(b *Builder) {\n\t\tp.mayWrap(preds, b, \"AND\")\n\t})\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "OpNEQ",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "OpEQ",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "Value struct {\n\t\tV any\n\t}",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "Field struct {\n\t\tName string\n\t}",
          "ref_module": "entql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "func expect(cond bool, msg string, args ...any) {\n\tif !cond {\n\t\tpanic(evalError{fmt.Sprintf(\"expect \"+msg, args...)})\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "nullFunc = [...]func(string) *sql.Predicate{\n\t\tentql.OpEQ:  sql.IsNull,\n\t\tentql.OpNEQ: sql.NotNull,\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "func (e *state) field(f *entql.Field) string {\n\t_, ok := e.context.Fields[f.Name]\n\texpect(ok || e.context.ID.Column == f.Name, \"field %q was not found for node %q\", f.Name, e.context.Type)\n\treturn e.selector.C(f.Name)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func ColumnsOp(col1, col2 string, op Op) *Predicate {\n\treturn P().ColumnsOp(col1, col2, op)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "binary = [...]sql.Op{\n\t\tentql.OpEQ:    sql.OpEQ,\n\t\tentql.OpNEQ:   sql.OpNEQ,\n\t\tentql.OpGT:    sql.OpGT,\n\t\tentql.OpGTE:   sql.OpGTE,\n\t\tentql.OpLT:    sql.OpLT,\n\t\tentql.OpLTE:   sql.OpLTE,\n\t\tentql.OpIn:    sql.OpIn,\n\t\tentql.OpNotIn: sql.OpNotIn,\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func P(fns ...func(*Builder)) *Predicate {\n\treturn \u0026Predicate{fns: fns}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "func args(b *sql.Builder, v *entql.Value) {\n\tvs, ok := v.V.([]any)\n\tif !ok {\n\t\tb.Arg(v.V)\n\t\treturn\n\t}\n\tb.WriteByte('(').Args(vs...).WriteByte(')')\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/util.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeSyntaxError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "Decode",
      "signature": "(dec typeDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec typeDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tif iter.WhatIsNext() != jsoniter.ObjectValue {\n\t\tdec.ValDecoder.Decode(ptr, iter)\n\t\treturn\n\t}\n\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tvar tv typeValue\n\tif err := jsoniter.Unmarshal(data, \u0026tv); err != nil {\n\t\titer.ReportError(\"unmarshal type value\", err.Error())\n\t\treturn\n\t}\n\n\tif err := dec.CheckType(tv.Type); err != nil {\n\t\titer.ReportError(\"check type\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(tv.Value)\n\tdefer config.ReturnIterator(it)\n\n\tdec.ValDecoder.Decode(ptr, it)\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode value\", it.Error.Error())\n\t}\n}",
      "function_comment": "// Decode belongs to jsoniter.ValDecoder interface.",
      "function_statement": "// Decode belongs to jsoniter.ValDecoder interface.",
      "start_line": 61,
      "end_line": 90,
      "file_path": "./dialect/gremlin/encoding/graphson/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeValue struct {\n\t\tType  Type\n\t\tValue jsoniter.RawMessage\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeChecker interface {\n\t\tCheckType(Type) error\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "ObjectValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Unmarshal(data []byte, v interface{}) error {\n\treturn ConfigDefault.Unmarshal(data, v)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/pool.go",
          "code_snippet": "IteratorPool interface {\n\tBorrowIterator(data []byte) *Iterator\n\tReturnIterator(iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        69,
        70,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:SetNeighbors",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestSetNeighbors"
        }
      ],
      "name": "SetNeighbors",
      "signature": "SetNeighbors (dialect string, s *Step) (q *sql.Selector)",
      "ground_truth": "func SetNeighbors(dialect string, s *Step) (q *sql.Selector) {\n\tset := s.From.V.(*sql.Selector)\n\tbuilder := sql.Dialect(dialect)\n\tswitch {\n\tcase s.ThroughEdgeTable():\n\t\tpk1, pk2 := s.Edge.Columns[1], s.Edge.Columns[0]\n\t\tif s.Edge.Inverse {\n\t\t\tpk1, pk2 = pk2, pk1\n\t\t}\n\t\tto := builder.Table(s.To.Table).Schema(s.To.Schema)\n\t\tset.Select(set.C(s.From.Column))\n\t\tjoin := builder.Table(s.Edge.Table).Schema(s.Edge.Schema)\n\t\tmatch := builder.Select(join.C(pk1)).\n\t\t\tFrom(join).\n\t\t\tJoin(set).\n\t\t\tOn(join.C(pk2), set.C(s.From.Column))\n\t\tq = builder.Select().\n\t\t\tFrom(to).\n\t\t\tJoin(match).\n\t\t\tOn(to.C(s.To.Column), match.C(pk1))\n\tcase s.FromEdgeOwner():\n\t\tt1 := builder.Table(s.To.Table).Schema(s.To.Schema)\n\t\tset.Select(set.C(s.Edge.Columns[0]))\n\t\tq = builder.Select().\n\t\t\tFrom(t1).\n\t\t\tJoin(set).\n\t\t\tOn(t1.C(s.To.Column), set.C(s.Edge.Columns[0]))\n\tcase s.ToEdgeOwner():\n\t\tt1 := builder.Table(s.To.Table).Schema(s.To.Schema)\n\t\tset.Select(set.C(s.From.Column))\n\t\tq = builder.Select().\n\t\t\tFrom(t1).\n\t\t\tJoin(set).\n\t\t\tOn(t1.C(s.Edge.Columns[0]), set.C(s.From.Column))\n\t}\n\treturn q\n}",
      "function_comment": "// SetNeighbors returns a Selector for evaluating the path-step\n// and getting the neighbors of set of vertices.",
      "function_statement": "// SetNeighbors returns a Selector for evaluating the path-step\n// and getting the neighbors of set of vertices.",
      "start_line": 201,
      "end_line": 237,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "Step struct {\n\t// From is the source of the step.\n\tFrom struct {\n\t\t// V can be either one vertex or set of vertices.\n\t\t// It can be a pre-processed step (sql.Query) or a simple Go type (integer or string).\n\t\tV any\n\t\t// Table holds the table name of V (from).\n\t\tTable string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n\t// Edge holds the edge information for getting the neighbors.\n\tEdge struct {\n\t\t// Rel of the edge.\n\t\tRel Rel\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Table name of where this edge columns reside.\n\t\tTable string\n\t\t// Columns of the edge.\n\t\t// In O2O and M2O, it holds the foreign-key column. Hence, len == 1.\n\t\t// In M2M, it holds the primary-key columns of the join table. Hence, len == 2.\n\t\tColumns []string\n\t\t// Inverse indicates if the edge is an inverse edge.\n\t\tInverse bool\n\t}\n\t// To is the dest of the path (the neighbors).\n\tTo struct {\n\t\t// Table holds the table name of the neighbors (to).\n\t\tTable string\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Dialect(name string) *DialectBuilder {\n\treturn \u0026DialectBuilder{name}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ThroughEdgeTable() bool {\n\treturn s.Edge.Rel == M2M\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) Schema(name string) *SelectTable {\n\ts.schema = name\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Table(name string) *SelectTable {\n\tb := Table(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Select(columns ...string) *Selector {\n\ts.selection = make([]selection, len(columns))\n\tfor i := range columns {\n\t\ts.selection[i] = selection{c: columns[i]}\n\t}\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) C(column string) string {\n\t// Skip formatting qualified columns.\n\tif s.isQualified(column) {\n\t\treturn column\n\t}\n\tif s.as != \"\" {\n\t\tb := \u0026Builder{dialect: s.dialect}\n\t\tb.Ident(s.as)\n\t\tb.WriteByte('.')\n\t\tb.Ident(column)\n\t\treturn b.String()\n\t}\n\treturn s.Table().C(column)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) On(c1, c2 string) *Selector {\n\ts.OnP(P(func(builder *Builder) {\n\t\tbuilder.Ident(c1).WriteOp(OpEQ).Ident(c2)\n\t}))\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Join(t TableView) *Selector {\n\treturn s.join(\"JOIN\", t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) From(t TableView) *Selector {\n\ts.from = nil\n\treturn s.AppendFrom(t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Select(columns ...string) *Selector {\n\tb := Select(columns...)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) C(column string) string {\n\tname := s.name\n\tif s.as != \"\" {\n\t\tname = s.as\n\t}\n\tb := \u0026Builder{dialect: s.dialect}\n\tif s.as == \"\" {\n\t\tb.writeSchema(s.schema)\n\t}\n\tb.Ident(name).WriteByte('.').Ident(column)\n\treturn b.String()\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) FromEdgeOwner() bool {\n\treturn s.Edge.Rel == M2O || (s.Edge.Rel == O2O \u0026\u0026 s.Edge.Inverse)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ToEdgeOwner() bool {\n\treturn s.Edge.Rel == O2M || (s.Edge.Rel == O2O \u0026\u0026 !s.Edge.Inverse)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        236
      ],
      "cover_details": {
        "line_cover_rate": 0.9459459459459459
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/request.go:UnmarshalText",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestCredentialsBadEncodingMarshaling"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestCredentialsMarshaling"
        }
      ],
      "name": "UnmarshalText",
      "signature": "(c *Credentials) UnmarshalText (text []byte) error",
      "ground_truth": "func (c *Credentials) UnmarshalText(text []byte) error {\n\tenc := base64.StdEncoding\n\tdata := make([]byte, enc.DecodedLen(len(text)))\n\n\tn, err := enc.Decode(data, text)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdata = data[:n]\n\n\tparts := bytes.SplitN(data, []byte{0}, 3)\n\tif len(parts) != 3 {\n\t\treturn errors.New(\"bad credentials data\")\n\t}\n\n\tc.Username = string(parts[1])\n\tc.Password = string(parts[2])\n\treturn nil\n}",
      "function_comment": "// UnmarshalText implements encoding.TextUnmarshaler interface.",
      "function_statement": "// UnmarshalText implements encoding.TextUnmarshaler interface.",
      "start_line": 92,
      "end_line": 110,
      "file_path": "./dialect/gremlin/request.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Credentials struct{ Username, Password string }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/base64/base64.go",
          "code_snippet": "StdEncoding = NewEncoding(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/base64/base64.go",
          "code_snippet": "func (enc *Encoding) DecodedLen(n int) int {\n\treturn decodedLen(n, enc.padChar)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/base64/base64.go",
          "code_snippet": "func (enc *Encoding) Decode(dst, src []byte) (n int, err error) {\n\tif len(src) == 0 {\n\t\treturn 0, nil\n\t}\n\n\t// Lift the nil check outside of the loop. enc.decodeMap is directly\n\t// used later in this function, to let the compiler know that the\n\t// receiver can't be nil.\n\t_ = enc.decodeMap\n\n\tsi := 0\n\tfor strconv.IntSize \u003e= 64 \u0026\u0026 len(src)-si \u003e= 8 \u0026\u0026 len(dst)-n \u003e= 8 {\n\t\tsrc2 := src[si : si+8]\n\t\tif dn, ok := assemble64(\n\t\t\tenc.decodeMap[src2[0]],\n\t\t\tenc.decodeMap[src2[1]],\n\t\t\tenc.decodeMap[src2[2]],\n\t\t\tenc.decodeMap[src2[3]],\n\t\t\tenc.decodeMap[src2[4]],\n\t\t\tenc.decodeMap[src2[5]],\n\t\t\tenc.decodeMap[src2[6]],\n\t\t\tenc.decodeMap[src2[7]],\n\t\t); ok {\n\t\t\tbinary.BigEndian.PutUint64(dst[n:], dn)\n\t\t\tn += 6\n\t\t\tsi += 8\n\t\t} else {\n\t\t\tvar ninc int\n\t\t\tsi, ninc, err = enc.decodeQuantum(dst[n:], src, si)\n\t\t\tn += ninc\n\t\t\tif err != nil {\n\t\t\t\treturn n, err\n\t\t\t}\n\t\t}\n\t}\n\n\tfor len(src)-si \u003e= 4 \u0026\u0026 len(dst)-n \u003e= 4 {\n\t\tsrc2 := src[si : si+4]\n\t\tif dn, ok := assemble32(\n\t\t\tenc.decodeMap[src2[0]],\n\t\t\tenc.decodeMap[src2[1]],\n\t\t\tenc.decodeMap[src2[2]],\n\t\t\tenc.decodeMap[src2[3]],\n\t\t); ok {\n\t\t\tbinary.BigEndian.PutUint32(dst[n:], dn)\n\t\t\tn += 3\n\t\t\tsi += 4\n\t\t} else {\n\t\t\tvar ninc int\n\t\t\tsi, ninc, err = enc.decodeQuantum(dst[n:], src, si)\n\t\t\tn += ninc\n\t\t\tif err != nil {\n\t\t\t\treturn n, err\n\t\t\t}\n\t\t}\n\t}\n\n\tfor si \u003c len(src) {\n\t\tvar ninc int\n\t\tsi, ninc, err = enc.decodeQuantum(dst[n:], src, si)\n\t\tn += ninc\n\t\tif err != nil {\n\t\t\treturn n, err\n\t\t}\n\t}\n\treturn n, err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/bytes.go",
          "code_snippet": "func SplitN(s, sep []byte, n int) [][]byte { return genSplit(s, sep, 0, n) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        108,
        109
      ],
      "cover_details": {
        "line_cover_rate": 0.8947368421052632
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:DecorateEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecorateEncoder",
      "signature": "(ext encodeExtension) DecorateEncoder (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecorateEncoder(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif enc := ext.DecoratorOfRegistered(enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfMarshaler(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfTyper(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfNative(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Ptr, reflect.Interface, reflect.Struct:\n\t\treturn enc\n\tcase reflect.Array:\n\t\treturn ext.DecoratorOfArray(enc)\n\tcase reflect.Slice:\n\t\treturn ext.DecoratorOfSlice(typ, enc)\n\tcase reflect.Map:\n\t\treturn ext.DecoratorOfMap(enc)\n\tdefault:\n\t\treturn ext.EncoderOfError(\"graphson: unsupported type: %s\", typ.String())\n\t}\n}",
      "function_comment": "// DecorateEncoder decorates an passed in value encoder for type.",
      "function_statement": "// DecorateEncoder decorates an passed in value encoder for type.",
      "start_line": 73,
      "end_line": 98,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (encodeExtension) DecoratorOfRegistered(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif _, ok := enc.(registeredEncoder); ok {\n\t\treturn enc\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (ext encodeExtension) DecoratorOfMarshaler(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ == marshalerType {\n\t\tenc := marshalerEncoder{enc, typ}\n\t\treturn directMarshalerEncoder{enc}\n\t}\n\tif typ.Implements(marshalerType) {\n\t\treturn marshalerEncoder{enc, typ}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(marshalerType) {\n\t\tptrEnc := ext.LazyEncoderOf(ptrType)\n\t\tenc := marshalerEncoder{ptrEnc, ptrType}\n\t\treturn referenceEncoder{enc}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (ext encodeExtension) DecoratorOfTyper(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ.Kind() != reflect.Struct {\n\t\treturn nil\n\t}\n\tif typ.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\treturn typ.UnsafeIndirect(ptr).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (encodeExtension) DecoratorOfNative(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool, reflect.String:\n\t\treturn enc\n\tcase reflect.Int64, reflect.Int, reflect.Uint32:\n\t\treturn typeEncoder{enc, int64Type}\n\tcase reflect.Int32, reflect.Int8, reflect.Uint16:\n\t\treturn typeEncoder{enc, int32Type}\n\tcase reflect.Int16:\n\t\treturn typeEncoder{enc, int16Type}\n\tcase reflect.Uint64, reflect.Uint:\n\t\treturn typeEncoder{enc, bigIntegerType}\n\tcase reflect.Uint8:\n\t\treturn typeEncoder{enc, byteType}\n\tcase reflect.Float32:\n\t\treturn typeEncoder{enc, floatType}\n\tcase reflect.Float64:\n\t\treturn typeEncoder{enc, doubleType}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (encodeExtension) DecoratorOfArray(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (encodeExtension) DecoratorOfSlice(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tencoder := typeEncoder{ValEncoder: enc}\n\tsliceType := typ.(reflect2.SliceType)\n\tif sliceType.Elem().Kind() == reflect.Uint8 {\n\t\tencoder.Type = byteBufferType\n\t} else {\n\t\tencoder.Type = listType\n\t}\n\treturn sliceEncoder{sliceType, encoder}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (encodeExtension) DecoratorOfMap(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, mapType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func (encodeExtension) EncoderOfError(format string, args ...any) jsoniter.ValEncoder {\n\treturn decoratorOfError(format, args...)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:selector",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestQueryNodesSchema"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestQueryNodes"
        }
      ],
      "name": "selector",
      "signature": "(q *query) selector (ctx context.Context) (*sql.Selector, error)",
      "ground_truth": "func (q *query) selector(ctx context.Context) (*sql.Selector, error) {\n\tselector := q.builder.\n\t\tSelect().\n\t\tFrom(q.builder.Table(q.Node.Table).Schema(q.Node.Schema)).\n\t\tWithContext(ctx)\n\tif q.From != nil {\n\t\tselector = q.From\n\t}\n\tselector.Select(selector.Columns(q.Node.Columns...)...)\n\tif order := q.Order; order != nil {\n\t\torder(selector)\n\t}\n\tif pred := q.Predicate; pred != nil {\n\t\tpred(selector)\n\t}\n\tif q.Offset != 0 {\n\t\t// Limit is mandatory for the offset clause. We start\n\t\t// with default value, and override it below if needed.\n\t\tselector.Offset(q.Offset).Limit(math.MaxInt32)\n\t}\n\tif q.Limit != 0 {\n\t\tselector.Limit(q.Limit)\n\t}\n\tif q.Unique {\n\t\tselector.Distinct()\n\t}\n\tfor _, m := range q.Modifiers {\n\t\tm(selector)\n\t}\n\tif err := selector.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn selector, nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1066,
      "end_line": 1099,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "query struct {\n\tgraph\n\t*QuerySpec\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) WithContext(ctx context.Context) *Selector {\n\tif ctx == nil {\n\t\tpanic(\"nil context\")\n\t}\n\ts.ctx = ctx\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) From(t TableView) *Selector {\n\ts.from = nil\n\treturn s.AppendFrom(t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Select(columns ...string) *Selector {\n\tb := Select(columns...)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "graph struct {\n\ttx      dialect.ExecQuerier\n\tbuilder *sql.DialectBuilder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) Schema(name string) *SelectTable {\n\ts.schema = name\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Table(name string) *SelectTable {\n\tb := Table(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "NodeSpec struct {\n\t\tTable       string\n\t\tSchema      string\n\t\tColumns     []string\n\t\tID          *FieldSpec   // primary key.\n\t\tCompositeID []*FieldSpec // composite id (edge schema).\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "QuerySpec struct {\n\tNode *NodeSpec     // Nodes info.\n\tFrom *sql.Selector // Optional query source (from path).\n\n\tLimit     int\n\tOffset    int\n\tUnique    bool\n\tOrder     func(*sql.Selector)\n\tPredicate func(*sql.Selector)\n\tModifiers []func(*sql.Selector)\n\n\tScanValues func(columns []string) ([]any, error)\n\tAssign     func(columns []string, values []any) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Select(columns ...string) *Selector {\n\ts.selection = make([]selection, len(columns))\n\tfor i := range columns {\n\t\ts.selection[i] = selection{c: columns[i]}\n\t}\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Columns(columns ...string) []string {\n\tnames := make([]string, 0, len(columns))\n\tfor _, c := range columns {\n\t\tnames = append(names, s.C(c))\n\t}\n\treturn names\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Limit(limit int) *Selector {\n\ts.limit = \u0026limit\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Offset(offset int) *Selector {\n\ts.offset = \u0026offset\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Distinct() *Selector {\n\ts.distinct = true\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Err() error {\n\tif len(b.errs) == 0 {\n\t\treturn nil\n\t}\n\tbr := strings.Builder{}\n\tfor i := range b.errs {\n\t\tif i \u003e 0 {\n\t\t\tbr.WriteString(\"; \")\n\t\t}\n\t\tbr.WriteString(b.errs[i].Error())\n\t}\n\treturn errors.New(br.String())\n}",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/math/const.go",
          "code_snippet": "MaxInt32  = 1\u003c\u003c31 - 1",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1066,
        1067,
        1068,
        1069,
        1070,
        1071,
        1074,
        1075,
        1076,
        1077,
        1078,
        1079,
        1080,
        1081,
        1082,
        1083,
        1084,
        1085,
        1086,
        1087,
        1088,
        1089,
        1090,
        1091,
        1092,
        1093,
        1094,
        1095,
        1098
      ],
      "cover_details": {
        "line_cover_rate": 0.8529411764705882
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        }
      ],
      "name": "Decode",
      "signature": "(dec unmarshalerDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec unmarshalerDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tbytes := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tunmarshaler := dec.UnsafeIndirect(ptr).(Unmarshaler)\n\tif err := unmarshaler.UnmarshalGraphson(bytes); err != nil {\n\t\titer.ReportError(\n\t\t\t\"unmarshal graphson\",\n\t\t\tfmt.Sprintf(\n\t\t\t\t\"graphson: error calling UnmarshalGraphson for type %s: %s\",\n\t\t\t\tdec.Type, err,\n\t\t\t),\n\t\t)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 108,
      "end_line": 124,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "unmarshalerDecoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "Unmarshaler interface {\n\tUnmarshalGraphson([]byte) error\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        108,
        109,
        110,
        111,
        112,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "cover_details": {
        "line_cover_rate": 0.8823529411764706
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectType",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "reflectType",
      "signature": "(efaceDecoder) reflectType (typ Type) reflect2.Type",
      "ground_truth": "func (efaceDecoder) reflectType(typ Type) reflect2.Type {\n\tswitch typ {\n\tcase doubleType:\n\t\treturn reflect2.TypeOf(float64(0))\n\tcase floatType:\n\t\treturn reflect2.TypeOf(float32(0))\n\tcase byteType:\n\t\treturn reflect2.TypeOf(uint8(0))\n\tcase int16Type:\n\t\treturn reflect2.TypeOf(int16(0))\n\tcase int32Type:\n\t\treturn reflect2.TypeOf(int32(0))\n\tcase int64Type, bigIntegerType:\n\t\treturn reflect2.TypeOf(int64(0))\n\tcase byteBufferType:\n\t\treturn reflect2.TypeOf([]byte{})\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 101,
      "end_line": 120,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "doubleType Type = \"g:Double\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "floatType  Type = \"g:Float\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteType       Type = \"gx:Byte\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int16Type      Type = \"gx:Int16\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int32Type  Type = \"g:Int32\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "bigIntegerType Type = \"gx:BigInteger\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int64Type  Type = \"g:Int64\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteBufferType Type = \"gx:ByteBuffer\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t *traceTransport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t *traceTransport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tctx, span := trace.StartSpan(ctx,\n\t\tt.formatSpanName(ctx, req),\n\t\ttrace.WithSampler(t.startOptions.Sampler),\n\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t)\n\tdefer span.End()\n\n\tspan.AddAttributes(requestAttrs(req, t.withQuery)...)\n\trsp, err := t.base.RoundTrip(ctx, req)\n\tif err != nil {\n\t\tspan.SetStatus(trace.Status{Code: trace.StatusCodeUnknown, Message: err.Error()})\n\t\treturn rsp, err\n\t}\n\n\tspan.AddAttributes(responseAttrs(rsp)...)\n\tspan.SetStatus(TraceStatus(rsp.Status.Code))\n\treturn rsp, err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 33,
      "end_line": 51,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "traceTransport struct {\n\tbase           gremlin.RoundTripper\n\tstartOptions   trace.StartOptions\n\tformatSpanName func(context.Context, *gremlin.Request) string\n\twithQuery      bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func requestAttrs(req *gremlin.Request, withQuery bool) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.StringAttribute(RequestIDAttribute, req.RequestID),\n\t\ttrace.StringAttribute(OperationAttribute, req.Operation),\n\t}\n\tif withQuery {\n\t\tquery, _ := req.Arguments[gremlin.ArgsGremlin].(string)\n\t\tattrs = append(attrs, trace.StringAttribute(QueryAttribute, query))\n\t\tif bindings, ok := req.Arguments[gremlin.ArgsBindings].(map[string]any); ok {\n\t\t\tattrs = append(attrs, bindingsAttrs(bindings)...)\n\t\t}\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func responseAttrs(rsp *gremlin.Response) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.Int64Attribute(CodeAttribute, int64(rsp.Status.Code)),\n\t}\n\tif rsp.Status.Message != \"\" {\n\t\tattrs = append(attrs, trace.StringAttribute(MessageAttribute, rsp.Status.Message))\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func TraceStatus(status int) trace.Status {\n\tvar code int32\n\tswitch status {\n\tcase gremlin.StatusSuccess,\n\t\tgremlin.StatusNoContent,\n\t\tgremlin.StatusPartialContent:\n\t\tcode = trace.StatusCodeOK\n\tcase gremlin.StatusUnauthorized:\n\t\tcode = trace.StatusCodePermissionDenied\n\tcase gremlin.StatusAuthenticate:\n\t\tcode = trace.StatusCodeUnauthenticated\n\tcase gremlin.StatusMalformedRequest,\n\t\tgremlin.StatusInvalidRequestArguments,\n\t\tgremlin.StatusScriptEvaluationError:\n\t\tcode = trace.StatusCodeInvalidArgument\n\tcase gremlin.StatusServerError,\n\t\tgremlin.StatusServerSerializationError:\n\t\tcode = trace.StatusCodeInternal\n\tcase gremlin.StatusServerTimeout:\n\t\tcode = trace.StatusCodeDeadlineExceeded\n\tdefault:\n\t\tcode = trace.StatusCodeUnknown\n\t}\n\treturn trace.Status{Code: code, Message: gremlin.StatusText(status)}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func StartSpan(ctx context.Context, name string, o ...StartOption) (context.Context, *Span) {\n\treturn DefaultTracer.StartSpan(ctx, name, o...)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "func WithSampler(sampler Sampler) StartOption {\n\treturn func(o *StartOptions) {\n\t\to.Sampler = sampler\n\t}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "StartOptions struct {\n\t// Sampler to consult for this Span. If provided, it is always consulted.\n\t//\n\t// If not provided, then the behavior differs based on whether\n\t// the parent of this Span is remote, local, or there is no parent.\n\t// In the case of a remote parent or no parent, the\n\t// default sampler (see Config) will be consulted. Otherwise,\n\t// when there is a non-remote parent, no new sampling decision will be made:\n\t// we will preserve the sampling of the parent.\n\tSampler Sampler\n\n\t// SpanKind represents the kind of a span. If none is set,\n\t// SpanKindUnspecified is used.\n\tSpanKind int\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "func WithSpanKind(spanKind int) StartOption {\n\treturn func(o *StartOptions) {\n\t\to.SpanKind = spanKind\n\t}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "SpanKindClient",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) End() {\n\tif s == nil {\n\t\treturn\n\t}\n\ts.internal.End()\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) AddAttributes(attributes ...Attribute) {\n\tif !s.IsRecordingEvents() {\n\t\treturn\n\t}\n\ts.internal.AddAttributes(attributes...)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) SetStatus(status Status) {\n\tif !s.IsRecordingEvents() {\n\t\treturn\n\t}\n\ts.internal.SetStatus(status)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Status struct {\n\t// Code is a status code.  Zero indicates success.\n\t//\n\t// If Code will be propagated to Google APIs, it ideally should be a value from\n\t// https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto .\n\tCode    int32\n\tMessage string\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeUnknown            = 2",
          "ref_module": "trace"
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50
      ],
      "cover_details": {
        "line_cover_rate": 0.8947368421052632
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/graph.go:resolve",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "resolve",
      "signature": "(g *Graph) resolve (t *Type) error",
      "ground_truth": "func (g *Graph) resolve(t *Type) error {\n\tfor _, e := range t.Edges {\n\t\tswitch {\n\t\tcase e.IsInverse():\n\t\t\tref, ok := e.Type.HasAssoc(e.Inverse)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"edge %q is missing for inverse edge: %s.%s(%s)\", e.Inverse, t.Name, e.Name, e.Type.Name)\n\t\t\t}\n\t\t\tif !e.Optional \u0026\u0026 !ref.Optional {\n\t\t\t\treturn fmt.Errorf(\"edges cannot be required in both directions: %s.%s \u003c-\u003e %s.%s\", t.Name, e.Name, e.Type.Name, ref.Name)\n\t\t\t}\n\t\t\tif ref.Type != t {\n\t\t\t\treturn fmt.Errorf(\"mismatch type for back-ref %q of %s.%s \u003c-\u003e %s.%s\", e.Inverse, t.Name, e.Name, e.Type.Name, ref.Name)\n\t\t\t}\n\t\t\te.Ref, ref.Ref = ref, e\n\t\t\ttable := t.Table()\n\t\t\t// Name the foreign-key column in a format that wouldn't change even if an inverse\n\t\t\t// edge is dropped (or added). The format is: \"\u003cEdge-Owner\u003e_\u003cEdge-Name\u003e\".\n\t\t\tcolumn := fmt.Sprintf(\"%s_%s\", e.Type.Label(), snake(ref.Name))\n\t\t\tswitch a, b := ref.Unique, e.Unique; {\n\t\t\t// If the relation column is in the inverse side/table. The rule is simple, if assoc is O2M,\n\t\t\t// then inverse is M2O and the relation is in its table.\n\t\t\tcase a \u0026\u0026 b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = O2O, O2O\n\t\t\tcase !a \u0026\u0026 b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = M2O, O2M\n\n\t\t\t// If the relation column is in the assoc side.\n\t\t\tcase a \u0026\u0026 !b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = O2M, M2O\n\t\t\t\ttable = e.Type.Table()\n\n\t\t\tcase !a \u0026\u0026 !b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = M2M, M2M\n\t\t\t\ttable = e.Type.Label() + \"_\" + ref.Name\n\t\t\t\tc1, c2 := ref.Owner.Label()+\"_id\", ref.Type.Label()+\"_id\"\n\t\t\t\t// If the relation is from the same type: User has Friends ([]User),\n\t\t\t\t// we give the second column a different name (the relation name).\n\t\t\t\tif c1 == c2 {\n\t\t\t\t\tc2 = rules.Singularize(e.Name) + \"_id\"\n\t\t\t\t}\n\t\t\t\t// Share the same backing array for the relation columns so\n\t\t\t\t// that any changes to one will be reflected in both edges.\n\t\t\t\te.Rel.Columns = []string{c1, c2}\n\t\t\t\tref.Rel.Columns = e.Rel.Columns\n\t\t\t}\n\t\t\te.Rel.Table, ref.Rel.Table = table, table\n\t\t\tif !e.M2M() {\n\t\t\t\te.Rel.Columns = []string{column}\n\t\t\t\tref.Rel.Columns = e.Rel.Columns\n\t\t\t}\n\t\t// Assoc with uninitialized relation.\n\t\tcase !e.IsInverse() \u0026\u0026 e.Rel.Type == Unk:\n\t\t\tswitch {\n\t\t\tcase !e.Unique \u0026\u0026 e.Type == t:\n\t\t\t\te.Rel.Type = M2M\n\t\t\t\te.Bidi = true\n\t\t\t\te.Rel.Table = t.Label() + \"_\" + e.Name\n\t\t\t\te.Rel.Columns = []string{e.Owner.Label() + \"_id\", rules.Singularize(e.Name) + \"_id\"}\n\t\t\tcase e.Unique \u0026\u0026 e.Type == t:\n\t\t\t\te.Rel.Type = O2O\n\t\t\t\te.Bidi = true\n\t\t\t\te.Rel.Table = t.Table()\n\t\t\tcase e.Unique:\n\t\t\t\te.Rel.Type = M2O\n\t\t\t\te.Rel.Table = t.Table()\n\t\t\tdefault:\n\t\t\t\te.Rel.Type = O2M\n\t\t\t\te.Rel.Table = e.Type.Table()\n\t\t\t}\n\t\t\tif !e.M2M() {\n\t\t\t\te.Rel.Columns = []string{fmt.Sprintf(\"%s_%s\", t.Label(), snake(e.Name))}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// resolve the type references and relations of its edges.\n// It fails if one of the references is missing or invalid.\n//\n// Relation definitions between A and B, where A is the owner of\n// the edge and B uses this edge as a back-reference:\n//\n//\tO2O\n//\t - A have a unique edge (E) to B, and B have a back-reference unique edge (E') for E.\n//\t - A have a unique edge (E) to A.\n//\n//\tO2M (The \"Many\" side, keeps a reference to the \"One\" side).\n//\t - A have an edge (E) to B (not unique), and B doesn't have a back-reference edge for E.\n//\t - A have an edge (E) to B (not unique), and B have a back-reference unique edge (E') for E.\n//\n//\tM2O (The \"Many\" side, holds the reference to the \"One\" side).\n//\t - A have a unique edge (E) to B, and B doesn't have a back-reference edge for E.\n//\t - A have a unique edge (E) to B, and B have a back-reference non-unique edge (E') for E.\n//\n//\tM2M\n//\t - A have an edge (E) to B (not unique), and B have a back-reference non-unique edge (E') for E.\n//\t - A have an edge (E) to A (not unique).",
      "function_statement": "// resolve the type references and relations of its edges.\n// It fails if one of the references is missing or invalid.\n//\n// Relation definitions between A and B, where A is the owner of\n// the edge and B uses this edge as a back-reference:\n//\n//\tO2O\n//\t - A have a unique edge (E) to B, and B have a back-reference unique edge (E') for E.\n//\t - A have a unique edge (E) to A.\n//\n//\tO2M (The \"Many\" side, keeps a reference to the \"One\" side).\n//\t - A have an edge (E) to B (not unique), and B doesn't have a back-reference edge for E.\n//\t - A have an edge (E) to B (not unique), and B have a back-reference unique edge (E') for E.\n//\n//\tM2O (The \"Many\" side, holds the reference to the \"One\" side).\n//\t - A have a unique edge (E) to B, and B doesn't have a back-reference edge for E.\n//\t - A have a unique edge (E) to B, and B have a back-reference non-unique edge (E') for E.\n//\n//\tM2M\n//\t - A have an edge (E) to B (not unique), and B have a back-reference non-unique edge (E') for E.\n//\t - A have an edge (E) to A (not unique).",
      "start_line": 415,
      "end_line": 491,
      "file_path": "./entc/gen/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Graph struct {\n\t\t*Config\n\t\t// Nodes are list of Go types that mapped to the types in the loaded schema.\n\t\tNodes []*Type\n\t\tnodes map[string]*Type\n\t\t// Schemas holds the raw interfaces for the loaded schemas.\n\t\tSchemas []*load.Schema\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) IsInverse() bool { return e.Inverse != \"\" }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) HasAssoc(name string) (*Edge, bool) {\n\tfor _, e := range t.Edges {\n\t\tif name == e.Name \u0026\u0026 !e.IsInverse() {\n\t\t\treturn e, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) Table() string {\n\tif ant := t.EntSQL(); ant != nil \u0026\u0026 ant.Table != \"\" {\n\t\treturn ant.Table\n\t}\n\tif t.schema != nil \u0026\u0026 t.schema.Config.Table != \"\" {\n\t\treturn t.schema.Config.Table\n\t}\n\treturn snake(rules.Pluralize(t.Name))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) Label() string {\n\treturn snake(t.Name)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/func.go",
          "code_snippet": "func snake(s string) string {\n\tvar (\n\t\tj int\n\t\tb strings.Builder\n\t)\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tr := rune(s[i])\n\t\t// Put '_' if it is not a start or end of a word, current letter is uppercase,\n\t\t// and previous is lowercase (cases like: \"UserInfo\"), or next letter is also\n\t\t// a lowercase and previous letter is not \"_\".\n\t\tif i \u003e 0 \u0026\u0026 i \u003c len(s)-1 \u0026\u0026 unicode.IsUpper(r) {\n\t\t\tif unicode.IsLower(rune(s[i-1])) ||\n\t\t\t\tj != i-1 \u0026\u0026 unicode.IsLower(rune(s[i+1])) \u0026\u0026 unicode.IsLetter(rune(s[i-1])) {\n\t\t\t\tj = i\n\t\t\t\tb.WriteString(\"_\")\n\t\t\t}\n\t\t}\n\t\tb.WriteRune(unicode.ToLower(r))\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "O2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Relation struct {\n\t\t// Type holds the relation type of the edge.\n\t\tType Rel\n\t\t// Table holds the relation table for this edge.\n\t\t// For O2O and O2M, it's the table name of the type we're this edge point to.\n\t\t// For M2O, this is the owner's type, and for M2M this is the join table.\n\t\tTable string\n\t\t// Columns holds the relation column(s) in the relation table above.\n\t\t// For O2M, M2O and O2O, it contains one element with the column name.\n\t\t// For M2M edges, it contains two columns defined in the join table with\n\t\t// the same order as defined in the schema: (owner_id, reference_id).\n\t\tColumns []string\n\t\t// foreign-key information for non-M2M edges.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "O2M",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "M2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "M2M",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) M2M() bool { return e.Rel.Type == M2M }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Unk Rel = iota",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Singularize(word string) string {\n\tif len(word) == 0 {\n\t\treturn word\n\t}\n\tif rs.isUncountable(word) {\n\t\treturn word\n\t}\n\tfor _, rule := range rs.singulars {\n\t\tif rule.exact {\n\t\t\tif word == rule.suffix {\n\t\t\t\treturn rule.replacement\n\t\t\t}\n\t\t} else {\n\t\t\tif strings.HasSuffix(word, rule.suffix) {\n\t\t\t\treturn replaceLast(word, rule.suffix, rule.replacement)\n\t\t\t}\n\t\t}\n\t}\n\treturn word\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        415,
        416,
        417,
        418,
        419,
        420,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434,
        437,
        438,
        439,
        440,
        443,
        444,
        445,
        447,
        448,
        449,
        450,
        451,
        452,
        453,
        454,
        455,
        458,
        459,
        461,
        462,
        463,
        464,
        465,
        467,
        468,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        482,
        483,
        485,
        486,
        487,
        490
      ],
      "cover_details": {
        "line_cover_rate": 0.8051948051948052
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/tags.go:Contains",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestTagOptionsContains"
        }
      ],
      "name": "Contains",
      "signature": "(opts tagOptions) Contains (opt string) bool",
      "ground_truth": "func (opts tagOptions) Contains(opt string) bool {\n\ts := string(opts)\n\tfor s != \"\" {\n\t\tvar next string\n\t\ti := strings.Index(s, \",\")\n\t\tif i \u003e= 0 {\n\t\t\ts, next = s[:i], s[i+1:]\n\t\t}\n\t\tif s == opt {\n\t\t\treturn true\n\t\t}\n\t\ts = next\n\t}\n\treturn false\n}",
      "function_comment": "// Contains reports whether a comma-separated list of options\n// contains a particular substr flag. substr must be surrounded by a\n// string boundary or commas.",
      "function_statement": "// Contains reports whether a comma-separated list of options\n// contains a particular substr flag. substr must be surrounded by a\n// string boundary or commas.",
      "start_line": 25,
      "end_line": 39,
      "file_path": "./dialect/gremlin/encoding/graphson/tags.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/tags.go",
          "code_snippet": "tagOptions string",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func Index(s, substr string) int {\n\treturn stringslite.Index(s, substr)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        38
      ],
      "cover_details": {
        "line_cover_rate": 0.8666666666666667
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/graph.go:addEdges",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "addEdges",
      "signature": "(g *Graph) addEdges (schema *load.Schema)",
      "ground_truth": "func (g *Graph) addEdges(schema *load.Schema) {\n\tt, _ := g.typ(schema.Name)\n\tseen := make(map[string]struct{}, len(schema.Edges))\n\tfor _, e := range schema.Edges {\n\t\ttyp, ok := g.typ(e.Type)\n\t\texpect(ok, \"type %q does not exist for edge\", e.Type)\n\t\t_, ok = t.fields[e.Name]\n\t\texpect(!ok, \"%s schema cannot contain field and edge with the same name %q\", schema.Name, e.Name)\n\t\t_, ok = seen[e.Name]\n\t\texpect(!ok, \"%s schema contains multiple %q edges\", schema.Name, e.Name)\n\t\tseen[e.Name] = struct{}{}\n\t\tswitch {\n\t\t// Assoc only.\n\t\tcase !e.Inverse:\n\t\t\tt.Edges = append(t.Edges, \u0026Edge{\n\t\t\t\tdef:         e,\n\t\t\t\tType:        typ,\n\t\t\t\tName:        e.Name,\n\t\t\t\tOwner:       t,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tOptional:    !e.Required,\n\t\t\t\tImmutable:   e.Immutable,\n\t\t\t\tStructTag:   structTag(e.Name, e.Tag),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t})\n\t\t// Inverse only.\n\t\tcase e.Inverse \u0026\u0026 e.Ref == nil:\n\t\t\texpect(e.RefName != \"\", \"back-reference edge %s.%s is missing the Ref attribute\", t.Name, e.Name)\n\t\t\tt.Edges = append(t.Edges, \u0026Edge{\n\t\t\t\tdef:         e,\n\t\t\t\tType:        typ,\n\t\t\t\tName:        e.Name,\n\t\t\t\tOwner:       typ,\n\t\t\t\tInverse:     e.RefName,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tOptional:    !e.Required,\n\t\t\t\tImmutable:   e.Immutable,\n\t\t\t\tStructTag:   structTag(e.Name, e.Tag),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t})\n\t\t// Inverse and assoc.\n\t\tcase e.Inverse:\n\t\t\tref := e.Ref\n\t\t\texpect(e.RefName == \"\", \"reference name is derived from the assoc name: %s.%s \u003c-\u003e %s.%s\", t.Name, ref.Name, t.Name, e.Name)\n\t\t\texpect(ref.Type == t.Name, \"assoc-inverse edge allowed only as o2o relation of the same type\")\n\t\t\tfrom := \u0026Edge{\n\t\t\t\tdef:         e,\n\t\t\t\tType:        typ,\n\t\t\t\tName:        e.Name,\n\t\t\t\tOwner:       t,\n\t\t\t\tInverse:     ref.Name,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tOptional:    !e.Required,\n\t\t\t\tImmutable:   e.Immutable,\n\t\t\t\tStructTag:   structTag(e.Name, e.Tag),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t}\n\t\t\tto := \u0026Edge{\n\t\t\t\tdef:         ref,\n\t\t\t\tRef:         from,\n\t\t\t\tType:        typ,\n\t\t\t\tOwner:       t,\n\t\t\t\tName:        ref.Name,\n\t\t\t\tUnique:      ref.Unique,\n\t\t\t\tOptional:    !ref.Required,\n\t\t\t\tImmutable:   ref.Immutable,\n\t\t\t\tStructTag:   structTag(ref.Name, ref.Tag),\n\t\t\t\tAnnotations: ref.Annotations,\n\t\t\t}\n\t\t\tfrom.Ref = to\n\t\t\tt.Edges = append(t.Edges, from, to)\n\t\tdefault:\n\t\t\tpanic(graphError{\"edge must be either an assoc or inverse edge\"})\n\t\t}\n\t}\n}",
      "function_comment": "// addEdges adds the node edges to the graph.",
      "function_statement": "// addEdges adds the node edges to the graph.",
      "start_line": 317,
      "end_line": 392,
      "file_path": "./entc/gen/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Graph struct {\n\t\t*Config\n\t\t// Nodes are list of Go types that mapped to the types in the loaded schema.\n\t\tNodes []*Type\n\t\tnodes map[string]*Type\n\t\t// Schemas holds the raw interfaces for the loaded schemas.\n\t\tSchemas []*load.Schema\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Schema struct {\n\tName         string         `json:\"name,omitempty\"`\n\tPos          string         `json:\"-\"`\n\tView         bool           `json:\"view,omitempty\"`\n\tConfig       ent.Config     `json:\"config,omitempty\"`\n\tEdges        []*Edge        `json:\"edges,omitempty\"`\n\tFields       []*Field       `json:\"fields,omitempty\"`\n\tIndexes      []*Index       `json:\"indexes,omitempty\"`\n\tHooks        []*Position    `json:\"hooks,omitempty\"`\n\tInterceptors []*Position    `json:\"interceptors,omitempty\"`\n\tPolicy       []*Position    `json:\"policy,omitempty\"`\n\tAnnotations  map[string]any `json:\"annotations,omitempty\"`\n}",
          "ref_module": "load"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) typ(name string) (*Type, bool) {\n\tif g.nodes == nil {\n\t\tg.nodes = make(map[string]*Type, len(g.Nodes))\n\t\tfor _, n := range g.Nodes {\n\t\t\tg.nodes[n.Name] = n\n\t\t}\n\t}\n\tn, ok := g.nodes[name]\n\treturn n, ok\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Edge struct {\n\tName        string                 `json:\"name,omitempty\"`\n\tType        string                 `json:\"type,omitempty\"`\n\tTag         string                 `json:\"tag,omitempty\"`\n\tField       string                 `json:\"field,omitempty\"`\n\tRefName     string                 `json:\"ref_name,omitempty\"`\n\tRef         *Edge                  `json:\"ref,omitempty\"`\n\tThrough     *struct{ N, T string } `json:\"through,omitempty\"`\n\tUnique      bool                   `json:\"unique,omitempty\"`\n\tInverse     bool                   `json:\"inverse,omitempty\"`\n\tRequired    bool                   `json:\"required,omitempty\"`\n\tImmutable   bool                   `json:\"immutable,omitempty\"`\n\tStorageKey  *edge.StorageKey       `json:\"storage_key,omitempty\"`\n\tAnnotations map[string]any         `json:\"annotations,omitempty\"`\n\tComment     string                 `json:\"comment,omitempty\"`\n}",
          "ref_module": "load"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func expect(cond bool, msg string, args ...any) {\n\tif !cond {\n\t\tpanic(graphError{fmt.Sprintf(msg, args...)})\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func structTag(name, tag string) string {\n\tt := fmt.Sprintf(`json:\"%s,omitempty\"`, name)\n\tif tag == \"\" {\n\t\treturn t\n\t}\n\tif _, ok := reflect.StructTag(tag).Lookup(\"json\"); !ok {\n\t\ttag = t + \" \" + tag\n\t}\n\treturn tag\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "graphError struct {\n\tmsg string\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func panic(v any)",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387
      ],
      "cover_details": {
        "line_cover_rate": 0.8947368421052632
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "Decode",
      "signature": "(dec *mapDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec *mapDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tmapType := dec.mapType\n\tif mapType.UnsafeIsNil(ptr) {\n\t\tmapType.UnsafeSet(ptr, mapType.UnsafeMakeMap(0))\n\t}\n\n\tvar key unsafe.Pointer\n\tif !iter.ReadArrayCB(func(iter *jsoniter.Iterator) bool {\n\t\tif key == nil {\n\t\t\tkey = dec.keyType.UnsafeNew()\n\t\t\tdec.keyDec.Decode(key, iter)\n\t\t\treturn iter.Error == nil\n\t\t}\n\n\t\telem := dec.elemType.UnsafeNew()\n\t\tdec.elemDec.Decode(elem, iter)\n\t\tif iter.Error != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tmapType.UnsafeSetIndex(ptr, key, elem)\n\t\tkey = nil\n\t\treturn true\n\t}) {\n\t\treturn\n\t}\n\n\tif key != nil {\n\t\titer.ReportError(\"decode map\", \"odd number of map items\")\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 86,
      "end_line": 116,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapDecoder struct {\n\tmapType  reflect2.MapType\n\tkeyType  reflect2.Type\n\telemType reflect2.Type\n\tkeyDec   jsoniter.ValDecoder\n\telemDec  jsoniter.ValDecoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_array.go",
          "code_snippet": "func (iter *Iterator) ReadArrayCB(callback func(*Iterator) bool) (ret bool) {\n\tc := iter.nextToken()\n\tif c == '[' {\n\t\tif !iter.incrementDepth() {\n\t\t\treturn false\n\t\t}\n\t\tc = iter.nextToken()\n\t\tif c != ']' {\n\t\t\titer.unreadByte()\n\t\t\tif !callback(iter) {\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tc = iter.nextToken()\n\t\t\tfor c == ',' {\n\t\t\t\tif !callback(iter) {\n\t\t\t\t\titer.decrementDepth()\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tc = iter.nextToken()\n\t\t\t}\n\t\t\tif c != ']' {\n\t\t\t\titer.ReportError(\"ReadArrayCB\", \"expect ] in the end, but found \"+string([]byte{c}))\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn iter.decrementDepth()\n\t\t}\n\t\treturn iter.decrementDepth()\n\t}\n\tif c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn true // null\n\t}\n\titer.ReportError(\"ReadArrayCB\", \"expect [ or n, but found \"+string([]byte{c}))\n\treturn false\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        86,
        87,
        88,
        89,
        90,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        100,
        101,
        102,
        103,
        104,
        106,
        107,
        108,
        109,
        110,
        111,
        113,
        114,
        115
      ],
      "cover_details": {
        "line_cover_rate": 0.8387096774193549
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:pkgPath",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestSlices"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        }
      ],
      "name": "pkgPath",
      "signature": "pkgPath (t reflect.Type) string",
      "ground_truth": "func pkgPath(t reflect.Type) string {\n\tpkg := t.PkgPath()\n\tif pkg != \"\" {\n\t\treturn pkg\n\t}\n\tswitch t.Kind() {\n\tcase reflect.Slice, reflect.Array, reflect.Ptr, reflect.Map:\n\t\treturn pkgPath(t.Elem())\n\t}\n\treturn pkg\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1700,
      "end_line": 1710,
      "file_path": "./schema/field/field.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1700,
        1701,
        1702,
        1703,
        1704,
        1705,
        1706,
        1707,
        1709
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:Any",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        }
      ],
      "name": "Any",
      "signature": "Any (name string) *jsonBuilder",
      "ground_truth": "func Any(name string) *jsonBuilder {\n\tconst t = \"any\"\n\treturn \u0026jsonBuilder{\u0026Descriptor{\n\t\tName: name,\n\t\tInfo: \u0026TypeInfo{\n\t\t\tType:     TypeJSON,\n\t\t\tIdent:    t,\n\t\t\tNillable: true,\n\t\t\tRType: \u0026RType{\n\t\t\t\tName:  t,\n\t\t\t\tIdent: t,\n\t\t\t\tKind:  reflect.Interface,\n\t\t\t},\n\t\t},\n\t}}\n}",
      "function_comment": "// Any returns a new JSON Field with type any. Although this field type can be\n// useful for fields with dynamic data layout, it is strongly recommended to use\n// JSON with json.RawMessage instead and implement custom marshaling.",
      "function_statement": "// Any returns a new JSON Field with type any. Although this field type can be\n// useful for fields with dynamic data layout, it is strongly recommended to use\n// JSON with json.RawMessage instead and implement custom marshaling.",
      "start_line": 117,
      "end_line": 132,
      "file_path": "./schema/field/field.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "jsonBuilder struct {\n\tdesc *Descriptor\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "Descriptor struct {\n\tTag              string                  // struct tag.\n\tSize             int                     // varchar size.\n\tName             string                  // field name.\n\tInfo             *TypeInfo               // field type info.\n\tValueScanner     any                     // custom field codec.\n\tUnique           bool                    // unique index of field.\n\tNillable         bool                    // nillable struct field.\n\tOptional         bool                    // nullable field in database.\n\tImmutable        bool                    // create only field.\n\tDefault          any                     // default value on create.\n\tUpdateDefault    any                     // default value on update.\n\tValidators       []any                   // validator functions.\n\tStorageKey       string                  // sql column or gremlin property.\n\tEnums            []struct{ N, V string } // enum values.\n\tSensitive        bool                    // sensitive info string field.\n\tSchemaType       map[string]string       // override the schema type.\n\tAnnotations      []schema.Annotation     // field annotations.\n\tComment          string                  // field comment.\n\tDeprecated       bool                    // mark the field as deprecated.\n\tDeprecatedReason string                  // deprecation reason.\n\tErr              error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInfo struct {\n\tType     Type\n\tIdent    string\n\tPkgPath  string // import path.\n\tPkgName  string // local package name.\n\tNillable bool   // slices or pointers.\n\tRType    *RType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeJSON",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "RType struct {\n\tName    string // reflect.Type.Name\n\tIdent   string // reflect.Type.String\n\tKind    reflect.Kind\n\tPkgPath string\n\tMethods map[string]struct{ In, Out []*RType }\n\t// Used only for in-package checks.\n\trtype reflect.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:ValueEQ",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "ValueEQ",
      "signature": "ValueEQ (column string, arg any, opts ...Option) *sql.Predicate",
      "ground_truth": "func ValueEQ(column string, arg any, opts ...Option) *sql.Predicate {\n\treturn sql.P(func(b *sql.Builder) {\n\t\topts = normalizePG(b, arg, opts)\n\t\tvaluePath(b, column, opts...)\n\t\tb.WriteOp(sql.OpEQ)\n\t\t// Inline boolean values, as some drivers (e.g., MySQL) encode them as 0/1.\n\t\tif v, ok := arg.(bool); ok {\n\t\t\tb.WriteString(strconv.FormatBool(v))\n\t\t} else {\n\t\t\tb.Arg(arg)\n\t\t}\n\t})\n}",
      "function_comment": "// ValueEQ return a predicate for checking that a JSON value\n// (returned by the path) is equal to the given argument.\n//\n//\tsqljson.ValueEQ(\"a\", 1, sqljson.Path(\"b\"))",
      "function_statement": "// ValueEQ return a predicate for checking that a JSON value\n// (returned by the path) is equal to the given argument.\n//\n//\tsqljson.ValueEQ(\"a\", 1, sqljson.Path(\"b\"))",
      "start_line": 95,
      "end_line": 107,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "Option func(*PathOptions)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Predicate struct {\n\tBuilder\n\tdepth int\n\tfns   []func(*Builder)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func P(fns ...func(*Builder)) *Predicate {\n\treturn \u0026Predicate{fns: fns}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func normalizePG(b *sql.Builder, arg any, opts []Option) []Option {\n\tif b.Dialect() != dialect.Postgres {\n\t\treturn opts\n\t}\n\tbase := []Option{Unquote(true)}\n\tswitch arg.(type) {\n\tcase string:\n\tcase bool:\n\t\tbase = append(base, Cast(\"bool\"))\n\tcase float32, float64:\n\t\tbase = append(base, Cast(\"float\"))\n\tcase int8, int16, int32, int64, int, uint8, uint16, uint32, uint64:\n\t\tbase = append(base, Cast(\"int\"))\n\t}\n\treturn append(base, opts...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func valuePath(b *sql.Builder, column string, opts ...Option) {\n\tpath := identPath(column, opts...)\n\tpath.value(b)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpEQ      Op = iota",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Arg(a any) *Builder {\n\tswitch v := a.(type) {\n\tcase nil:\n\t\tb.WriteString(\"NULL\")\n\t\treturn b\n\tcase *raw:\n\t\tb.WriteString(v.s)\n\t\treturn b\n\tcase Querier:\n\t\tb.Join(v)\n\t\treturn b\n\t}\n\t// Default placeholder param (MySQL and SQLite).\n\tformat := \"?\"\n\tif b.postgres() {\n\t\t// Postgres' arguments are referenced using the syntax $n.\n\t\t// $1 refers to the 1st argument, $2 to the 2nd, and so on.\n\t\tformat = \"$\" + strconv.Itoa(b.total+1)\n\t}\n\tif f, ok := a.(ParamFormatter); ok {\n\t\tformat = f.FormatParam(format, \u0026StmtInfo{\n\t\t\tDialect: b.dialect,\n\t\t})\n\t}\n\treturn b.Argf(format, a)\n}",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strconv/atob.go",
          "code_snippet": "func FormatBool(b bool) string {\n\tif b {\n\t\treturn \"true\"\n\t}\n\treturn \"false\"\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:JSON",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        }
      ],
      "name": "JSON",
      "signature": "JSON (name string, typ any) *jsonBuilder",
      "ground_truth": "func JSON(name string, typ any) *jsonBuilder {\n\tb := \u0026jsonBuilder{\u0026Descriptor{\n\t\tName: name,\n\t\tInfo: \u0026TypeInfo{\n\t\t\tType: TypeJSON,\n\t\t},\n\t}}\n\tt := reflect.TypeOf(typ)\n\tif t == nil {\n\t\tb.desc.Err = errors.New(\"expect a Go value as JSON type but got nil\")\n\t\treturn b\n\t}\n\tb.desc.Info.Ident = t.String()\n\tb.desc.Info.PkgPath = t.PkgPath()\n\tb.desc.goType(typ)\n\tb.desc.checkGoType(t)\n\tswitch t.Kind() {\n\tcase reflect.Slice, reflect.Array, reflect.Ptr, reflect.Map:\n\t\tb.desc.Info.Nillable = true\n\t\tb.desc.Info.PkgPath = pkgPath(t)\n\t}\n\treturn b\n}",
      "function_comment": "// JSON returns a new Field with type json that is serialized to the given object.\n// For example:\n//\n//\tfield.JSON(\"dirs\", []http.Dir{}).\n//\t\tOptional()\n//\n//\n//\tfield.JSON(\"info\", \u0026Info{}).\n//\t\tOptional()",
      "function_statement": "// JSON returns a new Field with type json that is serialized to the given object.\n// For example:\n//\n//\tfield.JSON(\"dirs\", []http.Dir{}).\n//\t\tOptional()\n//\n//\n//\tfield.JSON(\"info\", \u0026Info{}).\n//\t\tOptional()",
      "start_line": 75,
      "end_line": 97,
      "file_path": "./schema/field/field.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "jsonBuilder struct {\n\tdesc *Descriptor\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "Descriptor struct {\n\tTag              string                  // struct tag.\n\tSize             int                     // varchar size.\n\tName             string                  // field name.\n\tInfo             *TypeInfo               // field type info.\n\tValueScanner     any                     // custom field codec.\n\tUnique           bool                    // unique index of field.\n\tNillable         bool                    // nillable struct field.\n\tOptional         bool                    // nullable field in database.\n\tImmutable        bool                    // create only field.\n\tDefault          any                     // default value on create.\n\tUpdateDefault    any                     // default value on update.\n\tValidators       []any                   // validator functions.\n\tStorageKey       string                  // sql column or gremlin property.\n\tEnums            []struct{ N, V string } // enum values.\n\tSensitive        bool                    // sensitive info string field.\n\tSchemaType       map[string]string       // override the schema type.\n\tAnnotations      []schema.Annotation     // field annotations.\n\tComment          string                  // field comment.\n\tDeprecated       bool                    // mark the field as deprecated.\n\tDeprecatedReason string                  // deprecation reason.\n\tErr              error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInfo struct {\n\tType     Type\n\tIdent    string\n\tPkgPath  string // import path.\n\tPkgName  string // local package name.\n\tNillable bool   // slices or pointers.\n\tRType    *RType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeJSON",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func (d *Descriptor) goType(typ any) {\n\tt := reflect.TypeOf(typ)\n\ttv := indirect(t)\n\tinfo := \u0026TypeInfo{\n\t\tType:    d.Info.Type,\n\t\tIdent:   t.String(),\n\t\tPkgPath: tv.PkgPath(),\n\t\tPkgName: pkgName(tv.String()),\n\t\tRType: \u0026RType{\n\t\t\trtype:   t,\n\t\t\tKind:    t.Kind(),\n\t\t\tName:    tv.Name(),\n\t\t\tIdent:   tv.String(),\n\t\t\tPkgPath: tv.PkgPath(),\n\t\t\tMethods: make(map[string]struct{ In, Out []*RType }, t.NumMethod()),\n\t\t},\n\t}\n\tmethods(t, info.RType)\n\tswitch t.Kind() {\n\tcase reflect.Slice, reflect.Ptr, reflect.Map:\n\t\tinfo.Nillable = true\n\t}\n\td.Info = info\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func (d *Descriptor) checkGoType(expectType reflect.Type) {\n\tt := expectType\n\tif d.Info.RType != nil \u0026\u0026 d.Info.RType.rtype != nil {\n\t\tt = d.Info.RType.rtype\n\t}\n\tswitch pt := reflect.PtrTo(t); {\n\t// An external ValueScanner.\n\tcase d.ValueScanner != nil:\n\t\tvs := reflect.Indirect(reflect.ValueOf(d.ValueScanner)).Type()\n\t\tm1, ok1 := vs.MethodByName(\"Value\")\n\t\tm2, ok2 := vs.MethodByName(\"ScanValue\")\n\t\tm3, ok3 := vs.MethodByName(\"FromValue\")\n\t\tswitch {\n\t\tcase !ok1, m1.Type.NumIn() != 2, m1.Type.In(1) != t,\n\t\t\tm1.Type.NumOut() != 2, m1.Type.Out(0) != valueType, m1.Type.Out(1) != errorType:\n\t\t\td.Err = fmt.Errorf(\"ValueScanner must implement the Value method: func Value(%s) (driver.Valuer, error)\", t)\n\t\tcase !ok2, m2.Type.NumIn() != 1, m2.Type.NumOut() != 1, m2.Type.Out(0) != valueScannerType:\n\t\t\td.Err = errors.New(\"ValueScanner must implement the ScanValue method: func ScanValue() field.ValueScanner\")\n\t\tcase !ok3, m3.Type.NumIn() != 2, m3.Type.In(1) != valueType, m3.Type.NumOut() != 2, m3.Type.Out(0) != t, m3.Type.Out(1) != errorType:\n\t\t\td.Err = fmt.Errorf(\"ValueScanner must implement the FromValue method: func FromValue(driver.Valuer) (%s, error)\", t)\n\t\t}\n\t// No GoType was provided.\n\tcase d.Info.RType == nil:\n\t// A GoType without an external ValueScanner.\n\tcase pt.Implements(valueScannerType), t.Implements(valueScannerType), t.Kind() == expectType.Kind() \u0026\u0026 t.ConvertibleTo(expectType):\n\t// There is a GoType, but it's not a ValueScanner.\n\tdefault:\n\t\td.Err = fmt.Errorf(\"GoType must be a %q type, ValueScanner or provide an external ValueScanner\", expectType)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func pkgPath(t reflect.Type) string {\n\tpkg := t.PkgPath()\n\tif pkg != \"\" {\n\t\treturn pkg\n\t}\n\tswitch t.Kind() {\n\tcase reflect.Slice, reflect.Array, reflect.Ptr, reflect.Map:\n\t\treturn pkgPath(t.Elem())\n\t}\n\treturn pkg\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        96
      ],
      "cover_details": {
        "line_cover_rate": 0.9130434782608695
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/type.go:TagTypes",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_TagTypes"
        }
      ],
      "name": "TagTypes",
      "signature": "(t Type) TagTypes () []string",
      "ground_truth": "func (t Type) TagTypes() []string {\n\ttags := make(map[string]bool)\n\tfor _, f := range t.Fields {\n\t\ttag := reflect.StructTag(f.StructTag)\n\t\tfields := strings.FieldsFunc(f.StructTag, func(r rune) bool {\n\t\t\treturn r == ':' || unicode.IsSpace(r)\n\t\t})\n\t\tfor _, name := range fields {\n\t\t\t_, ok := tag.Lookup(name)\n\t\t\tif ok \u0026\u0026 !tags[name] {\n\t\t\t\ttags[name] = true\n\t\t\t}\n\t\t}\n\t}\n\tr := make([]string, 0, len(tags))\n\tfor tag := range tags {\n\t\tr = append(r, tag)\n\t}\n\tsort.Strings(r)\n\treturn r\n}",
      "function_comment": "// TagTypes returns all struct-tag types of the type fields.",
      "function_statement": "// TagTypes returns all struct-tag types of the type fields.",
      "start_line": 626,
      "end_line": 646,
      "file_path": "./entc/gen/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Field struct {\n\t\tcfg *Config\n\t\tdef *load.Field\n\t\ttyp *Type\n\t\t// Name is the name of this field in the database schema.\n\t\tName string\n\t\t// Type holds the type information of the field.\n\t\tType *field.TypeInfo\n\t\t// Unique indicate if this field is a unique field.\n\t\tUnique bool\n\t\t// Optional indicates is this field is optional on create.\n\t\tOptional bool\n\t\t// Nillable indicates that this field can be null in the\n\t\t// database and pointer in the generated entities.\n\t\tNillable bool\n\t\t// Default indicates if this field has a default value for creation.\n\t\tDefault bool\n\t\t// Enums information for enum fields.\n\t\tEnums []Enum\n\t\t// UpdateDefault indicates if this field has a default value for update.\n\t\tUpdateDefault bool\n\t\t// Immutable indicates is this field cannot be updated.\n\t\tImmutable bool\n\t\t// StructTag of the field. default to \"json\".\n\t\tStructTag string\n\t\t// Validators holds the number of validators the field have.\n\t\tValidators int\n\t\t// Position info of the field.\n\t\tPosition *load.Position\n\t\t// UserDefined indicates that this field was defined explicitly by the user in\n\t\t// the schema. Unlike the default id field, which is defined by the generator.\n\t\tUserDefined bool\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// referenced foreign-key.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "StructTag string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func FieldsFunc(s string, f func(rune) bool) []string {\n\t// A span is used to record a slice of s of the form s[start:end].\n\t// The start index is inclusive and the end index is exclusive.\n\ttype span struct {\n\t\tstart int\n\t\tend   int\n\t}\n\tspans := make([]span, 0, 32)\n\n\t// Find the field start and end indices.\n\t// Doing this in a separate pass (rather than slicing the string s\n\t// and collecting the result substrings right away) is significantly\n\t// more efficient, possibly due to cache effects.\n\tstart := -1 // valid span start if \u003e= 0\n\tfor end, rune := range s {\n\t\tif f(rune) {\n\t\t\tif start \u003e= 0 {\n\t\t\t\tspans = append(spans, span{start, end})\n\t\t\t\t// Set start to a negative value.\n\t\t\t\t// Note: using -1 here consistently and reproducibly\n\t\t\t\t// slows down this code by a several percent on amd64.\n\t\t\t\tstart = ^start\n\t\t\t}\n\t\t} else {\n\t\t\tif start \u003c 0 {\n\t\t\t\tstart = end\n\t\t\t}\n\t\t}\n\t}\n\n\t// Last field might end at EOF.\n\tif start \u003e= 0 {\n\t\tspans = append(spans, span{start, len(s)})\n\t}\n\n\t// Create strings from recorded field indices.\n\ta := make([]string, len(spans))\n\tfor i, span := range spans {\n\t\ta[i] = s[span.start:span.end]\n\t}\n\n\treturn a\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "rune = int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unicode/graphic.go",
          "code_snippet": "func IsSpace(r rune) bool {\n\t// This property isn't the same as Z; special-case it.\n\tif uint32(r) \u003c= MaxLatin1 {\n\t\tswitch r {\n\t\tcase '\\t', '\\n', '\\v', '\\f', '\\r', ' ', 0x85, 0xA0:\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\treturn isExcludingLatin(White_Space, r)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func (tag StructTag) Lookup(key string) (value string, ok bool) {\n\t// When modifying this code, also update the validateStructTag code\n\t// in cmd/vet/structtag.go.\n\n\tfor tag != \"\" {\n\t\t// Skip leading space.\n\t\ti := 0\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] == ' ' {\n\t\t\ti++\n\t\t}\n\t\ttag = tag[i:]\n\t\tif tag == \"\" {\n\t\t\tbreak\n\t\t}\n\n\t\t// Scan to colon. A space, a quote or a control character is a syntax error.\n\t\t// Strictly speaking, control chars include the range [0x7f, 0x9f], not just\n\t\t// [0x00, 0x1f], but in practice, we ignore the multi-byte control characters\n\t\t// as it is simpler to inspect the tag's bytes than the tag's runes.\n\t\ti = 0\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] \u003e ' ' \u0026\u0026 tag[i] != ':' \u0026\u0026 tag[i] != '\"' \u0026\u0026 tag[i] != 0x7f {\n\t\t\ti++\n\t\t}\n\t\tif i == 0 || i+1 \u003e= len(tag) || tag[i] != ':' || tag[i+1] != '\"' {\n\t\t\tbreak\n\t\t}\n\t\tname := string(tag[:i])\n\t\ttag = tag[i+1:]\n\n\t\t// Scan quoted string to find value.\n\t\ti = 1\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] != '\"' {\n\t\t\tif tag[i] == '\\\\' {\n\t\t\t\ti++\n\t\t\t}\n\t\t\ti++\n\t\t}\n\t\tif i \u003e= len(tag) {\n\t\t\tbreak\n\t\t}\n\t\tqvalue := string(tag[:i+1])\n\t\ttag = tag[i+1:]\n\n\t\tif key == name {\n\t\t\tvalue, err := strconv.Unquote(qvalue)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn value, true\n\t\t}\n\t}\n\treturn \"\", false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/sort/sort.go",
          "code_snippet": "func Strings(x []string) { slices.Sort(x) }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        626,
        627,
        628,
        629,
        630,
        631,
        632,
        633,
        634,
        635,
        636,
        637,
        640,
        641,
        642,
        643,
        644,
        645
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/type.go:NewType",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_AddIndex"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "NewType",
      "signature": "NewType (c *Config, schema *load.Schema) (*Type, error)",
      "ground_truth": "func NewType(c *Config, schema *load.Schema) (*Type, error) {\n\tidType := c.IDType\n\tif idType == nil {\n\t\tidType = defaultIDType\n\t}\n\ttyp := \u0026Type{\n\t\tConfig:      c,\n\t\tschema:      schema,\n\t\tName:        schema.Name,\n\t\tAnnotations: schema.Annotations,\n\t\tFields:      make([]*Field, 0, len(schema.Fields)),\n\t\tfields:      make(map[string]*Field, len(schema.Fields)),\n\t\tforeignKeys: make(map[string]struct{}),\n\t}\n\tif !typ.IsView() {\n\t\ttyp.ID = \u0026Field{\n\t\t\tcfg:  c,\n\t\t\ttyp:  typ,\n\t\t\tName: \"id\",\n\t\t\tdef: \u0026load.Field{\n\t\t\t\tName: \"id\",\n\t\t\t},\n\t\t\tType:      idType,\n\t\t\tStructTag: structTag(\"id\", \"\"),\n\t\t}\n\t}\n\tif err := ValidSchemaName(typ.Name); err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, f := range schema.Fields {\n\t\ttf := \u0026Field{\n\t\t\tcfg:           c,\n\t\t\tdef:           f,\n\t\t\ttyp:           typ,\n\t\t\tName:          f.Name,\n\t\t\tType:          f.Info,\n\t\t\tUnique:        f.Unique,\n\t\t\tPosition:      f.Position,\n\t\t\tNillable:      f.Nillable,\n\t\t\tOptional:      f.Optional,\n\t\t\tDefault:       f.Default,\n\t\t\tUpdateDefault: f.UpdateDefault,\n\t\t\tImmutable:     f.Immutable,\n\t\t\tStructTag:     structTag(f.Name, f.Tag),\n\t\t\tValidators:    f.Validators,\n\t\t\tUserDefined:   true,\n\t\t\tAnnotations:   f.Annotations,\n\t\t}\n\t\tif err := typ.checkField(tf, f); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// User defined id field.\n\t\tif typ.ID != nil \u0026\u0026 tf.Name == typ.ID.Name {\n\t\t\tswitch {\n\t\t\tcase tf.Optional:\n\t\t\t\treturn nil, errors.New(\"id field cannot be optional\")\n\t\t\tcase f.ValueScanner:\n\t\t\t\treturn nil, errors.New(\"id field cannot have an external ValueScanner\")\n\t\t\t}\n\t\t\ttyp.ID = tf\n\t\t} else {\n\t\t\ttyp.Fields = append(typ.Fields, tf)\n\t\t\ttyp.fields[f.Name] = tf\n\t\t}\n\t}\n\treturn typ, nil\n}",
      "function_comment": "// NewType creates a new type and its fields from the given schema.",
      "function_statement": "// NewType creates a new type and its fields from the given schema.",
      "start_line": 210,
      "end_line": 276,
      "file_path": "./entc/gen/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Config struct {\n\t\t// Schema holds the Go package path for the user ent/schema.\n\t\t// For example, \"\u003cproject\u003e/ent/schema\".\n\t\tSchema string\n\n\t\t// Target defines the filepath for the target directory that\n\t\t// holds the generated code. For example, \"./project/ent\".\n\t\t//\n\t\t// By default, 'ent generate ./ent/schema' uses './ent' as a\n\t\t// target directory.\n\t\tTarget string\n\n\t\t// Package defines the Go package path of the target directory\n\t\t// mentioned above. For example, \"github.com/org/project/ent\".\n\t\t//\n\t\t// By default, for schema package named \"\u003cproject\u003e/ent/schema\",\n\t\t// 'ent generate' uses \"\u003cproject\u003e/ent\" as a default package.\n\t\tPackage string\n\n\t\t// Header allows users to provide an optional header signature for\n\t\t// the generated files. It defaults to the standard 'go generate'\n\t\t// format: '// Code generated by ent, DO NOT EDIT.'.\n\t\tHeader string\n\n\t\t// Storage configuration for the codegen. Defaults to sql.\n\t\tStorage *Storage\n\n\t\t// IDType specifies the type of the id field in the codegen.\n\t\t// The supported types are string and int, which also the default.\n\t\tIDType *field.TypeInfo\n\n\t\t// Templates specifies a list of alternative templates to execute or\n\t\t// to override the default. If nil, the default template is used.\n\t\t//\n\t\t// Note that, additional templates are executed on the Graph object and\n\t\t// the execution output is stored in a file derived by the template name.\n\t\tTemplates []*Template\n\n\t\t// Features defines a list of additional features to add to the codegen phase.\n\t\t// For example, the PrivacyFeature.\n\t\tFeatures []Feature\n\n\t\t// Hooks holds an optional list of Hooks to apply on the graph before/after the code-generation.\n\t\tHooks []Hook\n\n\t\t// Annotations that are injected to the Config object can be accessed\n\t\t// globally in all templates. In order to access an annotation from a\n\t\t// graph template, do the following:\n\t\t//\n\t\t//\t{{- with $.Annotations.GQL }}\n\t\t//\t\t{{/* Annotation usage goes here. */}}\n\t\t//\t{{- end }}\n\t\t//\n\t\t// For type templates, we access the Config field to access the global\n\t\t// annotations, and not the type-specific annotation.\n\t\t//\n\t\t//\t{{- with $.Config.Annotations.GQL }}\n\t\t//\t\t{{/* Annotation usage goes here. */}}\n\t\t//\t{{- end }}\n\t\t//\n\t\t// Note that the mapping is from the annotation-name (e.g. \"GQL\") to a JSON decoded object.\n\t\tAnnotations Annotations\n\n\t\t// BuildFlags holds a list of custom build flags to use\n\t\t// when loading the schema packages.\n\t\tBuildFlags []string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Schema struct {\n\tName         string         `json:\"name,omitempty\"`\n\tPos          string         `json:\"-\"`\n\tView         bool           `json:\"view,omitempty\"`\n\tConfig       ent.Config     `json:\"config,omitempty\"`\n\tEdges        []*Edge        `json:\"edges,omitempty\"`\n\tFields       []*Field       `json:\"fields,omitempty\"`\n\tIndexes      []*Index       `json:\"indexes,omitempty\"`\n\tHooks        []*Position    `json:\"hooks,omitempty\"`\n\tInterceptors []*Position    `json:\"interceptors,omitempty\"`\n\tPolicy       []*Position    `json:\"policy,omitempty\"`\n\tAnnotations  map[string]any `json:\"annotations,omitempty\"`\n}",
          "ref_module": "load"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "defaultIDType = \u0026field.TypeInfo{Type: field.TypeInt}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Field struct {\n\t\tcfg *Config\n\t\tdef *load.Field\n\t\ttyp *Type\n\t\t// Name is the name of this field in the database schema.\n\t\tName string\n\t\t// Type holds the type information of the field.\n\t\tType *field.TypeInfo\n\t\t// Unique indicate if this field is a unique field.\n\t\tUnique bool\n\t\t// Optional indicates is this field is optional on create.\n\t\tOptional bool\n\t\t// Nillable indicates that this field can be null in the\n\t\t// database and pointer in the generated entities.\n\t\tNillable bool\n\t\t// Default indicates if this field has a default value for creation.\n\t\tDefault bool\n\t\t// Enums information for enum fields.\n\t\tEnums []Enum\n\t\t// UpdateDefault indicates if this field has a default value for update.\n\t\tUpdateDefault bool\n\t\t// Immutable indicates is this field cannot be updated.\n\t\tImmutable bool\n\t\t// StructTag of the field. default to \"json\".\n\t\tStructTag string\n\t\t// Validators holds the number of validators the field have.\n\t\tValidators int\n\t\t// Position info of the field.\n\t\tPosition *load.Position\n\t\t// UserDefined indicates that this field was defined explicitly by the user in\n\t\t// the schema. Unlike the default id field, which is defined by the generator.\n\t\tUserDefined bool\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// referenced foreign-key.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) IsView() bool {\n\treturn t.schema != nil \u0026\u0026 t.schema.View\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Field struct {\n\tName             string                  `json:\"name,omitempty\"`\n\tInfo             *field.TypeInfo         `json:\"type,omitempty\"`\n\tValueScanner     bool                    `json:\"value_scanner,omitempty\"`\n\tTag              string                  `json:\"tag,omitempty\"`\n\tSize             *int64                  `json:\"size,omitempty\"`\n\tEnums            []struct{ N, V string } `json:\"enums,omitempty\"`\n\tUnique           bool                    `json:\"unique,omitempty\"`\n\tNillable         bool                    `json:\"nillable,omitempty\"`\n\tOptional         bool                    `json:\"optional,omitempty\"`\n\tDefault          bool                    `json:\"default,omitempty\"`\n\tDefaultValue     any                     `json:\"default_value,omitempty\"`\n\tDefaultKind      reflect.Kind            `json:\"default_kind,omitempty\"`\n\tUpdateDefault    bool                    `json:\"update_default,omitempty\"`\n\tImmutable        bool                    `json:\"immutable,omitempty\"`\n\tValidators       int                     `json:\"validators,omitempty\"`\n\tStorageKey       string                  `json:\"storage_key,omitempty\"`\n\tPosition         *Position               `json:\"position,omitempty\"`\n\tSensitive        bool                    `json:\"sensitive,omitempty\"`\n\tSchemaType       map[string]string       `json:\"schema_type,omitempty\"`\n\tAnnotations      map[string]any          `json:\"annotations,omitempty\"`\n\tComment          string                  `json:\"comment,omitempty\"`\n\tDeprecated       bool                    `json:\"deprecated,omitempty\"`\n\tDeprecatedReason string                  `json:\"deprecated_reason,omitempty\"`\n}",
          "ref_module": "load"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func structTag(name, tag string) string {\n\tt := fmt.Sprintf(`json:\"%s,omitempty\"`, name)\n\tif tag == \"\" {\n\t\treturn t\n\t}\n\tif _, ok := reflect.StructTag(tag).Lookup(\"json\"); !ok {\n\t\ttag = t + \" \" + tag\n\t}\n\treturn tag\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func ValidSchemaName(name string) error {\n\t// Schema package is lower-cased (see Type.Package).\n\tpkg := strings.ToLower(name)\n\tif token.Lookup(pkg).IsKeyword() {\n\t\treturn fmt.Errorf(\"schema lowercase name conflicts with Go keyword %q\", pkg)\n\t}\n\tif types.Universe.Lookup(pkg) != nil {\n\t\treturn fmt.Errorf(\"schema lowercase name conflicts with Go predeclared identifier %q\", pkg)\n\t}\n\tif _, ok := globalIdent[pkg]; ok {\n\t\treturn fmt.Errorf(\"schema lowercase name conflicts ent predeclared identifier %q\", pkg)\n\t}\n\tif _, ok := globalIdent[name]; ok {\n\t\treturn fmt.Errorf(\"schema name conflicts with ent predeclared identifier %q\", name)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t *Type) checkField(tf *Field, f *load.Field) (err error) {\n\tswitch ant := tf.EntSQL(); {\n\tcase f.Name == \"\":\n\t\terr = fmt.Errorf(\"field name cannot be empty\")\n\tcase f.Info == nil || !f.Info.Valid():\n\t\terr = fmt.Errorf(\"invalid type for field %s\", f.Name)\n\tcase f.Unique \u0026\u0026 f.Default \u0026\u0026 f.DefaultKind != reflect.Func:\n\t\terr = fmt.Errorf(\"unique field %q cannot have default value\", f.Name)\n\tcase t.fields[f.Name] != nil:\n\t\terr = fmt.Errorf(\"field %q redeclared for type %q\", f.Name, t.Name)\n\tcase f.Sensitive \u0026\u0026 f.Tag != \"\":\n\t\terr = fmt.Errorf(\"sensitive field %q cannot have struct tags\", f.Name)\n\tcase f.Info.Type == field.TypeEnum:\n\t\tif tf.Enums, err = tf.enums(f); err == nil \u0026\u0026 !tf.HasGoType() {\n\t\t\t// Enum types should be named as follows: typepkg.Field.\n\t\t\tf.Info.Ident = fmt.Sprintf(\"%s.%s\", t.PackageDir(), pascal(f.Name))\n\t\t}\n\tcase tf.Validators \u003e 0 \u0026\u0026 !tf.ConvertedToBasic() \u0026\u0026 f.Info.Type != field.TypeJSON:\n\t\terr = fmt.Errorf(\"GoType %q for field %q must be converted to the basic %q type for validators\", tf.Type, f.Name, tf.Type.Type)\n\tcase ant != nil \u0026\u0026 ant.Default != \"\" \u0026\u0026 (ant.DefaultExpr != \"\" || ant.DefaultExprs != nil):\n\t\terr = fmt.Errorf(\"field %q cannot have both default value and default expression annotations\", f.Name)\n\tcase tf.HasValueScanner() \u0026\u0026 tf.IsJSON():\n\t\terr = fmt.Errorf(\"json field %q cannot have an external ValueScanner\", f.Name)\n\t}\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        262,
        263,
        264,
        265,
        270,
        271,
        272,
        273,
        275
      ],
      "cover_details": {
        "line_cover_rate": 0.8955223880597015
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:snake",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Label"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Table"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_AddIndex"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "snake",
      "signature": "snake (s string) string",
      "ground_truth": "func snake(s string) string {\n\tvar (\n\t\tj int\n\t\tb strings.Builder\n\t)\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tr := rune(s[i])\n\t\t// Put '_' if it is not a start or end of a word, current letter is uppercase,\n\t\t// and previous is lowercase (cases like: \"UserInfo\"), or next letter is also\n\t\t// a lowercase and previous letter is not \"_\".\n\t\tif i \u003e 0 \u0026\u0026 i \u003c len(s)-1 \u0026\u0026 unicode.IsUpper(r) {\n\t\t\tif unicode.IsLower(rune(s[i-1])) ||\n\t\t\t\tj != i-1 \u0026\u0026 unicode.IsLower(rune(s[i+1])) \u0026\u0026 unicode.IsLetter(rune(s[i-1])) {\n\t\t\t\tj = i\n\t\t\t\tb.WriteString(\"_\")\n\t\t\t}\n\t\t}\n\t\tb.WriteRune(unicode.ToLower(r))\n\t}\n\treturn b.String()\n}",
      "function_comment": "// snake converts the given struct or field name into a snake_case.\n//\n//\tUsername =\u003e username\n//\tFullName =\u003e full_name\n//\tHTTPCode =\u003e http_code",
      "function_statement": "// snake converts the given struct or field name into a snake_case.\n//\n//\tUsername =\u003e username\n//\tFullName =\u003e full_name\n//\tHTTPCode =\u003e http_code",
      "start_line": 207,
      "end_line": 227,
      "file_path": "./entc/gen/func.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "rune = int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unicode/letter.go",
          "code_snippet": "func IsUpper(r rune) bool {\n\t// See comment in IsGraphic.\n\tif uint32(r) \u003c= MaxLatin1 {\n\t\treturn properties[uint8(r)]\u0026pLmask == pLu\n\t}\n\treturn isExcludingLatin(Upper, r)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unicode/letter.go",
          "code_snippet": "func IsLower(r rune) bool {\n\t// See comment in IsGraphic.\n\tif uint32(r) \u003c= MaxLatin1 {\n\t\treturn properties[uint8(r)]\u0026pLmask == pLl\n\t}\n\treturn isExcludingLatin(Lower, r)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unicode/graphic.go",
          "code_snippet": "func IsLetter(r rune) bool {\n\tif uint32(r) \u003c= MaxLatin1 {\n\t\treturn properties[uint8(r)]\u0026(pLmask) != 0\n\t}\n\treturn isExcludingLatin(Letter, r)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteRune(r rune) (int, error) {\n\tb.copyCheck()\n\tn := len(b.buf)\n\tb.buf = utf8.AppendRune(b.buf, r)\n\treturn len(b.buf) - n, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unicode/letter.go",
          "code_snippet": "func ToLower(r rune) rune {\n\tif r \u003c= MaxASCII {\n\t\tif 'A' \u003c= r \u0026\u0026 r \u003c= 'Z' {\n\t\t\tr += 'a' - 'A'\n\t\t}\n\t\treturn r\n\t}\n\treturn To(LowerCase, r)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        224,
        226
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:EncoderOfRegistered",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "EncoderOfRegistered",
      "signature": "(encodeExtension) EncoderOfRegistered (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) EncoderOfRegistered(typ reflect2.Type) jsoniter.ValEncoder {\n\tenc := typeEncoders[typ.String()]\n\tif enc != nil {\n\t\treturn registeredEncoder{enc}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tenc := typeEncoders[ptrType.Elem().String()]\n\t\tif enc != nil {\n\t\t\treturn registeredEncoder{\n\t\t\t\tValEncoder: \u0026jsoniter.OptionalEncoder{\n\t\t\t\t\tValueEncoder: enc,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// EncoderOfRegistered returns a value encoder of a registered type.",
      "function_statement": "// EncoderOfRegistered returns a value encoder of a registered type.",
      "start_line": 32,
      "end_line": 49,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "typeEncoders = map[string]jsoniter.ValEncoder{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "registeredEncoder struct{ jsoniter.ValEncoder }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "PtrType interface {\n\tType\n\tElem() Type\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_optional.go",
          "code_snippet": "OptionalEncoder struct {\n\tValueEncoder ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:ValueIsNull",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "ValueIsNull",
      "signature": "ValueIsNull (column string, opts ...Option) *sql.Predicate",
      "ground_truth": "func ValueIsNull(column string, opts ...Option) *sql.Predicate {\n\treturn sql.P(func(b *sql.Builder) {\n\t\tswitch b.Dialect() {\n\t\tcase dialect.MySQL:\n\t\t\tpath := identPath(column, opts...)\n\t\t\tb.WriteString(\"JSON_CONTAINS\").Wrap(func(b *sql.Builder) {\n\t\t\t\tb.Ident(column).Comma()\n\t\t\t\tb.WriteString(\"'null'\").Comma()\n\t\t\t\tpath.mysqlPath(b)\n\t\t\t})\n\t\tcase dialect.Postgres:\n\t\t\tvaluePath(b, column, append(opts, Cast(\"jsonb\"))...)\n\t\t\tb.WriteOp(sql.OpEQ).WriteString(\"'null'::jsonb\")\n\t\tcase dialect.SQLite:\n\t\t\tpath := identPath(column, opts...)\n\t\t\tpath.mysqlFunc(\"JSON_TYPE\", b)\n\t\t\tb.WriteOp(sql.OpEQ).WriteString(\"'null'\")\n\t\t}\n\t})\n}",
      "function_comment": "// ValueIsNull return a predicate for checking that a JSON value\n// (returned by the path) is a null literal (JSON \"null\").\n//\n// In order to check if the column is NULL (database NULL), or if\n// the JSON key exists, use sql.IsNull or sqljson.HasKey.\n//\n//\tsqljson.ValueIsNull(\"a\", sqljson.Path(\"b\"))",
      "function_statement": "// ValueIsNull return a predicate for checking that a JSON value\n// (returned by the path) is a null literal (JSON \"null\").\n//\n// In order to check if the column is NULL (database NULL), or if\n// the JSON key exists, use sql.IsNull or sqljson.HasKey.\n//\n//\tsqljson.ValueIsNull(\"a\", sqljson.Path(\"b\"))",
      "start_line": 45,
      "end_line": 64,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "Option func(*PathOptions)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Predicate struct {\n\tBuilder\n\tdepth int\n\tfns   []func(*Builder)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func P(fns ...func(*Builder)) *Predicate {\n\treturn \u0026Predicate{fns: fns}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "MySQL    = \"mysql\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func identPath(ident string, opts ...Option) *PathOptions {\n\tpath := \u0026PathOptions{Ident: ident}\n\tfor i := range opts {\n\t\topts[i](path)\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Wrap(f func(*Builder)) *Builder {\n\tnb := \u0026Builder{dialect: b.dialect, total: b.total, sb: \u0026strings.Builder{}}\n\tnb.WriteByte('(')\n\tf(nb)\n\tnb.WriteByte(')')\n\tb.WriteString(nb.String())\n\tb.args = append(b.args, nb.args...)\n\tb.total = nb.total\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Comma() *Builder {\n\treturn b.WriteString(\", \")\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlPath(b *sql.Builder) {\n\tb.WriteString(`'$`)\n\tfor _, p := range p.Path {\n\t\tswitch _, isIndex := isJSONIdx(p); {\n\t\tcase isIndex:\n\t\t\tb.WriteString(p)\n\t\tcase p == \"*\" || isQuoted(p) || isIdentifier(p):\n\t\t\tb.WriteString(\".\" + p)\n\t\tdefault:\n\t\t\tb.WriteString(`.\"` + p + `\"`)\n\t\t}\n\t}\n\tb.WriteByte('\\'')\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "Postgres = \"postgres\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func valuePath(b *sql.Builder, column string, opts ...Option) {\n\tpath := identPath(column, opts...)\n\tpath.value(b)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func Cast(typ string) Option {\n\treturn func(p *PathOptions) {\n\t\tp.Cast = typ\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpEQ      Op = iota",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "SQLite   = \"sqlite3\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlFunc(fn string, b *sql.Builder) {\n\tb.WriteString(fn).WriteByte('(')\n\tb.Ident(p.Ident).Comma()\n\tp.mysqlPath(b)\n\tb.WriteByte(')')\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61
      ],
      "cover_details": {
        "line_cover_rate": 0.85
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:hasExternalEdges",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestCreateNode"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestUpdateNodes"
        }
      ],
      "name": "hasExternalEdges",
      "signature": "hasExternalEdges (addEdges, clearEdges map[Rel][]*EdgeSpec) bool",
      "ground_truth": "func hasExternalEdges(addEdges, clearEdges map[Rel][]*EdgeSpec) bool {\n\t// M2M edges reside in a join-table, and O2M edges reside\n\t// in the M2O table (the entity that holds the FK).\n\tif len(clearEdges[M2M]) \u003e 0 || len(addEdges[M2M]) \u003e 0 ||\n\t\tlen(clearEdges[O2M]) \u003e 0 || len(addEdges[O2M]) \u003e 0 {\n\t\treturn true\n\t}\n\tfor _, edges := range [][]*EdgeSpec{clearEdges[O2O], addEdges[O2O]} {\n\t\tfor _, e := range edges {\n\t\t\tif !e.Inverse {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}",
      "function_comment": "// The common operations shared between the different builders.\n//\n// M2M edges reside in join tables and require INSERT and DELETE\n// queries for adding or removing edges respectively.\n//\n// O2M and non-inverse O2O edges also reside in external tables,",
      "function_statement": "// The common operations shared between the different builders.\n//\n// M2M edges reside in join tables and require INSERT and DELETE\n// queries for adding or removing edges respectively.\n//\n// O2M and non-inverse O2O edges also reside in external tables,",
      "start_line": 1853,
      "end_line": 1868,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "EdgeSpec struct {\n\t\tRel     Rel\n\t\tInverse bool\n\t\tTable   string\n\t\tSchema  string\n\t\tColumns []string\n\t\tBidi    bool        // bidirectional edge.\n\t\tTarget  *EdgeTarget // target nodes.\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "Rel int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "M2M",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "O2M",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "O2O",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1853,
        1854,
        1855,
        1856,
        1857,
        1858,
        1859,
        1860,
        1861,
        1862,
        1863,
        1864,
        1867
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "entgo.io/ent/entc/load/schema.go:NewEdge",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalSchema"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalMixin"
        }
      ],
      "name": "NewEdge",
      "signature": "NewEdge (ed *edge.Descriptor) *Edge",
      "ground_truth": "func NewEdge(ed *edge.Descriptor) *Edge {\n\tne := \u0026Edge{\n\t\tTag:         ed.Tag,\n\t\tType:        ed.Type,\n\t\tName:        ed.Name,\n\t\tField:       ed.Field,\n\t\tUnique:      ed.Unique,\n\t\tInverse:     ed.Inverse,\n\t\tRequired:    ed.Required,\n\t\tImmutable:   ed.Immutable,\n\t\tRefName:     ed.RefName,\n\t\tThrough:     ed.Through,\n\t\tStorageKey:  ed.StorageKey,\n\t\tComment:     ed.Comment,\n\t\tAnnotations: make(map[string]any),\n\t}\n\tfor _, at := range ed.Annotations {\n\t\tne.addAnnotation(at)\n\t}\n\tif ref := ed.Ref; ref != nil {\n\t\tne.Ref = NewEdge(ref)\n\t\tne.StorageKey = ne.Ref.StorageKey\n\t}\n\treturn ne\n}",
      "function_comment": "// NewEdge creates an loaded edge from edge descriptor.",
      "function_statement": "// NewEdge creates an loaded edge from edge descriptor.",
      "start_line": 96,
      "end_line": 120,
      "file_path": "./entc/load/schema.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/edge/edge.go",
          "code_snippet": "Descriptor struct {\n\tTag         string                 // struct tag.\n\tType        string                 // edge type.\n\tName        string                 // edge name.\n\tField       string                 // edge field name (e.g. foreign-key).\n\tRefName     string                 // ref name; inverse only.\n\tRef         *Descriptor            // edge reference; to/from of the same type.\n\tThrough     *struct{ N, T string } // through type and name.\n\tUnique      bool                   // unique edge.\n\tInverse     bool                   // inverse edge.\n\tRequired    bool                   // required on creation.\n\tImmutable   bool                   // create only edge.\n\tStorageKey  *StorageKey            // optional storage-key configuration.\n\tAnnotations []schema.Annotation    // edge annotations.\n\tComment     string                 // edge comment.\n}",
          "ref_module": "edge"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Edge struct {\n\tName        string                 `json:\"name,omitempty\"`\n\tType        string                 `json:\"type,omitempty\"`\n\tTag         string                 `json:\"tag,omitempty\"`\n\tField       string                 `json:\"field,omitempty\"`\n\tRefName     string                 `json:\"ref_name,omitempty\"`\n\tRef         *Edge                  `json:\"ref,omitempty\"`\n\tThrough     *struct{ N, T string } `json:\"through,omitempty\"`\n\tUnique      bool                   `json:\"unique,omitempty\"`\n\tInverse     bool                   `json:\"inverse,omitempty\"`\n\tRequired    bool                   `json:\"required,omitempty\"`\n\tImmutable   bool                   `json:\"immutable,omitempty\"`\n\tStorageKey  *edge.StorageKey       `json:\"storage_key,omitempty\"`\n\tAnnotations map[string]any         `json:\"annotations,omitempty\"`\n\tComment     string                 `json:\"comment,omitempty\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "func (e *Edge) addAnnotation(an schema.Annotation) {\n\taddAnnotation(e.Annotations, an)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119
      ],
      "cover_details": {
        "line_cover_rate": 0.96
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:UUID",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_UUID"
        }
      ],
      "name": "UUID",
      "signature": "UUID (name string, typ driver.Valuer) *uuidBuilder",
      "ground_truth": "func UUID(name string, typ driver.Valuer) *uuidBuilder {\n\trt := reflect.TypeOf(typ)\n\tb := \u0026uuidBuilder{\u0026Descriptor{\n\t\tName: name,\n\t\tInfo: \u0026TypeInfo{\n\t\t\tType:    TypeUUID,\n\t\t\tIdent:   rt.String(),\n\t\t\tPkgPath: indirect(rt).PkgPath(),\n\t\t},\n\t}}\n\tb.desc.goType(typ)\n\treturn b\n}",
      "function_comment": "// UUID returns a new Field with type UUID. An example for defining UUID field is as follows:\n//\n//\tfield.UUID(\"id\", uuid.New())",
      "function_statement": "// UUID returns a new Field with type UUID. An example for defining UUID field is as follows:\n//\n//\tfield.UUID(\"id\", uuid.New())",
      "start_line": 152,
      "end_line": 164,
      "file_path": "./schema/field/field.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "uuidBuilder struct {\n\tdesc *Descriptor\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "Descriptor struct {\n\tTag              string                  // struct tag.\n\tSize             int                     // varchar size.\n\tName             string                  // field name.\n\tInfo             *TypeInfo               // field type info.\n\tValueScanner     any                     // custom field codec.\n\tUnique           bool                    // unique index of field.\n\tNillable         bool                    // nillable struct field.\n\tOptional         bool                    // nullable field in database.\n\tImmutable        bool                    // create only field.\n\tDefault          any                     // default value on create.\n\tUpdateDefault    any                     // default value on update.\n\tValidators       []any                   // validator functions.\n\tStorageKey       string                  // sql column or gremlin property.\n\tEnums            []struct{ N, V string } // enum values.\n\tSensitive        bool                    // sensitive info string field.\n\tSchemaType       map[string]string       // override the schema type.\n\tAnnotations      []schema.Annotation     // field annotations.\n\tComment          string                  // field comment.\n\tDeprecated       bool                    // mark the field as deprecated.\n\tDeprecatedReason string                  // deprecation reason.\n\tErr              error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInfo struct {\n\tType     Type\n\tIdent    string\n\tPkgPath  string // import path.\n\tPkgName  string // local package name.\n\tNillable bool   // slices or pointers.\n\tRType    *RType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUUID",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func indirect(t reflect.Type) reflect.Type {\n\tfor t.Kind() == reflect.Ptr {\n\t\tt = t.Elem()\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func (d *Descriptor) goType(typ any) {\n\tt := reflect.TypeOf(typ)\n\ttv := indirect(t)\n\tinfo := \u0026TypeInfo{\n\t\tType:    d.Info.Type,\n\t\tIdent:   t.String(),\n\t\tPkgPath: tv.PkgPath(),\n\t\tPkgName: pkgName(tv.String()),\n\t\tRType: \u0026RType{\n\t\t\trtype:   t,\n\t\t\tKind:    t.Kind(),\n\t\t\tName:    tv.Name(),\n\t\t\tIdent:   tv.String(),\n\t\t\tPkgPath: tv.PkgPath(),\n\t\t\tMethods: make(map[string]struct{ In, Out []*RType }, t.NumMethod()),\n\t\t},\n\t}\n\tmethods(t, info.RType)\n\tswitch t.Kind() {\n\tcase reflect.Slice, reflect.Ptr, reflect.Map:\n\t\tinfo.Nillable = true\n\t}\n\td.Info = info\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/database/sql/driver/types.go",
          "code_snippet": "Valuer interface {\n\t// Value returns a driver Value.\n\t// Value must not panic.\n\tValue() (Value, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:ValueContains",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "ValueContains",
      "signature": "ValueContains (column string, arg any, opts ...Option) *sql.Predicate",
      "ground_truth": "func ValueContains(column string, arg any, opts ...Option) *sql.Predicate {\n\treturn sql.P(func(b *sql.Builder) {\n\t\tpath := identPath(column, opts...)\n\t\tswitch b.Dialect() {\n\t\tcase dialect.MySQL:\n\t\t\tb.WriteString(\"JSON_CONTAINS\").Wrap(func(b *sql.Builder) {\n\t\t\t\tb.Ident(column).Comma()\n\t\t\t\tb.Arg(marshalArg(arg)).Comma()\n\t\t\t\tpath.mysqlPath(b)\n\t\t\t})\n\t\t\tb.WriteOp(sql.OpEQ).Arg(1)\n\t\tcase dialect.SQLite:\n\t\t\tb.WriteString(\"EXISTS\").Wrap(func(b *sql.Builder) {\n\t\t\t\tb.WriteString(\"SELECT * FROM JSON_EACH\").Wrap(func(b *sql.Builder) {\n\t\t\t\t\tb.Ident(column).Comma()\n\t\t\t\t\tpath.mysqlPath(b)\n\t\t\t\t})\n\t\t\t\tb.WriteString(\" WHERE \").Ident(\"value\").WriteOp(sql.OpEQ).Arg(arg)\n\t\t\t})\n\t\tcase dialect.Postgres:\n\t\t\topts = normalizePG(b, arg, opts)\n\t\t\tpath.Cast = \"jsonb\"\n\t\t\tpath.value(b)\n\t\t\tb.WriteString(\" @\u003e \").Arg(marshalArg(arg))\n\t\t}\n\t})\n}",
      "function_comment": "// ValueContains return a predicate for checking that a JSON\n// value (returned by the path) contains the given argument.\n//\n//\tsqljson.ValueContains(\"a\", 1, sqljson.Path(\"b\"))",
      "function_statement": "// ValueContains return a predicate for checking that a JSON\n// value (returned by the path) contains the given argument.\n//\n//\tsqljson.ValueContains(\"a\", 1, sqljson.Path(\"b\"))",
      "start_line": 175,
      "end_line": 201,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "Option func(*PathOptions)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Predicate struct {\n\tBuilder\n\tdepth int\n\tfns   []func(*Builder)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func P(fns ...func(*Builder)) *Predicate {\n\treturn \u0026Predicate{fns: fns}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func identPath(ident string, opts ...Option) *PathOptions {\n\tpath := \u0026PathOptions{Ident: ident}\n\tfor i := range opts {\n\t\topts[i](path)\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "MySQL    = \"mysql\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Wrap(f func(*Builder)) *Builder {\n\tnb := \u0026Builder{dialect: b.dialect, total: b.total, sb: \u0026strings.Builder{}}\n\tnb.WriteByte('(')\n\tf(nb)\n\tnb.WriteByte(')')\n\tb.WriteString(nb.String())\n\tb.args = append(b.args, nb.args...)\n\tb.total = nb.total\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Comma() *Builder {\n\treturn b.WriteString(\", \")\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Arg(a any) *Builder {\n\tswitch v := a.(type) {\n\tcase nil:\n\t\tb.WriteString(\"NULL\")\n\t\treturn b\n\tcase *raw:\n\t\tb.WriteString(v.s)\n\t\treturn b\n\tcase Querier:\n\t\tb.Join(v)\n\t\treturn b\n\t}\n\t// Default placeholder param (MySQL and SQLite).\n\tformat := \"?\"\n\tif b.postgres() {\n\t\t// Postgres' arguments are referenced using the syntax $n.\n\t\t// $1 refers to the 1st argument, $2 to the 2nd, and so on.\n\t\tformat = \"$\" + strconv.Itoa(b.total+1)\n\t}\n\tif f, ok := a.(ParamFormatter); ok {\n\t\tformat = f.FormatParam(format, \u0026StmtInfo{\n\t\t\tDialect: b.dialect,\n\t\t})\n\t}\n\treturn b.Argf(format, a)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func marshalArg(arg any) any {\n\tif buf, err := json.Marshal(arg); err == nil {\n\t\targ = string(buf)\n\t}\n\treturn arg\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlPath(b *sql.Builder) {\n\tb.WriteString(`'$`)\n\tfor _, p := range p.Path {\n\t\tswitch _, isIndex := isJSONIdx(p); {\n\t\tcase isIndex:\n\t\t\tb.WriteString(p)\n\t\tcase p == \"*\" || isQuoted(p) || isIdentifier(p):\n\t\t\tb.WriteString(\".\" + p)\n\t\tdefault:\n\t\t\tb.WriteString(`.\"` + p + `\"`)\n\t\t}\n\t}\n\tb.WriteByte('\\'')\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpEQ      Op = iota",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "SQLite   = \"sqlite3\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "Postgres = \"postgres\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func normalizePG(b *sql.Builder, arg any, opts []Option) []Option {\n\tif b.Dialect() != dialect.Postgres {\n\t\treturn opts\n\t}\n\tbase := []Option{Unquote(true)}\n\tswitch arg.(type) {\n\tcase string:\n\tcase bool:\n\t\tbase = append(base, Cast(\"bool\"))\n\tcase float32, float64:\n\t\tbase = append(base, Cast(\"float\"))\n\tcase int8, int16, int32, int64, int, uint8, uint16, uint32, uint64:\n\t\tbase = append(base, Cast(\"int\"))\n\t}\n\treturn append(base, opts...)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "PathOptions struct {\n\tIdent   string\n\tPath    []string\n\tCast    string\n\tUnquote bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) value(b *sql.Builder) {\n\tswitch {\n\tcase len(p.Path) == 0:\n\t\tb.Ident(p.Ident)\n\tcase b.Dialect() == dialect.Postgres:\n\t\tif p.Cast != \"\" {\n\t\t\tb.WriteByte('(')\n\t\t\tdefer b.WriteString(\")::\" + p.Cast)\n\t\t}\n\t\tp.pgTextPath(b)\n\tdefault:\n\t\tif p.Unquote \u0026\u0026 b.Dialect() == dialect.MySQL {\n\t\t\tb.WriteString(\"JSON_UNQUOTE(\")\n\t\t\tdefer b.WriteByte(')')\n\t\t}\n\t\tp.mysqlFunc(\"JSON_EXTRACT\", b)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        194,
        195,
        196,
        197,
        198
      ],
      "cover_details": {
        "line_cover_rate": 0.8518518518518519
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/builder.go:Clone",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestBuilderContext"
        }
      ],
      "name": "Clone",
      "signature": "(s *Selector) Clone () *Selector",
      "ground_truth": "func (s *Selector) Clone() *Selector {\n\tif s == nil {\n\t\treturn nil\n\t}\n\tjoins := make([]join, len(s.joins))\n\tfor i := range s.joins {\n\t\tjoins[i] = s.joins[i].clone()\n\t}\n\treturn \u0026Selector{\n\t\tBuilder:   s.Builder.clone(),\n\t\tctx:       s.ctx,\n\t\tas:        s.as,\n\t\tor:        s.or,\n\t\tnot:       s.not,\n\t\tfrom:      s.from,\n\t\tlimit:     s.limit,\n\t\toffset:    s.offset,\n\t\tdistinct:  s.distinct,\n\t\twhere:     s.where.clone(),\n\t\thaving:    s.having.clone(),\n\t\tjoins:     append([]join{}, joins...),\n\t\tgroup:     append([]string{}, s.group...),\n\t\torder:     append([]any{}, s.order...),\n\t\tselection: append([]selection{}, s.selection...),\n\t}\n}",
      "function_comment": "// Clone returns a duplicate of the selector, including all associated steps. It can be\n// used to prepare common SELECT statements and use them differently after the clone is made.",
      "function_statement": "// Clone returns a duplicate of the selector, including all associated steps. It can be\n// used to prepare common SELECT statements and use them differently after the clone is made.",
      "start_line": 2390,
      "end_line": 2415,
      "file_path": "./dialect/sql/builder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "join struct {\n\ton    *Predicate\n\tkind  string\n\ttable TableView\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (j join) clone() join {\n\tif sel, ok := j.table.(*Selector); ok {\n\t\tj.table = sel.Clone()\n\t}\n\tj.on = j.on.clone()\n\treturn j\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) clone() Builder {\n\tc := Builder{dialect: b.dialect, total: b.total, sb: \u0026strings.Builder{}}\n\tif len(b.args) \u003e 0 {\n\t\tc.args = append(c.args, b.args...)\n\t}\n\tif b.sb != nil {\n\t\tc.sb.WriteString(b.sb.String())\n\t}\n\treturn c\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (p *Predicate) clone() *Predicate {\n\tif p == nil {\n\t\treturn p\n\t}\n\treturn \u0026Predicate{fns: append([]func(*Builder){}, p.fns...)}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "selection struct {\n\tx  Querier\n\tc  string\n\tas string\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        2390,
        2391,
        2394,
        2395,
        2398,
        2399,
        2400,
        2401,
        2402,
        2403,
        2404,
        2405,
        2406,
        2407,
        2408,
        2409,
        2410,
        2411,
        2412,
        2413,
        2414
      ],
      "cover_details": {
        "line_cover_rate": 0.8076923076923077
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:HasKey",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "HasKey",
      "signature": "HasKey (column string, opts ...Option) *sql.Predicate",
      "ground_truth": "func HasKey(column string, opts ...Option) *sql.Predicate {\n\treturn sql.P(func(b *sql.Builder) {\n\t\tswitch b.Dialect() {\n\t\tcase dialect.SQLite:\n\t\t\t// JSON_TYPE returns NULL in case the path selects an element\n\t\t\t// that does not exist. See: https://sqlite.org/json1.html#jtype.\n\t\t\tpath := identPath(column, opts...)\n\t\t\tpath.mysqlFunc(\"JSON_TYPE\", b)\n\t\t\tb.WriteOp(sql.OpNotNull)\n\t\tdefault:\n\t\t\tvaluePath(b, column, opts...)\n\t\t\tb.WriteOp(sql.OpNotNull)\n\t\t}\n\t})\n}",
      "function_comment": "// HasKey return a predicate for checking that a JSON key\n// exists and not NULL.\n//\n//\tsqljson.HasKey(\"column\", sql.DotPath(\"a.b[2].c\"))",
      "function_statement": "// HasKey return a predicate for checking that a JSON key\n// exists and not NULL.\n//\n//\tsqljson.HasKey(\"column\", sql.DotPath(\"a.b[2].c\"))",
      "start_line": 22,
      "end_line": 36,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "Option func(*PathOptions)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Predicate struct {\n\tBuilder\n\tdepth int\n\tfns   []func(*Builder)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func P(fns ...func(*Builder)) *Predicate {\n\treturn \u0026Predicate{fns: fns}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "SQLite   = \"sqlite3\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func identPath(ident string, opts ...Option) *PathOptions {\n\tpath := \u0026PathOptions{Ident: ident}\n\tfor i := range opts {\n\t\topts[i](path)\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlFunc(fn string, b *sql.Builder) {\n\tb.WriteString(fn).WriteByte('(')\n\tb.Ident(p.Ident).Comma()\n\tp.mysqlPath(b)\n\tb.WriteByte(')')\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpNotNull",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func valuePath(b *sql.Builder, column string, opts ...Option) {\n\tpath := identPath(column, opts...)\n\tpath.value(b)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/graph/valuemap.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/graph",
          "rel_file_path": "dialect/gremlin/graph/valuemap_test.go",
          "func_name": "TestValueMapDecodeBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/graph",
          "rel_file_path": "dialect/gremlin/graph/valuemap_test.go",
          "func_name": "TestValueMapDecodeOne"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/graph",
          "rel_file_path": "dialect/gremlin/graph/valuemap_test.go",
          "func_name": "TestValueMapDecodeMany"
        }
      ],
      "name": "Decode",
      "signature": "(m ValueMap) Decode (v any) error",
      "ground_truth": "func (m ValueMap) Decode(v any) error {\n\trv := reflect.ValueOf(v)\n\tif rv.Kind() != reflect.Ptr {\n\t\treturn errors.New(\"cannot unmarshal into a non pointer\")\n\t}\n\tif rv.IsNil() {\n\t\treturn errors.New(\"cannot unmarshal into a nil pointer\")\n\t}\n\n\tif rv.Elem().Kind() != reflect.Slice {\n\t\tv = \u0026[]any{v}\n\t}\n\treturn m.decode(v)\n}",
      "function_comment": "// Decode decodes a value map into v.",
      "function_statement": "// Decode decodes a value map into v.",
      "start_line": 19,
      "end_line": 32,
      "file_path": "./dialect/gremlin/graph/valuemap.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/valuemap.go",
          "code_snippet": "ValueMap []map[string]any",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/valuemap.go",
          "code_snippet": "func (m ValueMap) decode(v any) error {\n\tcfg := mapstructure.DecoderConfig{\n\t\tDecodeHook: func(f, t reflect.Kind, data any) (any, error) {\n\t\t\tif f == reflect.Slice \u0026\u0026 t != reflect.Slice {\n\t\t\t\trv := reflect.ValueOf(data)\n\t\t\t\tif rv.Len() == 1 {\n\t\t\t\t\tdata = rv.Index(0).Interface()\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data, nil\n\t\t},\n\t\tResult:  v,\n\t\tTagName: \"json\",\n\t}\n\n\tdec, err := mapstructure.NewDecoder(\u0026cfg)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating structure decoder: %w\", err)\n\t}\n\tif err := dec.Decode(m); err != nil {\n\t\treturn fmt.Errorf(\"decoding value map: %w\", err)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func (v Value) Kind() Kind {\n\treturn v.kind()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func (v Value) IsNil() bool {\n\tk := v.kind()\n\tswitch k {\n\tcase Chan, Func, Map, Pointer, UnsafePointer:\n\t\tif v.flag\u0026flagMethod != 0 {\n\t\t\treturn false\n\t\t}\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\treturn ptr == nil\n\tcase Interface, Slice:\n\t\t// Both interface and slice are nil if first word is 0.\n\t\t// Both are always bigger than a word; assume flagIndir.\n\t\treturn *(*unsafe.Pointer)(v.ptr) == nil\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.IsNil\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func (v Value) Elem() Value {\n\tk := v.kind()\n\tswitch k {\n\tcase Interface:\n\t\tvar eface any\n\t\tif v.typ().NumMethod() == 0 {\n\t\t\teface = *(*any)(v.ptr)\n\t\t} else {\n\t\t\teface = (any)(*(*interface {\n\t\t\t\tM()\n\t\t\t})(v.ptr))\n\t\t}\n\t\tx := unpackEface(eface)\n\t\tif x.flag != 0 {\n\t\t\tx.flag |= v.flag.ro()\n\t\t}\n\t\treturn x\n\tcase Pointer:\n\t\tptr := v.ptr\n\t\tif v.flag\u0026flagIndir != 0 {\n\t\t\tif v.typ().IfaceIndir() {\n\t\t\t\t// This is a pointer to a not-in-heap object. ptr points to a uintptr\n\t\t\t\t// in the heap. That uintptr is the address of a not-in-heap object.\n\t\t\t\t// In general, pointers to not-in-heap objects can be total junk.\n\t\t\t\t// But Elem() is asking to dereference it, so the user has asserted\n\t\t\t\t// that at least it is a valid pointer (not just an integer stored in\n\t\t\t\t// a pointer slot). So let's check, to make sure that it isn't a pointer\n\t\t\t\t// that the runtime will crash on if it sees it during GC or write barriers.\n\t\t\t\t// Since it is a not-in-heap pointer, all pointers to the heap are\n\t\t\t\t// forbidden! That makes the test pretty easy.\n\t\t\t\t// See issue 48399.\n\t\t\t\tif !verifyNotInHeapPtr(*(*uintptr)(ptr)) {\n\t\t\t\t\tpanic(\"reflect: reflect.Value.Elem on an invalid notinheap pointer\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\t\t// The returned value's address is v's value.\n\t\tif ptr == nil {\n\t\t\treturn Value{}\n\t\t}\n\t\ttt := (*ptrType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tfl := v.flag\u0026flagRO | flagIndir | flagAddr\n\t\tfl |= flag(typ.Kind())\n\t\treturn Value{typ, ptr, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Elem\", v.kind()})\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:ValueIsNotNull",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "ValueIsNotNull",
      "signature": "ValueIsNotNull (column string, opts ...Option) *sql.Predicate",
      "ground_truth": "func ValueIsNotNull(column string, opts ...Option) *sql.Predicate {\n\treturn sql.P(func(b *sql.Builder) {\n\t\tswitch b.Dialect() {\n\t\tcase dialect.Postgres:\n\t\t\tvaluePath(b, column, append(opts, Cast(\"jsonb\"))...)\n\t\t\tb.WriteOp(sql.OpNEQ).WriteString(\"'null'::jsonb\")\n\t\tcase dialect.SQLite:\n\t\t\tpath := identPath(column, opts...)\n\t\t\tpath.mysqlFunc(\"JSON_TYPE\", b)\n\t\t\tb.WriteOp(sql.OpNEQ).WriteString(\"'null'\")\n\t\tcase dialect.MySQL:\n\t\t\tpath := identPath(column, opts...)\n\t\t\tb.WriteString(\"NOT(JSON_CONTAINS\").Wrap(func(b *sql.Builder) {\n\t\t\t\tb.Ident(column).Comma()\n\t\t\t\tb.WriteString(\"'null'\").Comma()\n\t\t\t\tpath.mysqlPath(b)\n\t\t\t}).WriteString(\")\")\n\t\t}\n\t})\n}",
      "function_comment": "// ValueIsNotNull return a predicate for checking that a JSON value\n// (returned by the path) is not null literal (JSON \"null\").\n//\n//\tsqljson.ValueIsNotNull(\"a\", sqljson.Path(\"b\"))",
      "function_statement": "// ValueIsNotNull return a predicate for checking that a JSON value\n// (returned by the path) is not null literal (JSON \"null\").\n//\n//\tsqljson.ValueIsNotNull(\"a\", sqljson.Path(\"b\"))",
      "start_line": 70,
      "end_line": 89,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "Option func(*PathOptions)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Predicate struct {\n\tBuilder\n\tdepth int\n\tfns   []func(*Builder)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func P(fns ...func(*Builder)) *Predicate {\n\treturn \u0026Predicate{fns: fns}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "Postgres = \"postgres\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func valuePath(b *sql.Builder, column string, opts ...Option) {\n\tpath := identPath(column, opts...)\n\tpath.value(b)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func Cast(typ string) Option {\n\treturn func(p *PathOptions) {\n\t\tp.Cast = typ\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpNEQ",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "SQLite   = \"sqlite3\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func identPath(ident string, opts ...Option) *PathOptions {\n\tpath := \u0026PathOptions{Ident: ident}\n\tfor i := range opts {\n\t\topts[i](path)\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlFunc(fn string, b *sql.Builder) {\n\tb.WriteString(fn).WriteByte('(')\n\tb.Ident(p.Ident).Comma()\n\tp.mysqlPath(b)\n\tb.WriteByte(')')\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "MySQL    = \"mysql\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Wrap(f func(*Builder)) *Builder {\n\tnb := \u0026Builder{dialect: b.dialect, total: b.total, sb: \u0026strings.Builder{}}\n\tnb.WriteByte('(')\n\tf(nb)\n\tnb.WriteByte(')')\n\tb.WriteString(nb.String())\n\tb.args = append(b.args, nb.args...)\n\tb.total = nb.total\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Comma() *Builder {\n\treturn b.WriteString(\", \")\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlPath(b *sql.Builder) {\n\tb.WriteString(`'$`)\n\tfor _, p := range p.Path {\n\t\tswitch _, isIndex := isJSONIdx(p); {\n\t\tcase isIndex:\n\t\t\tb.WriteString(p)\n\t\tcase p == \"*\" || isQuoted(p) || isIdentifier(p):\n\t\t\tb.WriteString(\".\" + p)\n\t\tdefault:\n\t\t\tb.WriteString(`.\"` + p + `\"`)\n\t\t}\n\t}\n\tb.WriteByte('\\'')\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "cover_details": {
        "line_cover_rate": 0.85
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/template.go:Funcs",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        }
      ],
      "name": "Funcs",
      "signature": "(t *Template) Funcs (funcMap template.FuncMap) *Template",
      "ground_truth": "func (t *Template) Funcs(funcMap template.FuncMap) *Template {\n\tt.Template.Funcs(funcMap)\n\tif t.FuncMap == nil {\n\t\tt.FuncMap = template.FuncMap{}\n\t}\n\tfor name, f := range funcMap {\n\t\tif _, ok := t.FuncMap[name]; !ok {\n\t\t\tt.FuncMap[name] = f\n\t\t}\n\t}\n\treturn t\n}",
      "function_comment": "// Funcs merges the given funcMap with the template functions.",
      "function_statement": "// Funcs merges the given funcMap with the template functions.",
      "start_line": 268,
      "end_line": 279,
      "file_path": "./entc/gen/template.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "Template struct {\n\t*template.Template\n\tFuncMap   template.FuncMap\n\tcondition func(*Graph) bool\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/text/template/funcs.go",
          "code_snippet": "FuncMap map[string]any",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/text/template/template.go",
          "code_snippet": "func (t *Template) Funcs(funcMap FuncMap) *Template {\n\tt.init()\n\tt.muFuncs.Lock()\n\tdefer t.muFuncs.Unlock()\n\taddValueFuncs(t.execFuncs, funcMap)\n\taddFuncs(t.parseFuncs, funcMap)\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        278
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:Modifier",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestLimitNeighbors"
        }
      ],
      "name": "Modifier",
      "signature": "(l *NeighborsLimit) Modifier (partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector)",
      "ground_truth": "func (l *NeighborsLimit) Modifier(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {\n\treturn func(s *sql.Selector) {\n\t\tvar (\n\t\t\td  = sql.Dialect(s.Dialect())\n\t\t\trn = sql.RowNumber().PartitionBy(partitionBy)\n\t\t)\n\t\tswitch {\n\t\tcase len(orderBy) \u003e 0:\n\t\t\trn.OrderExpr(orderBy...)\n\t\tcase l.DefaultOrderField != \"\":\n\t\t\trn.OrderBy(l.DefaultOrderField)\n\t\tdefault:\n\t\t\ts.AddError(errors.New(\"no order terms provided for window function\"))\n\t\t\treturn\n\t\t}\n\t\ts.SetDistinct(false)\n\t\twith := d.With(l.SrcCTE).\n\t\t\tAs(s.Clone()).\n\t\t\tWith(l.LimitCTE).\n\t\t\tAs(\n\t\t\t\td.Select(\"*\").\n\t\t\t\t\tAppendSelectExprAs(rn, l.RowNumber).\n\t\t\t\t\tFrom(d.Table(l.SrcCTE)),\n\t\t\t)\n\t\tt := d.Table(l.LimitCTE).As(s.TableName())\n\t\t*s = *d.Select(s.UnqualifiedColumns()...).\n\t\t\tFrom(t).\n\t\t\tWhere(sql.LTE(t.C(l.RowNumber), limit)).\n\t\t\tPrefix(with)\n\t}\n}",
      "function_comment": "// Modifier returns a modifier function that limits the number of rows of the eager load query.",
      "function_statement": "// Modifier returns a modifier function that limits the number of rows of the eager load query.",
      "start_line": 592,
      "end_line": 622,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "NeighborsLimit struct {\n\t// SrcCTE, LimitCTE and RowNumber hold the identifier names\n\t// to src query, new limited one (using window function) and\n\t// the column for counting rows.\n\tSrcCTE, LimitCTE, RowNumber string\n\t// DefaultOrderField sets the default ordering for\n\t// sub-queries in case no order terms were provided.\n\tDefaultOrderField string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Querier interface {\n\t// Query returns the query representation of the element\n\t// and its arguments (if any).\n\tQuery() (string, []any)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Dialect(name string) *DialectBuilder {\n\treturn \u0026DialectBuilder{name}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (w *WindowBuilder) PartitionBy(columns ...string) *WindowBuilder {\n\tw.partition = func(b *Builder) {\n\t\tb.IdentComma(columns...)\n\t}\n\treturn w\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func RowNumber() *WindowBuilder {\n\treturn Window(func(b *Builder) {\n\t\tb.WriteString(\"ROW_NUMBER()\")\n\t})\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (w *WindowBuilder) OrderExpr(exprs ...Querier) *WindowBuilder {\n\tfor i := range exprs {\n\t\tw.order = append(w.order, exprs[i])\n\t}\n\treturn w\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (w *WindowBuilder) OrderBy(columns ...string) *WindowBuilder {\n\tfor i := range columns {\n\t\tw.order = append(w.order, columns[i])\n\t}\n\treturn w\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) AddError(err error) *Builder {\n\t// allowed nil error make build process easier\n\tif err != nil {\n\t\tb.errs = append(b.errs, err)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) SetDistinct(v bool) *Selector {\n\ts.distinct = v\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (w *WithBuilder) As(s *Selector) *WithBuilder {\n\tw.ctes[len(w.ctes)-1].s = s\n\treturn w\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (w *WithBuilder) With(name string, columns ...string) *WithBuilder {\n\tw.ctes = append(w.ctes, With(name, columns...).ctes...)\n\treturn w\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) With(name string) *WithBuilder {\n\tb := With(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Clone() *Selector {\n\tif s == nil {\n\t\treturn nil\n\t}\n\tjoins := make([]join, len(s.joins))\n\tfor i := range s.joins {\n\t\tjoins[i] = s.joins[i].clone()\n\t}\n\treturn \u0026Selector{\n\t\tBuilder:   s.Builder.clone(),\n\t\tctx:       s.ctx,\n\t\tas:        s.as,\n\t\tor:        s.or,\n\t\tnot:       s.not,\n\t\tfrom:      s.from,\n\t\tlimit:     s.limit,\n\t\toffset:    s.offset,\n\t\tdistinct:  s.distinct,\n\t\twhere:     s.where.clone(),\n\t\thaving:    s.having.clone(),\n\t\tjoins:     append([]join{}, joins...),\n\t\tgroup:     append([]string{}, s.group...),\n\t\torder:     append([]any{}, s.order...),\n\t\tselection: append([]selection{}, s.selection...),\n\t}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) From(t TableView) *Selector {\n\ts.from = nil\n\treturn s.AppendFrom(t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) AppendSelectExprAs(expr Querier, as string) *Selector {\n\tx := expr\n\tif _, ok := expr.(*raw); !ok {\n\t\tx = ExprFunc(func(b *Builder) {\n\t\t\tb.S(\"(\").Join(expr).S(\")\")\n\t\t})\n\t}\n\ts.selection = append(s.selection, selection{\n\t\tx:  x,\n\t\tas: as,\n\t})\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Select(columns ...string) *Selector {\n\tb := Select(columns...)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Table(name string) *SelectTable {\n\tb := Table(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) As(alias string) *SelectTable {\n\ts.as = alias\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) TableName() string {\n\tswitch view := s.from[0].(type) {\n\tcase *SelectTable:\n\t\treturn view.name\n\tcase *Selector:\n\t\treturn view.as\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"unhandled TableView type %T\", s.from))\n\t}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Prefix(queries ...Querier) *Selector {\n\ts.prefix = append(s.prefix, queries...)\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Where(p *Predicate) *Selector {\n\tif len(s.collected) \u003e 0 {\n\t\ts.collected[len(s.collected)-1] = append(s.collected[len(s.collected)-1], p)\n\t\treturn s\n\t}\n\tif s.not {\n\t\tp = Not(p)\n\t\ts.not = false\n\t}\n\tswitch {\n\tcase s.where == nil:\n\t\ts.where = p\n\tcase s.where != nil \u0026\u0026 s.or:\n\t\ts.where = Or(s.where, p)\n\t\ts.or = false\n\tdefault:\n\t\ts.where = And(s.where, p)\n\t}\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) UnqualifiedColumns() []string {\n\tcolumns := make([]string, 0, len(s.selection))\n\tfor i := range s.selection {\n\t\tc := s.selection[i].c\n\t\tif c == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tif s.isIdent(c) {\n\t\t\tparts := strings.FieldsFunc(c, func(r rune) bool {\n\t\t\t\treturn r == '`' || r == '\"'\n\t\t\t})\n\t\t\tif n := len(parts); n \u003e 0 \u0026\u0026 parts[n-1] != \"\" {\n\t\t\t\tc = parts[n-1]\n\t\t\t}\n\t\t}\n\t\tcolumns = append(columns, c)\n\t}\n\treturn columns\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func LTE(col string, value any) *Predicate {\n\treturn P().LTE(col, value)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) C(column string) string {\n\tname := s.name\n\tif s.as != \"\" {\n\t\tname = s.as\n\t}\n\tb := \u0026Builder{dialect: s.dialect}\n\tif s.as == \"\" {\n\t\tb.writeSchema(s.schema)\n\t}\n\tb.Ident(name).WriteByte('.').Ident(column)\n\treturn b.String()\n}",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        592,
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        600,
        601,
        602,
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        617,
        618,
        619,
        620
      ],
      "cover_details": {
        "line_cover_rate": 0.8064516129032258
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:ruleset",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Label"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_EnumName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Table"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Package"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_TagTypes"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_Constant"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_WithRuntimeMixin"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_DefaultName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestBuilderField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_incremental"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestValidSchemaName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_AddIndex"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "ruleset",
      "signature": "ruleset () *inflect.Ruleset",
      "ground_truth": "func ruleset() *inflect.Ruleset {\n\trules := inflect.NewDefaultRuleset()\n\t// Add common initialism from golint and more.\n\tfor _, w := range []string{\n\t\t\"ACL\", \"API\", \"ASCII\", \"AWS\", \"CPU\", \"CSS\", \"DNS\", \"EOF\", \"GB\", \"GUID\",\n\t\t\"HCL\", \"HTML\", \"HTTP\", \"HTTPS\", \"ID\", \"IP\", \"JSON\", \"KB\", \"LHS\", \"MAC\",\n\t\t\"MB\", \"QPS\", \"RAM\", \"RHS\", \"RPC\", \"SLA\", \"SMTP\", \"SQL\", \"SSH\", \"SSO\",\n\t\t\"TCP\", \"TLS\", \"TTL\", \"UDP\", \"UI\", \"UID\", \"URI\", \"URL\", \"UTF8\", \"UUID\",\n\t\t\"VM\", \"XML\", \"XMPP\", \"XSRF\", \"XSS\",\n\t} {\n\t\tacronyms[w] = struct{}{}\n\t\trules.AddAcronym(w)\n\t}\n\treturn rules\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 315,
      "end_line": 329,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/func.go",
          "code_snippet": "acronyms = make(map[string]struct{})",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "Ruleset struct {\n\tuncountables   map[string]bool\n\tplurals        []*Rule\n\tsingulars      []*Rule\n\thumans         []*Rule\n\tacronyms       []*Rule\n\tacronymMatcher *regexp.Regexp\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func NewDefaultRuleset() *Ruleset {\n\trs := NewRuleset()\n\trs.AddPlural(\"s\", \"s\")\n\trs.AddPlural(\"testis\", \"testes\")\n\trs.AddPlural(\"axis\", \"axes\")\n\trs.AddPlural(\"octopus\", \"octopi\")\n\trs.AddPlural(\"virus\", \"viri\")\n\trs.AddPlural(\"octopi\", \"octopi\")\n\trs.AddPlural(\"viri\", \"viri\")\n\trs.AddPlural(\"alias\", \"aliases\")\n\trs.AddPlural(\"status\", \"statuses\")\n\trs.AddPlural(\"bus\", \"buses\")\n\trs.AddPlural(\"buffalo\", \"buffaloes\")\n\trs.AddPlural(\"tomato\", \"tomatoes\")\n\trs.AddPlural(\"tum\", \"ta\")\n\trs.AddPlural(\"ium\", \"ia\")\n\trs.AddPlural(\"ta\", \"ta\")\n\trs.AddPlural(\"ia\", \"ia\")\n\trs.AddPlural(\"sis\", \"ses\")\n\trs.AddPlural(\"lf\", \"lves\")\n\trs.AddPlural(\"rf\", \"rves\")\n\trs.AddPlural(\"afe\", \"aves\")\n\trs.AddPlural(\"bfe\", \"bves\")\n\trs.AddPlural(\"cfe\", \"cves\")\n\trs.AddPlural(\"dfe\", \"dves\")\n\trs.AddPlural(\"efe\", \"eves\")\n\trs.AddPlural(\"gfe\", \"gves\")\n\trs.AddPlural(\"hfe\", \"hves\")\n\trs.AddPlural(\"ife\", \"ives\")\n\trs.AddPlural(\"jfe\", \"jves\")\n\trs.AddPlural(\"kfe\", \"kves\")\n\trs.AddPlural(\"lfe\", \"lves\")\n\trs.AddPlural(\"mfe\", \"mves\")\n\trs.AddPlural(\"nfe\", \"nves\")\n\trs.AddPlural(\"ofe\", \"oves\")\n\trs.AddPlural(\"pfe\", \"pves\")\n\trs.AddPlural(\"qfe\", \"qves\")\n\trs.AddPlural(\"rfe\", \"rves\")\n\trs.AddPlural(\"sfe\", \"sves\")\n\trs.AddPlural(\"tfe\", \"tves\")\n\trs.AddPlural(\"ufe\", \"uves\")\n\trs.AddPlural(\"vfe\", \"vves\")\n\trs.AddPlural(\"wfe\", \"wves\")\n\trs.AddPlural(\"xfe\", \"xves\")\n\trs.AddPlural(\"yfe\", \"yves\")\n\trs.AddPlural(\"zfe\", \"zves\")\n\trs.AddPlural(\"hive\", \"hives\")\n\trs.AddPlural(\"quy\", \"quies\")\n\trs.AddPlural(\"by\", \"bies\")\n\trs.AddPlural(\"cy\", \"cies\")\n\trs.AddPlural(\"dy\", \"dies\")\n\trs.AddPlural(\"fy\", \"fies\")\n\trs.AddPlural(\"gy\", \"gies\")\n\trs.AddPlural(\"hy\", \"hies\")\n\trs.AddPlural(\"jy\", \"jies\")\n\trs.AddPlural(\"ky\", \"kies\")\n\trs.AddPlural(\"ly\", \"lies\")\n\trs.AddPlural(\"my\", \"mies\")\n\trs.AddPlural(\"ny\", \"nies\")\n\trs.AddPlural(\"py\", \"pies\")\n\trs.AddPlural(\"qy\", \"qies\")\n\trs.AddPlural(\"ry\", \"ries\")\n\trs.AddPlural(\"sy\", \"sies\")\n\trs.AddPlural(\"ty\", \"ties\")\n\trs.AddPlural(\"vy\", \"vies\")\n\trs.AddPlural(\"wy\", \"wies\")\n\trs.AddPlural(\"xy\", \"xies\")\n\trs.AddPlural(\"zy\", \"zies\")\n\trs.AddPlural(\"x\", \"xes\")\n\trs.AddPlural(\"ch\", \"ches\")\n\trs.AddPlural(\"ss\", \"sses\")\n\trs.AddPlural(\"sh\", \"shes\")\n\trs.AddPlural(\"matrix\", \"matrices\")\n\trs.AddPlural(\"vertix\", \"vertices\")\n\trs.AddPlural(\"indix\", \"indices\")\n\trs.AddPlural(\"matrex\", \"matrices\")\n\trs.AddPlural(\"vertex\", \"vertices\")\n\trs.AddPlural(\"index\", \"indices\")\n\trs.AddPlural(\"mouse\", \"mice\")\n\trs.AddPlural(\"louse\", \"lice\")\n\trs.AddPlural(\"mice\", \"mice\")\n\trs.AddPlural(\"lice\", \"lice\")\n\trs.AddPluralExact(\"ox\", \"oxen\", true)\n\trs.AddPluralExact(\"oxen\", \"oxen\", true)\n\trs.AddPluralExact(\"quiz\", \"quizzes\", true)\n\trs.AddSingular(\"s\", \"\")\n\trs.AddSingular(\"news\", \"news\")\n\trs.AddSingular(\"ta\", \"tum\")\n\trs.AddSingular(\"ia\", \"ium\")\n\trs.AddSingular(\"analyses\", \"analysis\")\n\trs.AddSingular(\"bases\", \"basis\")\n\trs.AddSingular(\"diagnoses\", \"diagnosis\")\n\trs.AddSingular(\"parentheses\", \"parenthesis\")\n\trs.AddSingular(\"prognoses\", \"prognosis\")\n\trs.AddSingular(\"synopses\", \"synopsis\")\n\trs.AddSingular(\"theses\", \"thesis\")\n\trs.AddSingular(\"analyses\", \"analysis\")\n\trs.AddSingular(\"aves\", \"afe\")\n\trs.AddSingular(\"bves\", \"bfe\")\n\trs.AddSingular(\"cves\", \"cfe\")\n\trs.AddSingular(\"dves\", \"dfe\")\n\trs.AddSingular(\"eves\", \"efe\")\n\trs.AddSingular(\"gves\", \"gfe\")\n\trs.AddSingular(\"hves\", \"hfe\")\n\trs.AddSingular(\"ives\", \"ife\")\n\trs.AddSingular(\"jves\", \"jfe\")\n\trs.AddSingular(\"kves\", \"kfe\")\n\trs.AddSingular(\"lves\", \"lfe\")\n\trs.AddSingular(\"mves\", \"mfe\")\n\trs.AddSingular(\"nves\", \"nfe\")\n\trs.AddSingular(\"oves\", \"ofe\")\n\trs.AddSingular(\"pves\", \"pfe\")\n\trs.AddSingular(\"qves\", \"qfe\")\n\trs.AddSingular(\"rves\", \"rfe\")\n\trs.AddSingular(\"sves\", \"sfe\")\n\trs.AddSingular(\"tves\", \"tfe\")\n\trs.AddSingular(\"uves\", \"ufe\")\n\trs.AddSingular(\"vves\", \"vfe\")\n\trs.AddSingular(\"wves\", \"wfe\")\n\trs.AddSingular(\"xves\", \"xfe\")\n\trs.AddSingular(\"yves\", \"yfe\")\n\trs.AddSingular(\"zves\", \"zfe\")\n\trs.AddSingular(\"hives\", \"hive\")\n\trs.AddSingular(\"tives\", \"tive\")\n\trs.AddSingular(\"lves\", \"lf\")\n\trs.AddSingular(\"rves\", \"rf\")\n\trs.AddSingular(\"quies\", \"quy\")\n\trs.AddSingular(\"bies\", \"by\")\n\trs.AddSingular(\"cies\", \"cy\")\n\trs.AddSingular(\"dies\", \"dy\")\n\trs.AddSingular(\"fies\", \"fy\")\n\trs.AddSingular(\"gies\", \"gy\")\n\trs.AddSingular(\"hies\", \"hy\")\n\trs.AddSingular(\"jies\", \"jy\")\n\trs.AddSingular(\"kies\", \"ky\")\n\trs.AddSingular(\"lies\", \"ly\")\n\trs.AddSingular(\"mies\", \"my\")\n\trs.AddSingular(\"nies\", \"ny\")\n\trs.AddSingular(\"pies\", \"py\")\n\trs.AddSingular(\"qies\", \"qy\")\n\trs.AddSingular(\"ries\", \"ry\")\n\trs.AddSingular(\"sies\", \"sy\")\n\trs.AddSingular(\"ties\", \"ty\")\n\trs.AddSingular(\"vies\", \"vy\")\n\trs.AddSingular(\"wies\", \"wy\")\n\trs.AddSingular(\"xies\", \"xy\")\n\trs.AddSingular(\"zies\", \"zy\")\n\trs.AddSingular(\"series\", \"series\")\n\trs.AddSingular(\"movies\", \"movie\")\n\trs.AddSingular(\"xes\", \"x\")\n\trs.AddSingular(\"ches\", \"ch\")\n\trs.AddSingular(\"sses\", \"ss\")\n\trs.AddSingular(\"shes\", \"sh\")\n\trs.AddSingular(\"mice\", \"mouse\")\n\trs.AddSingular(\"lice\", \"louse\")\n\trs.AddSingular(\"buses\", \"bus\")\n\trs.AddSingular(\"oes\", \"o\")\n\trs.AddSingular(\"shoes\", \"shoe\")\n\trs.AddSingular(\"crises\", \"crisis\")\n\trs.AddSingular(\"axes\", \"axis\")\n\trs.AddSingular(\"testes\", \"testis\")\n\trs.AddSingular(\"octopi\", \"octopus\")\n\trs.AddSingular(\"viri\", \"virus\")\n\trs.AddSingular(\"statuses\", \"status\")\n\trs.AddSingular(\"aliases\", \"alias\")\n\trs.AddSingularExact(\"oxen\", \"ox\", true)\n\trs.AddSingular(\"vertices\", \"vertex\")\n\trs.AddSingular(\"indices\", \"index\")\n\trs.AddSingular(\"matrices\", \"matrix\")\n\trs.AddSingularExact(\"quizzes\", \"quiz\", true)\n\trs.AddSingular(\"databases\", \"database\")\n\trs.AddIrregular(\"person\", \"people\")\n\trs.AddIrregular(\"man\", \"men\")\n\trs.AddIrregular(\"child\", \"children\")\n\trs.AddIrregular(\"sex\", \"sexes\")\n\trs.AddIrregular(\"move\", \"moves\")\n\trs.AddIrregular(\"zombie\", \"zombies\")\n\trs.AddUncountable(\"equipment\")\n\trs.AddUncountable(\"information\")\n\trs.AddUncountable(\"rice\")\n\trs.AddUncountable(\"money\")\n\trs.AddUncountable(\"species\")\n\trs.AddUncountable(\"series\")\n\trs.AddUncountable(\"fish\")\n\trs.AddUncountable(\"sheep\")\n\trs.AddUncountable(\"jeans\")\n\trs.AddUncountable(\"police\")\n\treturn rs\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) AddAcronym(word string) {\n\tr := new(Rule)\n\tr.suffix = word\n\tr.replacement = rs.Titleize(strings.ToLower(word))\n\trs.acronyms = append(rs.acronyms, r)\n}",
          "ref_module": "inflect"
        }
      ],
      "covered_lines": [
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328
      ],
      "cover_details": {
        "line_cover_rate": 0.9333333333333333
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/internal/ws/conn.go:DialContext",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectClosure"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestQueryCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestBadResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestSimpleQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestPartialResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestAuthentication"
        }
      ],
      "name": "DialContext",
      "signature": "(d *Dialer) DialContext (ctx context.Context, uri string) (*Conn, error)",
      "ground_truth": "func (d *Dialer) DialContext(ctx context.Context, uri string) (*Conn, error) {\n\tc, rsp, err := d.Dialer.DialContext(ctx, uri, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"gremlin: dialing uri %s: %w\", uri, err)\n\t}\n\tdefer rsp.Body.Close()\n\n\tconn := \u0026Conn{\n\t\tconn: c,\n\t\tuser: d.user,\n\t\tpass: d.pass,\n\t\tsend: make(chan io.Reader),\n\t}\n\tconn.grp, conn.ctx = errgroup.WithContext(context.Background())\n\n\tconn.grp.Go(conn.sender)\n\tconn.grp.Go(conn.receiver)\n\n\treturn conn, nil\n}",
      "function_comment": "// DialContext creates a new Gremlin connection.",
      "function_statement": "// DialContext creates a new Gremlin connection.",
      "start_line": 107,
      "end_line": 126,
      "file_path": "./dialect/gremlin/internal/ws/conn.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Dialer struct {\n\t\t// Underlying websocket dialer.\n\t\twebsocket.Dialer\n\n\t\t// Gremlin server basic auth credentials.\n\t\tuser, pass string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Conn struct {\n\t\t// Underlying websocket connection.\n\t\tconn *websocket.Conn\n\n\t\t// Credentials for basic authentication.\n\t\tuser, pass string\n\n\t\t// Goroutine tracking.\n\t\tctx context.Context\n\t\tgrp *errgroup.Group\n\n\t\t// Channel of outbound requests.\n\t\tsend chan io.Reader\n\n\t\t// Map of in flight requests.\n\t\tinflight sync.Map\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) sender() error {\n\tpinger := time.NewTicker(pingPeriod)\n\tdefer pinger.Stop()\n\n\t// closing connection terminates receiver\n\tdefer c.conn.Close()\n\n\tfor {\n\t\tselect {\n\t\tcase r := \u003c-c.send:\n\t\t\t// ensure write completes within a window\n\t\t\tc.conn.SetWriteDeadline(time.Now().Add(writeWait))\n\n\t\t\t// fetch next message writer\n\t\t\tw, err := c.conn.NextWriter(websocket.BinaryMessage)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"getting message writer: %w\", err)\n\t\t\t}\n\n\t\t\t// write mime header\n\t\t\tif _, err := w.Write(encoding.GraphSON3Mime); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing mime header: %w\", err)\n\t\t\t}\n\n\t\t\t// write request body\n\t\t\tif _, err := io.Copy(w, r); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing request: %w\", err)\n\t\t\t}\n\n\t\t\t// finish message write\n\t\t\tif err := w.Close(); err != nil {\n\t\t\t\treturn fmt.Errorf(\"closing message writer: %w\", err)\n\t\t\t}\n\t\tcase \u003c-c.ctx.Done():\n\t\t\t// connection closing\n\t\t\treturn c.conn.WriteControl(\n\t\t\t\twebsocket.CloseMessage,\n\t\t\t\twebsocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"),\n\t\t\t\ttime.Time{},\n\t\t\t)\n\t\tcase \u003c-pinger.C:\n\t\t\t// periodic connection keepalive\n\t\t\tif err := c.conn.WriteControl(websocket.PingMessage, nil, time.Now().Add(writeWait)); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) receiver() error {\n\t// handle keepalive responses\n\tc.conn.SetReadDeadline(time.Now().Add(pongWait))\n\tc.conn.SetPongHandler(func(string) error {\n\t\treturn c.conn.SetReadDeadline(time.Now().Add(pongWait))\n\t})\n\n\t// complete all in flight requests on termination\n\tdefer c.inflight.Range(func(id, ifr any) bool {\n\t\tifr.(*inflight).result \u003c- result{err: ErrConnClosed}\n\t\tc.inflight.Delete(id)\n\t\treturn true\n\t})\n\n\tfor {\n\t\t// rely on sender connection close during termination\n\t\t_, r, err := c.conn.NextReader()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t}\n\n\t\t// decode received response\n\t\tvar rsp gremlin.Response\n\t\tif err := graphson.NewDecoder(r).Decode(\u0026rsp); err != nil {\n\t\t\treturn fmt.Errorf(\"reading response: %w\", err)\n\t\t}\n\n\t\tifr, ok := c.inflight.Load(rsp.RequestID)\n\t\tif !ok {\n\t\t\t// context cancellation aborts inflight requests\n\t\t\tcontinue\n\t\t}\n\n\t\t// handle incoming response\n\t\tif done := c.receive(ifr.(*inflight), \u0026rsp); done {\n\t\t\t// stop tracking finished requests\n\t\t\tc.inflight.Delete(rsp.RequestID)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/gorilla/websocket@v1.5.0/client.go",
          "code_snippet": "func (d *Dialer) DialContext(ctx context.Context, urlStr string, requestHeader http.Header) (*Conn, *http.Response, error) {\n\tif d == nil {\n\t\td = \u0026nilDialer\n\t}\n\n\tchallengeKey, err := generateChallengeKey()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tswitch u.Scheme {\n\tcase \"ws\":\n\t\tu.Scheme = \"http\"\n\tcase \"wss\":\n\t\tu.Scheme = \"https\"\n\tdefault:\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\tif u.User != nil {\n\t\t// User name and password are not allowed in websocket URIs.\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\treq := \u0026http.Request{\n\t\tMethod:     http.MethodGet,\n\t\tURL:        u,\n\t\tProto:      \"HTTP/1.1\",\n\t\tProtoMajor: 1,\n\t\tProtoMinor: 1,\n\t\tHeader:     make(http.Header),\n\t\tHost:       u.Host,\n\t}\n\treq = req.WithContext(ctx)\n\n\t// Set the cookies present in the cookie jar of the dialer\n\tif d.Jar != nil {\n\t\tfor _, cookie := range d.Jar.Cookies(u) {\n\t\t\treq.AddCookie(cookie)\n\t\t}\n\t}\n\n\t// Set the request headers using the capitalization for names and values in\n\t// RFC examples. Although the capitalization shouldn't matter, there are\n\t// servers that depend on it. The Header.Set method is not used because the\n\t// method canonicalizes the header names.\n\treq.Header[\"Upgrade\"] = []string{\"websocket\"}\n\treq.Header[\"Connection\"] = []string{\"Upgrade\"}\n\treq.Header[\"Sec-WebSocket-Key\"] = []string{challengeKey}\n\treq.Header[\"Sec-WebSocket-Version\"] = []string{\"13\"}\n\tif len(d.Subprotocols) \u003e 0 {\n\t\treq.Header[\"Sec-WebSocket-Protocol\"] = []string{strings.Join(d.Subprotocols, \", \")}\n\t}\n\tfor k, vs := range requestHeader {\n\t\tswitch {\n\t\tcase k == \"Host\":\n\t\t\tif len(vs) \u003e 0 {\n\t\t\t\treq.Host = vs[0]\n\t\t\t}\n\t\tcase k == \"Upgrade\" ||\n\t\t\tk == \"Connection\" ||\n\t\t\tk == \"Sec-Websocket-Key\" ||\n\t\t\tk == \"Sec-Websocket-Version\" ||\n\t\t\tk == \"Sec-Websocket-Extensions\" ||\n\t\t\t(k == \"Sec-Websocket-Protocol\" \u0026\u0026 len(d.Subprotocols) \u003e 0):\n\t\t\treturn nil, nil, errors.New(\"websocket: duplicate header not allowed: \" + k)\n\t\tcase k == \"Sec-Websocket-Protocol\":\n\t\t\treq.Header[\"Sec-WebSocket-Protocol\"] = vs\n\t\tdefault:\n\t\t\treq.Header[k] = vs\n\t\t}\n\t}\n\n\tif d.EnableCompression {\n\t\treq.Header[\"Sec-WebSocket-Extensions\"] = []string{\"permessage-deflate; server_no_context_takeover; client_no_context_takeover\"}\n\t}\n\n\tif d.HandshakeTimeout != 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(ctx, d.HandshakeTimeout)\n\t\tdefer cancel()\n\t}\n\n\t// Get network dial function.\n\tvar netDial func(network, add string) (net.Conn, error)\n\n\tswitch u.Scheme {\n\tcase \"http\":\n\t\tif d.NetDialContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDial != nil {\n\t\t\tnetDial = d.NetDial\n\t\t}\n\tcase \"https\":\n\t\tif d.NetDialTLSContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialTLSContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDialContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDial != nil {\n\t\t\tnetDial = d.NetDial\n\t\t}\n\tdefault:\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\tif netDial == nil {\n\t\tnetDialer := \u0026net.Dialer{}\n\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn netDialer.DialContext(ctx, network, addr)\n\t\t}\n\t}\n\n\t// If needed, wrap the dial function to set the connection deadline.\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tforwardDial := netDial\n\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\tc, err := forwardDial(network, addr)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\terr = c.SetDeadline(deadline)\n\t\t\tif err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn c, nil\n\t\t}\n\t}\n\n\t// If needed, wrap the dial function to connect through a proxy.\n\tif d.Proxy != nil {\n\t\tproxyURL, err := d.Proxy(req)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tif proxyURL != nil {\n\t\t\tdialer, err := proxy_FromURL(proxyURL, netDialerFunc(netDial))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tnetDial = dialer.Dial\n\t\t}\n\t}\n\n\thostPort, hostNoPort := hostPortNoPort(u)\n\ttrace := httptrace.ContextClientTrace(ctx)\n\tif trace != nil \u0026\u0026 trace.GetConn != nil {\n\t\ttrace.GetConn(hostPort)\n\t}\n\n\tnetConn, err := netDial(\"tcp\", hostPort)\n\tif trace != nil \u0026\u0026 trace.GotConn != nil {\n\t\ttrace.GotConn(httptrace.GotConnInfo{\n\t\t\tConn: netConn,\n\t\t})\n\t}\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tdefer func() {\n\t\tif netConn != nil {\n\t\t\tnetConn.Close()\n\t\t}\n\t}()\n\n\tif u.Scheme == \"https\" \u0026\u0026 d.NetDialTLSContext == nil {\n\t\t// If NetDialTLSContext is set, assume that the TLS handshake has already been done\n\n\t\tcfg := cloneTLSConfig(d.TLSClientConfig)\n\t\tif cfg.ServerName == \"\" {\n\t\t\tcfg.ServerName = hostNoPort\n\t\t}\n\t\ttlsConn := tls.Client(netConn, cfg)\n\t\tnetConn = tlsConn\n\n\t\tif trace != nil \u0026\u0026 trace.TLSHandshakeStart != nil {\n\t\t\ttrace.TLSHandshakeStart()\n\t\t}\n\t\terr := doHandshake(ctx, tlsConn, cfg)\n\t\tif trace != nil \u0026\u0026 trace.TLSHandshakeDone != nil {\n\t\t\ttrace.TLSHandshakeDone(tlsConn.ConnectionState(), err)\n\t\t}\n\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t}\n\n\tconn := newConn(netConn, false, d.ReadBufferSize, d.WriteBufferSize, d.WriteBufferPool, nil, nil)\n\n\tif err := req.Write(netConn); err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif trace != nil \u0026\u0026 trace.GotFirstResponseByte != nil {\n\t\tif peek, err := conn.br.Peek(1); err == nil \u0026\u0026 len(peek) == 1 {\n\t\t\ttrace.GotFirstResponseByte()\n\t\t}\n\t}\n\n\tresp, err := http.ReadResponse(conn.br, req)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif d.Jar != nil {\n\t\tif rc := resp.Cookies(); len(rc) \u003e 0 {\n\t\t\td.Jar.SetCookies(u, rc)\n\t\t}\n\t}\n\n\tif resp.StatusCode != 101 ||\n\t\t!tokenListContainsValue(resp.Header, \"Upgrade\", \"websocket\") ||\n\t\t!tokenListContainsValue(resp.Header, \"Connection\", \"upgrade\") ||\n\t\tresp.Header.Get(\"Sec-Websocket-Accept\") != computeAcceptKey(challengeKey) {\n\t\t// Before closing the network connection on return from this\n\t\t// function, slurp up some of the response to aid application\n\t\t// debugging.\n\t\tbuf := make([]byte, 1024)\n\t\tn, _ := io.ReadFull(resp.Body, buf)\n\t\tresp.Body = ioutil.NopCloser(bytes.NewReader(buf[:n]))\n\t\treturn nil, resp, ErrBadHandshake\n\t}\n\n\tfor _, ext := range parseExtensions(resp.Header) {\n\t\tif ext[\"\"] != \"permessage-deflate\" {\n\t\t\tcontinue\n\t\t}\n\t\t_, snct := ext[\"server_no_context_takeover\"]\n\t\t_, cnct := ext[\"client_no_context_takeover\"]\n\t\tif !snct || !cnct {\n\t\t\treturn nil, resp, errInvalidCompression\n\t\t}\n\t\tconn.newCompressionWriter = compressNoContextTakeover\n\t\tconn.newDecompressionReader = decompressNoContextTakeover\n\t\tbreak\n\t}\n\n\tresp.Body = ioutil.NopCloser(bytes.NewReader([]byte{}))\n\tconn.subprotocol = resp.Header.Get(\"Sec-Websocket-Protocol\")\n\n\tnetConn.SetDeadline(time.Time{})\n\tnetConn = nil // to avoid close in defer.\n\treturn conn, resp, nil\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/net/http/response.go",
          "code_snippet": "Response struct {\n\tStatus     string // e.g. \"200 OK\"\n\tStatusCode int    // e.g. 200\n\tProto      string // e.g. \"HTTP/1.0\"\n\tProtoMajor int    // e.g. 1\n\tProtoMinor int    // e.g. 0\n\n\t// Header maps header keys to values. If the response had multiple\n\t// headers with the same key, they may be concatenated, with comma\n\t// delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers\n\t// be semantically equivalent to a comma-delimited sequence.) When\n\t// Header values are duplicated by other fields in this struct (e.g.,\n\t// ContentLength, TransferEncoding, Trailer), the field values are\n\t// authoritative.\n\t//\n\t// Keys in the map are canonicalized (see CanonicalHeaderKey).\n\tHeader Header\n\n\t// Body represents the response body.\n\t//\n\t// The response body is streamed on demand as the Body field\n\t// is read. If the network connection fails or the server\n\t// terminates the response, Body.Read calls return an error.\n\t//\n\t// The http Client and Transport guarantee that Body is always\n\t// non-nil, even on responses without a body or responses with\n\t// a zero-length body. It is the caller's responsibility to\n\t// close Body. The default HTTP client's Transport may not\n\t// reuse HTTP/1.x \"keep-alive\" TCP connections if the Body is\n\t// not read to completion and closed.\n\t//\n\t// The Body is automatically dechunked if the server replied\n\t// with a \"chunked\" Transfer-Encoding.\n\t//\n\t// As of Go 1.12, the Body will also implement io.Writer\n\t// on a successful \"101 Switching Protocols\" response,\n\t// as used by WebSockets and HTTP/2's \"h2c\" mode.\n\tBody io.ReadCloser\n\n\t// ContentLength records the length of the associated content. The\n\t// value -1 indicates that the length is unknown. Unless Request.Method\n\t// is \"HEAD\", values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\tContentLength int64\n\n\t// Contains transfer encodings from outer-most to inner-most. Value is\n\t// nil, means that \"identity\" encoding is used.\n\tTransferEncoding []string\n\n\t// Close records whether the header directed that the connection be\n\t// closed after reading Body. The value is advice for clients: neither\n\t// ReadResponse nor Response.Write ever closes a connection.\n\tClose bool\n\n\t// Uncompressed reports whether the response was sent compressed but\n\t// was decompressed by the http package. When true, reading from\n\t// Body yields the uncompressed content instead of the compressed\n\t// content actually set from the server, ContentLength is set to -1,\n\t// and the \"Content-Length\" and \"Content-Encoding\" fields are deleted\n\t// from the responseHeader. To get the original response from\n\t// the server, set Transport.DisableCompression to true.\n\tUncompressed bool\n\n\t// Trailer maps trailer keys to values in the same\n\t// format as Header.\n\t//\n\t// The Trailer initially contains only nil values, one for\n\t// each key specified in the server's \"Trailer\" header\n\t// value. Those values are not added to Header.\n\t//\n\t// Trailer must not be accessed concurrently with Read calls\n\t// on the Body.\n\t//\n\t// After Body.Read has returned io.EOF, Trailer will contain\n\t// any trailer values sent by the server.\n\tTrailer Header\n\n\t// Request is the request that was sent to obtain this Response.\n\t// Request's Body is nil (having already been consumed).\n\t// This is only populated for Client requests.\n\tRequest *Request\n\n\t// TLS contains information about the TLS connection on which the\n\t// response was received. It is nil for unencrypted responses.\n\t// The pointer is shared between responses and should not be\n\t// modified.\n\tTLS *tls.ConnectionState\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/x/sync@v0.11.0/errgroup/errgroup.go",
          "code_snippet": "func WithContext(ctx context.Context) (*Group, context.Context) {\n\tctx, cancel := withCancelCause(ctx)\n\treturn \u0026Group{cancel: cancel}, ctx\n}",
          "ref_module": "errgroup"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "func Background() Context {\n\treturn backgroundCtx{}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/x/sync@v0.11.0/errgroup/errgroup.go",
          "code_snippet": "func (g *Group) Go(f func() error) {\n\tif g.sem != nil {\n\t\tg.sem \u003c- token{}\n\t}\n\n\tg.wg.Add(1)\n\tgo func() {\n\t\tdefer g.done()\n\n\t\tif err := f(); err != nil {\n\t\t\tg.errOnce.Do(func() {\n\t\t\t\tg.err = err\n\t\t\t\tif g.cancel != nil {\n\t\t\t\t\tg.cancel(g.err)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}()\n}",
          "ref_module": "errgroup"
        }
      ],
      "covered_lines": [
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125
      ],
      "cover_details": {
        "line_cover_rate": 0.95
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:goType",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBool"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString_ValueScanner"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes_ValueScanner"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestInt_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestFloat_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestSlices"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestFloat"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestTime"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Enums"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_UUID"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Other"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestRType_Implements"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestInt"
        }
      ],
      "name": "goType",
      "signature": "(d *Descriptor) goType (typ any)",
      "ground_truth": "func (d *Descriptor) goType(typ any) {\n\tt := reflect.TypeOf(typ)\n\ttv := indirect(t)\n\tinfo := \u0026TypeInfo{\n\t\tType:    d.Info.Type,\n\t\tIdent:   t.String(),\n\t\tPkgPath: tv.PkgPath(),\n\t\tPkgName: pkgName(tv.String()),\n\t\tRType: \u0026RType{\n\t\t\trtype:   t,\n\t\t\tKind:    t.Kind(),\n\t\t\tName:    tv.Name(),\n\t\t\tIdent:   tv.String(),\n\t\t\tPkgPath: tv.PkgPath(),\n\t\t\tMethods: make(map[string]struct{ In, Out []*RType }, t.NumMethod()),\n\t\t},\n\t}\n\tmethods(t, info.RType)\n\tswitch t.Kind() {\n\tcase reflect.Slice, reflect.Ptr, reflect.Map:\n\t\tinfo.Nillable = true\n\t}\n\td.Info = info\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1445,
      "end_line": 1468,
      "file_path": "./schema/field/field.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "Descriptor struct {\n\tTag              string                  // struct tag.\n\tSize             int                     // varchar size.\n\tName             string                  // field name.\n\tInfo             *TypeInfo               // field type info.\n\tValueScanner     any                     // custom field codec.\n\tUnique           bool                    // unique index of field.\n\tNillable         bool                    // nillable struct field.\n\tOptional         bool                    // nullable field in database.\n\tImmutable        bool                    // create only field.\n\tDefault          any                     // default value on create.\n\tUpdateDefault    any                     // default value on update.\n\tValidators       []any                   // validator functions.\n\tStorageKey       string                  // sql column or gremlin property.\n\tEnums            []struct{ N, V string } // enum values.\n\tSensitive        bool                    // sensitive info string field.\n\tSchemaType       map[string]string       // override the schema type.\n\tAnnotations      []schema.Annotation     // field annotations.\n\tComment          string                  // field comment.\n\tDeprecated       bool                    // mark the field as deprecated.\n\tDeprecatedReason string                  // deprecation reason.\n\tErr              error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func indirect(t reflect.Type) reflect.Type {\n\tfor t.Kind() == reflect.Ptr {\n\t\tt = t.Elem()\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInfo struct {\n\tType     Type\n\tIdent    string\n\tPkgPath  string // import path.\n\tPkgName  string // local package name.\n\tNillable bool   // slices or pointers.\n\tRType    *RType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func pkgName(ident string) string {\n\ti := strings.LastIndexByte(ident, '.')\n\tif i == -1 {\n\t\treturn \"\"\n\t}\n\ts := ident[:i]\n\tif i := strings.LastIndexAny(s, \"]*\"); i != -1 {\n\t\ts = s[i+1:]\n\t}\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "RType struct {\n\tName    string // reflect.Type.Name\n\tIdent   string // reflect.Type.String\n\tKind    reflect.Kind\n\tPkgPath string\n\tMethods map[string]struct{ In, Out []*RType }\n\t// Used only for in-package checks.\n\trtype reflect.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func methods(t reflect.Type, rtype *RType) {\n\t// For type T, add methods with\n\t// pointer receiver as well (*T).\n\tif t.Kind() != reflect.Ptr {\n\t\tt = reflect.PtrTo(t)\n\t}\n\tn := t.NumMethod()\n\tfor i := 0; i \u003c n; i++ {\n\t\tm := t.Method(i)\n\t\tin := make([]*RType, m.Type.NumIn()-1)\n\t\tfor j := range in {\n\t\t\targ := m.Type.In(j + 1)\n\t\t\tin[j] = \u0026RType{Name: arg.Name(), Ident: arg.String(), Kind: arg.Kind(), PkgPath: arg.PkgPath()}\n\t\t}\n\t\tout := make([]*RType, m.Type.NumOut())\n\t\tfor j := range out {\n\t\t\tret := m.Type.Out(j)\n\t\t\tout[j] = \u0026RType{Name: ret.Name(), Ident: ret.String(), Kind: ret.Kind(), PkgPath: ret.PkgPath()}\n\t\t}\n\t\trtype.Methods[m.Name] = struct{ In, Out []*RType }{in, out}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1445,
        1446,
        1447,
        1448,
        1449,
        1450,
        1451,
        1452,
        1453,
        1454,
        1455,
        1456,
        1457,
        1458,
        1459,
        1460,
        1461,
        1462,
        1463,
        1464,
        1465,
        1467
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:Neighbors",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestNeighbors"
        }
      ],
      "name": "Neighbors",
      "signature": "Neighbors (dialect string, s *Step) (q *sql.Selector)",
      "ground_truth": "func Neighbors(dialect string, s *Step) (q *sql.Selector) {\n\tbuilder := sql.Dialect(dialect)\n\tswitch {\n\tcase s.ThroughEdgeTable():\n\t\tpk1, pk2 := s.Edge.Columns[1], s.Edge.Columns[0]\n\t\tif s.Edge.Inverse {\n\t\t\tpk1, pk2 = pk2, pk1\n\t\t}\n\t\tto := builder.Table(s.To.Table).Schema(s.To.Schema)\n\t\tjoin := builder.Table(s.Edge.Table).Schema(s.Edge.Schema)\n\t\tmatch := builder.Select(join.C(pk1)).\n\t\t\tFrom(join).\n\t\t\tWhere(sql.EQ(join.C(pk2), s.From.V))\n\t\tq = builder.Select().\n\t\t\tFrom(to).\n\t\t\tJoin(match).\n\t\t\tOn(to.C(s.To.Column), match.C(pk1))\n\tcase s.FromEdgeOwner():\n\t\tt1 := builder.Table(s.To.Table).Schema(s.To.Schema)\n\t\tt2 := builder.Select(s.Edge.Columns[0]).\n\t\t\tFrom(builder.Table(s.Edge.Table).Schema(s.Edge.Schema)).\n\t\t\tWhere(sql.EQ(s.From.Column, s.From.V))\n\t\tq = builder.Select().\n\t\t\tFrom(t1).\n\t\t\tJoin(t2).\n\t\t\tOn(t1.C(s.To.Column), t2.C(s.Edge.Columns[0]))\n\tcase s.ToEdgeOwner():\n\t\tq = builder.Select().\n\t\t\tFrom(builder.Table(s.To.Table).Schema(s.To.Schema)).\n\t\t\tWhere(sql.EQ(s.Edge.Columns[0], s.From.V))\n\t}\n\treturn q\n}",
      "function_comment": "// Neighbors returns a Selector for evaluating the path-step\n// and getting the neighbors of one vertex.",
      "function_statement": "// Neighbors returns a Selector for evaluating the path-step\n// and getting the neighbors of one vertex.",
      "start_line": 165,
      "end_line": 197,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "Step struct {\n\t// From is the source of the step.\n\tFrom struct {\n\t\t// V can be either one vertex or set of vertices.\n\t\t// It can be a pre-processed step (sql.Query) or a simple Go type (integer or string).\n\t\tV any\n\t\t// Table holds the table name of V (from).\n\t\tTable string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n\t// Edge holds the edge information for getting the neighbors.\n\tEdge struct {\n\t\t// Rel of the edge.\n\t\tRel Rel\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Table name of where this edge columns reside.\n\t\tTable string\n\t\t// Columns of the edge.\n\t\t// In O2O and M2O, it holds the foreign-key column. Hence, len == 1.\n\t\t// In M2M, it holds the primary-key columns of the join table. Hence, len == 2.\n\t\tColumns []string\n\t\t// Inverse indicates if the edge is an inverse edge.\n\t\tInverse bool\n\t}\n\t// To is the dest of the path (the neighbors).\n\tTo struct {\n\t\t// Table holds the table name of the neighbors (to).\n\t\tTable string\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Dialect(name string) *DialectBuilder {\n\treturn \u0026DialectBuilder{name}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ThroughEdgeTable() bool {\n\treturn s.Edge.Rel == M2M\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) Schema(name string) *SelectTable {\n\ts.schema = name\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Table(name string) *SelectTable {\n\tb := Table(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Where(p *Predicate) *Selector {\n\tif len(s.collected) \u003e 0 {\n\t\ts.collected[len(s.collected)-1] = append(s.collected[len(s.collected)-1], p)\n\t\treturn s\n\t}\n\tif s.not {\n\t\tp = Not(p)\n\t\ts.not = false\n\t}\n\tswitch {\n\tcase s.where == nil:\n\t\ts.where = p\n\tcase s.where != nil \u0026\u0026 s.or:\n\t\ts.where = Or(s.where, p)\n\t\ts.or = false\n\tdefault:\n\t\ts.where = And(s.where, p)\n\t}\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) From(t TableView) *Selector {\n\ts.from = nil\n\treturn s.AppendFrom(t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Select(columns ...string) *Selector {\n\tb := Select(columns...)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) C(column string) string {\n\tname := s.name\n\tif s.as != \"\" {\n\t\tname = s.as\n\t}\n\tb := \u0026Builder{dialect: s.dialect}\n\tif s.as == \"\" {\n\t\tb.writeSchema(s.schema)\n\t}\n\tb.Ident(name).WriteByte('.').Ident(column)\n\treturn b.String()\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func EQ(col string, value any) *Predicate {\n\treturn P().EQ(col, value)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) On(c1, c2 string) *Selector {\n\ts.OnP(P(func(builder *Builder) {\n\t\tbuilder.Ident(c1).WriteOp(OpEQ).Ident(c2)\n\t}))\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Join(t TableView) *Selector {\n\treturn s.join(\"JOIN\", t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) C(column string) string {\n\t// Skip formatting qualified columns.\n\tif s.isQualified(column) {\n\t\treturn column\n\t}\n\tif s.as != \"\" {\n\t\tb := \u0026Builder{dialect: s.dialect}\n\t\tb.Ident(s.as)\n\t\tb.WriteByte('.')\n\t\tb.Ident(column)\n\t\treturn b.String()\n\t}\n\treturn s.Table().C(column)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) FromEdgeOwner() bool {\n\treturn s.Edge.Rel == M2O || (s.Edge.Rel == O2O \u0026\u0026 s.Edge.Inverse)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ToEdgeOwner() bool {\n\treturn s.Edge.Rel == O2M || (s.Edge.Rel == O2O \u0026\u0026 !s.Edge.Inverse)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        196
      ],
      "cover_details": {
        "line_cover_rate": 0.9393939393939394
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:setTableColumns",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestExecUpdateNode"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestCreateNode"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestBatchCreate"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestUpdateNode"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestUpdateNodes"
        }
      ],
      "name": "setTableColumns",
      "signature": "(u *updater) setTableColumns (update *sql.UpdateBuilder, addEdges, clearEdges map[Rel][]*EdgeSpec) error",
      "ground_truth": "func (u *updater) setTableColumns(update *sql.UpdateBuilder, addEdges, clearEdges map[Rel][]*EdgeSpec) error {\n\t// Avoid multiple assignments to the same column.\n\tsetEdges := make(map[string]bool)\n\tfor _, e := range addEdges[M2O] {\n\t\tsetEdges[e.Columns[0]] = true\n\t}\n\tfor _, e := range addEdges[O2O] {\n\t\tif e.Inverse || e.Bidi {\n\t\t\tsetEdges[e.Columns[0]] = true\n\t\t}\n\t}\n\tfor _, fi := range u.Fields.Clear {\n\t\tupdate.SetNull(fi.Column)\n\t}\n\tfor _, e := range clearEdges[M2O] {\n\t\tif col := e.Columns[0]; !setEdges[col] {\n\t\t\tupdate.SetNull(col)\n\t\t}\n\t}\n\tfor _, e := range clearEdges[O2O] {\n\t\tcol := e.Columns[0]\n\t\tif (e.Inverse || e.Bidi) \u0026\u0026 !setEdges[col] {\n\t\t\tupdate.SetNull(col)\n\t\t}\n\t}\n\terr := setTableColumns(u.Fields.Set, addEdges, func(column string, value driver.Value) {\n\t\tupdate.Set(column, value)\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, fi := range u.Fields.Add {\n\t\tupdate.Add(fi.Column, fi.Value)\n\t}\n\treturn nil\n}",
      "function_comment": "// setTableColumns sets the table columns and foreign_keys used in insert.",
      "function_statement": "// setTableColumns sets the table columns and foreign_keys used in insert.",
      "start_line": 1308,
      "end_line": 1343,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "updater struct {\n\tgraph\n\t*UpdateSpec\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "UpdateBuilder struct {\n\tBuilder\n\ttable     string\n\tschema    string\n\twhere     *Predicate\n\tnulls     []string\n\tcolumns   []string\n\treturning []string\n\tvalues    []any\n\torder     []any\n\tlimit     *int\n\tprefix    Queries\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "EdgeSpec struct {\n\t\tRel     Rel\n\t\tInverse bool\n\t\tTable   string\n\t\tSchema  string\n\t\tColumns []string\n\t\tBidi    bool        // bidirectional edge.\n\t\tTarget  *EdgeTarget // target nodes.\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "Rel int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "M2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "O2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "FieldMut struct {\n\t\tSet   []*FieldSpec // field = ?\n\t\tAdd   []*FieldSpec // field = field + ?\n\t\tClear []*FieldSpec // field = NULL\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "UpdateSpec struct {\n\t\tNode      *NodeSpec\n\t\tEdges     EdgeMut\n\t\tFields    FieldMut\n\t\tPredicate func(*sql.Selector)\n\t\tModifiers []func(*sql.UpdateBuilder)\n\n\t\tScanValues func(columns []string) ([]any, error)\n\t\tAssign     func(columns []string, values []any) error\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (u *UpdateBuilder) SetNull(column string) *UpdateBuilder {\n\tu.nulls = append(u.nulls, column)\n\treturn u\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "FieldSpec struct {\n\t\tColumn string\n\t\tType   field.Type\n\t\tValue  driver.Value // value to be stored.\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func setTableColumns(fields []*FieldSpec, edges map[Rel][]*EdgeSpec, set func(string, driver.Value)) (err error) {\n\tfor _, fi := range fields {\n\t\tvalue := fi.Value\n\t\tif fi.Type == field.TypeJSON {\n\t\t\tbuf, err := json.Marshal(value)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"marshal value for column %s: %w\", fi.Column, err)\n\t\t\t}\n\t\t\t// If the underlying driver does not support JSON types,\n\t\t\t// driver.DefaultParameterConverter will convert it to uint8.\n\t\t\tvalue = json.RawMessage(buf)\n\t\t}\n\t\tset(fi.Column, value)\n\t}\n\tfor _, e := range edges[M2O] {\n\t\tset(e.Columns[0], e.Target.Nodes[0])\n\t}\n\tfor _, e := range edges[O2O] {\n\t\tif e.Inverse || e.Bidi {\n\t\t\tset(e.Columns[0], e.Target.Nodes[0])\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (u *UpdateBuilder) Set(column string, v any) *UpdateBuilder {\n\tfor i := range u.columns {\n\t\tif column == u.columns[i] {\n\t\t\tu.values[i] = v\n\t\t\treturn u\n\t\t}\n\t}\n\tu.columns = append(u.columns, column)\n\tu.values = append(u.values, v)\n\treturn u\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (u *UpdateBuilder) Add(column string, v any) *UpdateBuilder {\n\tu.columns = append(u.columns, column)\n\tu.values = append(u.values, ExprFunc(func(b *Builder) {\n\t\tb.WriteString(\"COALESCE\")\n\t\tb.Wrap(func(b *Builder) {\n\t\t\tb.Ident(Table(u.table).C(column)).Comma().WriteByte('0')\n\t\t})\n\t\tb.WriteString(\" + \")\n\t\tb.Arg(v)\n\t}))\n\treturn u\n}",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/database/sql/driver/driver.go",
          "code_snippet": "Value any",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1308,
        1309,
        1310,
        1311,
        1312,
        1313,
        1314,
        1315,
        1316,
        1317,
        1319,
        1320,
        1321,
        1322,
        1323,
        1324,
        1325,
        1327,
        1328,
        1329,
        1330,
        1331,
        1333,
        1334,
        1335,
        1336,
        1339,
        1340,
        1341,
        1342
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:pgTextPath",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestAppend"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "pgTextPath",
      "signature": "(p *PathOptions) pgTextPath (b *sql.Builder)",
      "ground_truth": "func (p *PathOptions) pgTextPath(b *sql.Builder) {\n\tb.Ident(p.Ident)\n\tfor i, s := range p.Path {\n\t\tb.WriteString(\"-\u003e\")\n\t\tif p.Unquote \u0026\u0026 i == len(p.Path)-1 {\n\t\t\tb.WriteString(\"\u003e\")\n\t\t}\n\t\tif idx, ok := isJSONIdx(s); ok {\n\t\t\tb.WriteString(idx)\n\t\t} else {\n\t\t\tb.WriteString(\"'\" + s + \"'\")\n\t\t}\n\t}\n}",
      "function_comment": "// pgTextPath writes the JSON path in PostgreSQL text format: `\"a\"-\u003e'b'-\u003e\u003e'c'`.",
      "function_statement": "// pgTextPath writes the JSON path in PostgreSQL text format: `\"a\"-\u003e'b'-\u003e\u003e'c'`.",
      "start_line": 572,
      "end_line": 585,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "PathOptions struct {\n\tIdent   string\n\tPath    []string\n\tCast    string\n\tUnquote bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func isJSONIdx(s string) (string, bool) {\n\tif len(s) \u003e 2 \u0026\u0026 s[0] == '[' \u0026\u0026 s[len(s)-1] == ']' \u0026\u0026 (isNumber(s[1:len(s)-1]) || s[1] == '#' \u0026\u0026 isNumber(s[2:len(s)-1])) {\n\t\treturn s[1 : len(s)-1], true\n\t}\n\treturn \"\", false\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        572,
        573,
        574,
        575,
        576,
        577,
        578,
        579,
        580,
        581,
        582,
        583
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:DecoderOfMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "DecoderOfMap",
      "signature": "(ext decodeExtension) DecoderOfMap (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfMap(typ reflect2.Type) jsoniter.ValDecoder {\n\tmapType := typ.(reflect2.MapType)\n\tkeyType, elemType := mapType.Key(), mapType.Elem()\n\treturn \u0026mapDecoder{\n\t\tmapType:  mapType,\n\t\tkeyType:  keyType,\n\t\telemType: elemType,\n\t\tkeyDec:   ext.LazyDecoderOf(keyType),\n\t\telemDec:  ext.LazyDecoderOf(elemType),\n\t}\n}",
      "function_comment": "// DecoderOfMap returns a value decoder of a map type.",
      "function_statement": "// DecoderOfMap returns a value decoder of a map type.",
      "start_line": 61,
      "end_line": 71,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapDecoder struct {\n\tmapType  reflect2.MapType\n\tkeyType  reflect2.Type\n\telemType reflect2.Type\n\tkeyDec   jsoniter.ValDecoder\n\telemDec  jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "reflectMap",
      "signature": "(efaceDecoder) reflectMap (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (efaceDecoder) reflectMap(data []byte) (reflect2.Type, error) {\n\tvar key, elem any\n\tif err := Unmarshal(\n\t\tbytes.Replace(data, []byte(mapType), []byte(listType), 1),\n\t\t\u0026[...]*any{\u0026key, \u0026elem},\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot unmarshal first map item: %w\", err)\n\t}\n\n\tif key == nil {\n\t\treturn reflect2.TypeOf(map[any]any{}), nil\n\t} else if elem == nil {\n\t\treturn nil, errors.New(\"expect map element, but found only key\")\n\t}\n\n\tmapType := reflect.MapOf(reflect.TypeOf(key), reflect.TypeOf(elem))\n\treturn reflect2.Type2(mapType), nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 136,
      "end_line": 153,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "func Unmarshal(data []byte, v any) error {\n\treturn config.Unmarshal(data, v)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/bytes.go",
          "code_snippet": "func Replace(s, old, new []byte, n int) []byte {\n\tm := 0\n\tif n != 0 {\n\t\t// Compute number of replacements.\n\t\tm = Count(s, old)\n\t}\n\tif m == 0 {\n\t\t// Just return a copy.\n\t\treturn append([]byte(nil), s...)\n\t}\n\tif n \u003c 0 || m \u003c n {\n\t\tn = m\n\t}\n\n\t// Apply replacements to buffer.\n\tt := make([]byte, len(s)+n*(len(new)-len(old)))\n\tw := 0\n\tstart := 0\n\tfor i := 0; i \u003c n; i++ {\n\t\tj := start\n\t\tif len(old) == 0 {\n\t\t\tif i \u003e 0 {\n\t\t\t\t_, wid := utf8.DecodeRune(s[start:])\n\t\t\t\tj += wid\n\t\t\t}\n\t\t} else {\n\t\t\tj += Index(s[start:], old)\n\t\t}\n\t\tw += copy(t[w:], s[start:j])\n\t\tw += copy(t[w:], new)\n\t\tstart = j + len(old)\n\t}\n\tw += copy(t[w:], s[start:])\n\treturn t[0:w]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/map_swiss.go",
          "code_snippet": "func MapOf(key, elem Type) Type {\n\tktyp := key.common()\n\tetyp := elem.common()\n\n\tif ktyp.Equal == nil {\n\t\tpanic(\"reflect.MapOf: invalid key type \" + stringFor(ktyp))\n\t}\n\n\t// Look in cache.\n\tckey := cacheKey{Map, ktyp, etyp, 0}\n\tif mt, ok := lookupCache.Load(ckey); ok {\n\t\treturn mt.(Type)\n\t}\n\n\t// Look in known types.\n\ts := \"map[\" + stringFor(ktyp) + \"]\" + stringFor(etyp)\n\tfor _, tt := range typesByString(s) {\n\t\tmt := (*mapType)(unsafe.Pointer(tt))\n\t\tif mt.Key == ktyp \u0026\u0026 mt.Elem == etyp {\n\t\t\tti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))\n\t\t\treturn ti.(Type)\n\t\t}\n\t}\n\n\tgroup, slot := groupAndSlotOf(key, elem)\n\n\t// Make a map type.\n\t// Note: flag values must match those used in the TMAP case\n\t// in ../cmd/compile/internal/reflectdata/reflect.go:writeType.\n\tvar imap any = (map[unsafe.Pointer]unsafe.Pointer)(nil)\n\tmt := **(**mapType)(unsafe.Pointer(\u0026imap))\n\tmt.Str = resolveReflectName(newName(s, \"\", false, false))\n\tmt.TFlag = 0\n\tmt.Hash = fnv1(etyp.Hash, 'm', byte(ktyp.Hash\u003e\u003e24), byte(ktyp.Hash\u003e\u003e16), byte(ktyp.Hash\u003e\u003e8), byte(ktyp.Hash))\n\tmt.Key = ktyp\n\tmt.Elem = etyp\n\tmt.Group = group.common()\n\tmt.Hasher = func(p unsafe.Pointer, seed uintptr) uintptr {\n\t\treturn typehash(ktyp, p, seed)\n\t}\n\tmt.GroupSize = mt.Group.Size()\n\tmt.SlotSize = slot.Size()\n\tmt.ElemOff = slot.Field(1).Offset\n\tmt.Flags = 0\n\tif needKeyUpdate(ktyp) {\n\t\tmt.Flags |= abi.SwissMapNeedKeyUpdate\n\t}\n\tif hashMightPanic(ktyp) {\n\t\tmt.Flags |= abi.SwissMapHashMightPanic\n\t}\n\tif ktyp.Size_ \u003e abi.SwissMapMaxKeyBytes {\n\t\tmt.Flags |= abi.SwissMapIndirectKey\n\t}\n\tif etyp.Size_ \u003e abi.SwissMapMaxKeyBytes {\n\t\tmt.Flags |= abi.SwissMapIndirectElem\n\t}\n\tmt.PtrToThis = 0\n\n\tti, _ := lookupCache.LoadOrStore(ckey, toRType(\u0026mt.Type))\n\treturn ti.(Type)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func Type2(type1 reflect.Type) Type {\n\tif type1 == nil {\n\t\treturn nil\n\t}\n\treturn ConfigUnsafe.Type2(type1)\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        151,
        152
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/builder.go:Err",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestUpdateBuilder_OrderBy"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestSelector_ClearOrder"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestBuilder_Err"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestUpdateBuilder_WithPrefix"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestUpdateBuilder_SetExpr"
        }
      ],
      "name": "Err",
      "signature": "(b *Builder) Err () error",
      "ground_truth": "func (b *Builder) Err() error {\n\tif len(b.errs) == 0 {\n\t\treturn nil\n\t}\n\tbr := strings.Builder{}\n\tfor i := range b.errs {\n\t\tif i \u003e 0 {\n\t\t\tbr.WriteString(\"; \")\n\t\t}\n\t\tbr.WriteString(b.errs[i].Error())\n\t}\n\treturn errors.New(br.String())\n}",
      "function_comment": "// Err returns a concatenated error of all errors encountered during\n// the query-building, or were added manually by calling AddError.",
      "function_statement": "// Err returns a concatenated error of all errors encountered during\n// the query-building, or were added manually by calling AddError.",
      "start_line": 3075,
      "end_line": 3087,
      "file_path": "./dialect/sql/builder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        3075,
        3076,
        3077,
        3078,
        3079,
        3080,
        3081,
        3082,
        3083,
        3084,
        3086
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/graph/dsl/traversal.go:Query",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/graph/dsl",
          "rel_file_path": "dialect/gremlin/graph/dsl/dsl_test.go",
          "func_name": "TestTraverse"
        }
      ],
      "name": "Query",
      "signature": "(t *Traversal) Query () (string, Bindings)",
      "ground_truth": "func (t *Traversal) Query() (string, Bindings) {\n\tvar (\n\t\tnames    []any\n\t\tquery    strings.Builder\n\t\tbindings = Bindings{}\n\t)\n\tfor _, n := range t.nodes {\n\t\tcode, args := n.Code()\n\t\tquery.WriteString(code)\n\t\tfor _, arg := range args {\n\t\t\tnames = append(names, bindings.Add(arg))\n\t\t}\n\t}\n\treturn fmt.Sprintf(query.String(), names...), bindings\n}",
      "function_comment": "// Query returns the query-representation and its binding of this traversal object.",
      "function_statement": "// Query returns the query-representation and its binding of this traversal object.",
      "start_line": 396,
      "end_line": 410,
      "file_path": "./dialect/gremlin/graph/dsl/traversal.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/traversal.go",
          "code_snippet": "Traversal struct {\n\t// nodes holds the dsl nodes. first element is the reference name\n\t// of the TinkerGraph. defaults to \"g\".\n\tnodes []Node\n\terrs  []error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/dsl.go",
          "code_snippet": "Bindings map[string]any",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/dsl.go",
          "code_snippet": "Node interface {\n\t// Code returns the code representation of the element and its bindings (if any).\n\tCode() (string, []any)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/dsl.go",
          "code_snippet": "func (b Bindings) Add(v any) string {\n\tk := fmt.Sprintf(\"$%x\", len(b))\n\tswitch v := v.(type) {\n\tcase time.Time:\n\t\tb[k] = v.UnixNano()\n\tdefault:\n\t\tb[k] = v\n\t}\n\treturn k\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        396,
        397,
        398,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        406,
        407,
        409
      ],
      "cover_details": {
        "line_cover_rate": 0.8666666666666667
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/template.go:initTemplates",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        }
      ],
      "name": "initTemplates",
      "signature": "initTemplates ()",
      "ground_truth": "func initTemplates() {\n\ttemplates = MustParse(NewTemplate(\"templates\").\n\t\tParseFS(templateDir, \"template/*.tmpl\", \"template/*/*.tmpl\", \"template/*/*/*.tmpl\", \"template/*/*/*/*.tmpl\"))\n\tb := bytes.NewBuffer([]byte(\"package main\\n\"))\n\tcheck(templates.ExecuteTemplate(b, \"import\", Type{Config: \u0026Config{}}), \"load imports\")\n\tf, err := parser.ParseFile(token.NewFileSet(), \"\", b, parser.ImportsOnly)\n\tcheck(err, \"parse imports\")\n\tfor _, spec := range f.Imports {\n\t\tpath, err := strconv.Unquote(spec.Path.Value)\n\t\tcheck(err, \"unquote import path\")\n\t\timportPkg[filepath.Base(path)] = path\n\t}\n\tfor _, s := range drivers {\n\t\tfor _, path := range s.Imports {\n\t\t\timportPkg[filepath.Base(path)] = path\n\t\t}\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 234,
      "end_line": 251,
      "file_path": "./entc/gen/template.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "templates *Template",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "func MustParse(t *Template, err error) *Template {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "func NewTemplate(name string) *Template {\n\tt := \u0026Template{Template: template.New(name)}\n\treturn t.Funcs(Funcs)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "func (t *Template) ParseFS(fsys fs.FS, patterns ...string) (*Template, error) {\n\tif _, err := t.Template.ParseFS(fsys, patterns...); err != nil {\n\t\treturn nil, err\n\t}\n\treturn t, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "templateDir embed.FS",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func check(err error, msg string, args ...any) {\n\tif err != nil {\n\t\targs = append(args, err)\n\t\tpanic(graphError{fmt.Sprintf(msg+\": %s\", args...)})\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Config struct {\n\t\t// Schema holds the Go package path for the user ent/schema.\n\t\t// For example, \"\u003cproject\u003e/ent/schema\".\n\t\tSchema string\n\n\t\t// Target defines the filepath for the target directory that\n\t\t// holds the generated code. For example, \"./project/ent\".\n\t\t//\n\t\t// By default, 'ent generate ./ent/schema' uses './ent' as a\n\t\t// target directory.\n\t\tTarget string\n\n\t\t// Package defines the Go package path of the target directory\n\t\t// mentioned above. For example, \"github.com/org/project/ent\".\n\t\t//\n\t\t// By default, for schema package named \"\u003cproject\u003e/ent/schema\",\n\t\t// 'ent generate' uses \"\u003cproject\u003e/ent\" as a default package.\n\t\tPackage string\n\n\t\t// Header allows users to provide an optional header signature for\n\t\t// the generated files. It defaults to the standard 'go generate'\n\t\t// format: '// Code generated by ent, DO NOT EDIT.'.\n\t\tHeader string\n\n\t\t// Storage configuration for the codegen. Defaults to sql.\n\t\tStorage *Storage\n\n\t\t// IDType specifies the type of the id field in the codegen.\n\t\t// The supported types are string and int, which also the default.\n\t\tIDType *field.TypeInfo\n\n\t\t// Templates specifies a list of alternative templates to execute or\n\t\t// to override the default. If nil, the default template is used.\n\t\t//\n\t\t// Note that, additional templates are executed on the Graph object and\n\t\t// the execution output is stored in a file derived by the template name.\n\t\tTemplates []*Template\n\n\t\t// Features defines a list of additional features to add to the codegen phase.\n\t\t// For example, the PrivacyFeature.\n\t\tFeatures []Feature\n\n\t\t// Hooks holds an optional list of Hooks to apply on the graph before/after the code-generation.\n\t\tHooks []Hook\n\n\t\t// Annotations that are injected to the Config object can be accessed\n\t\t// globally in all templates. In order to access an annotation from a\n\t\t// graph template, do the following:\n\t\t//\n\t\t//\t{{- with $.Annotations.GQL }}\n\t\t//\t\t{{/* Annotation usage goes here. */}}\n\t\t//\t{{- end }}\n\t\t//\n\t\t// For type templates, we access the Config field to access the global\n\t\t// annotations, and not the type-specific annotation.\n\t\t//\n\t\t//\t{{- with $.Config.Annotations.GQL }}\n\t\t//\t\t{{/* Annotation usage goes here. */}}\n\t\t//\t{{- end }}\n\t\t//\n\t\t// Note that the mapping is from the annotation-name (e.g. \"GQL\") to a JSON decoded object.\n\t\tAnnotations Annotations\n\n\t\t// BuildFlags holds a list of custom build flags to use\n\t\t// when loading the schema packages.\n\t\tBuildFlags []string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/template.go",
          "code_snippet": "importPkg = map[string]string{\n\t\t\"context\": \"context\",\n\t\t\"driver\":  \"database/sql/driver\",\n\t\t\"errors\":  \"errors\",\n\t\t\"fmt\":     \"fmt\",\n\t\t\"math\":    \"math\",\n\t\t\"strings\": \"strings\",\n\t\t\"time\":    \"time\",\n\t\t\"ent\":     \"entgo.io/ent\",\n\t\t\"dialect\": \"entgo.io/ent/dialect\",\n\t\t\"field\":   \"entgo.io/ent/schema/field\",\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/storage.go",
          "code_snippet": "drivers = []*Storage{\n\t{\n\t\tName:      \"sql\",\n\t\tIdentName: \"SQL\",\n\t\tBuilder:   reflect.TypeOf(\u0026sql.Selector{}),\n\t\tDialects:  []string{\"dialect.SQLite\", \"dialect.MySQL\", \"dialect.Postgres\"},\n\t\tImports: []string{\n\t\t\t\"database/sql/driver\",\n\t\t\t\"entgo.io/ent/dialect/sql\",\n\t\t\t\"entgo.io/ent/dialect/sql/sqlgraph\",\n\t\t\t\"entgo.io/ent/dialect/sql/sqljson\",\n\t\t\t\"entgo.io/ent/schema/field\",\n\t\t},\n\t\tSchemaMode: Unique | Indexes | Cascade | Migrate,\n\t\tOps: func(f *Field) []Op {\n\t\t\tif f.IsString() \u0026\u0026 f.ConvertedToBasic() {\n\t\t\t\treturn []Op{EqualFold, ContainsFold}\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tOpCode: opCodes(sqlCode[:]),\n\t\tInit: func(g *Graph) error {\n\t\t\tvar with, without []string\n\t\t\tfor _, n := range g.Nodes {\n\t\t\t\tif s, err := n.TableSchema(); err == nil \u0026\u0026 s != \"\" {\n\t\t\t\t\twith = append(with, n.Name)\n\t\t\t\t} else {\n\t\t\t\t\twithout = append(without, n.Name)\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch {\n\t\t\tcase len(with) == 0:\n\t\t\t\treturn nil\n\t\t\tcase len(without) \u003e 0:\n\t\t\t\treturn fmt.Errorf(\"missing schema annotation for %s\", strings.Join(without, \", \"))\n\t\t\tdefault:\n\t\t\t\tif !g.featureEnabled(FeatureSchemaConfig) {\n\t\t\t\t\tg.Features = append(g.Features, FeatureSchemaConfig)\n\t\t\t\t}\n\t\t\t\tif !g.featureEnabled(featureMultiSchema) {\n\t\t\t\t\tg.Features = append(g.Features, featureMultiSchema)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\tName:      \"gremlin\",\n\t\tIdentName: \"Gremlin\",\n\t\tBuilder:   reflect.TypeOf(\u0026dsl.Traversal{}),\n\t\tDialects:  []string{\"dialect.Gremlin\"},\n\t\tImports: []string{\n\t\t\t\"entgo.io/ent/dialect/gremlin\",\n\t\t\t\"entgo.io/ent/dialect/gremlin/graph/dsl\",\n\t\t\t\"entgo.io/ent/dialect/gremlin/graph/dsl/__\",\n\t\t\t\"entgo.io/ent/dialect/gremlin/graph/dsl/g\",\n\t\t\t\"entgo.io/ent/dialect/gremlin/graph/dsl/p\",\n\t\t\t\"entgo.io/ent/dialect/gremlin/encoding/graphson\",\n\t\t},\n\t\tSchemaMode: Unique,\n\t\tOpCode:     opCodes(gremlinCode[:]),\n\t\tInit:       func(*Graph) error { return nil }, // Noop.\n\t},\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/storage.go",
          "code_snippet": "Storage struct {\n\tName       string             // storage name.\n\tBuilder    reflect.Type       // query builder type.\n\tDialects   []string           // supported dialects.\n\tIdentName  string             // identifier name (fields and funcs).\n\tImports    []string           // import packages needed.\n\tSchemaMode SchemaMode         // schema mode support.\n\tOps        func(*Field) []Op  // storage specific operations.\n\tOpCode     func(Op) string    // operation code for predicates.\n\tInit       func(*Graph) error // optional init function.\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func NewBuffer(buf []byte) *Buffer { return \u0026Buffer{buf: buf} }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/text/template/exec.go",
          "code_snippet": "func (t *Template) ExecuteTemplate(wr io.Writer, name string, data any) error {\n\ttmpl := t.Lookup(name)\n\tif tmpl == nil {\n\t\treturn fmt.Errorf(\"template: no template %q associated with template %q\", name, t.name)\n\t}\n\treturn tmpl.Execute(wr, data)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/parser/interface.go",
          "code_snippet": "func ParseFile(fset *token.FileSet, filename string, src any, mode Mode) (f *ast.File, err error) {\n\tif fset == nil {\n\t\tpanic(\"parser.ParseFile: no token.FileSet provided (fset == nil)\")\n\t}\n\n\t// get source\n\ttext, err := readSource(filename, src)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfile := fset.AddFile(filename, -1, len(text))\n\n\tvar p parser\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\t// resume same panic if it's not a bailout\n\t\t\tbail, ok := e.(bailout)\n\t\t\tif !ok {\n\t\t\t\tpanic(e)\n\t\t\t} else if bail.msg != \"\" {\n\t\t\t\tp.errors.Add(p.file.Position(bail.pos), bail.msg)\n\t\t\t}\n\t\t}\n\n\t\t// set result values\n\t\tif f == nil {\n\t\t\t// source is not a valid Go source file - satisfy\n\t\t\t// ParseFile API and return a valid (but) empty\n\t\t\t// *ast.File\n\t\t\tf = \u0026ast.File{\n\t\t\t\tName:  new(ast.Ident),\n\t\t\t\tScope: ast.NewScope(nil),\n\t\t\t}\n\t\t}\n\n\t\t// Ensure the start/end are consistent,\n\t\t// whether parsing succeeded or not.\n\t\tf.FileStart = token.Pos(file.Base())\n\t\tf.FileEnd = token.Pos(file.Base() + file.Size())\n\n\t\tp.errors.Sort()\n\t\terr = p.errors.Err()\n\t}()\n\n\t// parse source\n\tp.init(file, text, mode)\n\tf = p.parseFile()\n\n\treturn\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/token/position.go",
          "code_snippet": "func NewFileSet() *FileSet {\n\treturn \u0026FileSet{\n\t\tbase: 1, // 0 == NoPos\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/parser/interface.go",
          "code_snippet": "ImportsOnly",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/ast/ast.go",
          "code_snippet": "File struct {\n\tDoc     *CommentGroup // associated documentation; or nil\n\tPackage token.Pos     // position of \"package\" keyword\n\tName    *Ident        // package name\n\tDecls   []Decl        // top-level declarations; or nil\n\n\tFileStart, FileEnd token.Pos       // start and end of entire file\n\tScope              *Scope          // package scope (this file only). Deprecated: see Object\n\tImports            []*ImportSpec   // imports in this file\n\tUnresolved         []*Ident        // unresolved identifiers in this file. Deprecated: see Object\n\tComments           []*CommentGroup // list of all comments in the source file\n\tGoVersion          string          // minimum Go version required by //go:build or // +build directives\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strconv/quote.go",
          "code_snippet": "func Unquote(s string) (string, error) {\n\tout, rem, err := unquote(s, true)\n\tif len(rem) \u003e 0 {\n\t\treturn \"\", ErrSyntax\n\t}\n\treturn out, err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/ast/ast.go",
          "code_snippet": "BasicLit struct {\n\t\tValuePos token.Pos   // literal position\n\t\tKind     token.Token // token.INT, token.FLOAT, token.IMAG, token.CHAR, or token.STRING\n\t\tValue    string      // literal string; e.g. 42, 0x7f, 3.14, 1e-9, 2.4i, 'a', '\\x7f', \"foo\" or `\\m\\n\\o`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/ast/ast.go",
          "code_snippet": "ImportSpec struct {\n\t\tDoc     *CommentGroup // associated documentation; or nil\n\t\tName    *Ident        // local package name (including \".\"); or nil\n\t\tPath    *BasicLit     // import path\n\t\tComment *CommentGroup // line comments; or nil\n\t\tEndPos  token.Pos     // end of spec (overrides Path.Pos if nonzero)\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/path/filepath/path.go",
          "code_snippet": "func Base(path string) string {\n\treturn filepathlite.Base(path)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/dialect.go:setCase",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestAppend"
        }
      ],
      "name": "setCase",
      "signature": "setCase (u *sql.UpdateBuilder, column string, w when)",
      "ground_truth": "func setCase(u *sql.UpdateBuilder, column string, w when) {\n\tu.Set(column, sql.ExprFunc(func(b *sql.Builder) {\n\t\tb.WriteString(\"CASE WHEN \").Wrap(func(b *sql.Builder) {\n\t\t\tw.Cond(b)\n\t\t})\n\t\tb.WriteString(\" THEN \")\n\t\tw.Then(b)\n\t\tb.WriteString(\" ELSE \")\n\t\tw.Else(b)\n\t\tb.WriteString(\" END\")\n\t}))\n}",
      "function_comment": "// setCase sets the column value using the \"CASE WHEN\" statement.\n// The x defines the condition/predicate, t is the true (if) case,\n// and 'f' defines the false (else).",
      "function_statement": "// setCase sets the column value using the \"CASE WHEN\" statement.\n// The x defines the condition/predicate, t is the true (if) case,\n// and 'f' defines the false (else).",
      "start_line": 203,
      "end_line": 214,
      "file_path": "./dialect/sql/sqljson/dialect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "UpdateBuilder struct {\n\tBuilder\n\ttable     string\n\tschema    string\n\twhere     *Predicate\n\tnulls     []string\n\tcolumns   []string\n\treturning []string\n\tvalues    []any\n\torder     []any\n\tlimit     *int\n\tprefix    Queries\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/dialect.go",
          "code_snippet": "when struct{ Cond, Then, Else func(*sql.Builder) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (u *UpdateBuilder) Set(column string, v any) *UpdateBuilder {\n\tfor i := range u.columns {\n\t\tif column == u.columns[i] {\n\t\t\tu.values[i] = v\n\t\t\treturn u\n\t\t}\n\t}\n\tu.columns = append(u.columns, column)\n\tu.values = append(u.values, v)\n\treturn u\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func ExprFunc(fn func(*Builder)) Querier {\n\treturn \u0026exprFunc{fn: fn}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Wrap(f func(*Builder)) *Builder {\n\tnb := \u0026Builder{dialect: b.dialect, total: b.total, sb: \u0026strings.Builder{}}\n\tnb.WriteByte('(')\n\tf(nb)\n\tnb.WriteByte(')')\n\tb.WriteString(nb.String())\n\tb.args = append(b.args, nb.args...)\n\tb.total = nb.total\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/graph/dsl/dsl.go:code",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/graph/dsl",
          "rel_file_path": "dialect/gremlin/graph/dsl/dsl_test.go",
          "func_name": "TestTraverse"
        }
      ],
      "name": "code",
      "signature": "code (v any) (string, []any)",
      "ground_truth": "func code(v any) (string, []any) {\n\tswitch n := v.(type) {\n\tcase Node:\n\t\treturn n.Code()\n\tcase *Traversal:\n\t\tvar (\n\t\t\tb    strings.Builder\n\t\t\targs []any\n\t\t)\n\t\tfor i := range n.nodes {\n\t\t\tcode, nargs := n.nodes[i].Code()\n\t\t\tb.WriteString(code)\n\t\t\targs = append(args, nargs...)\n\t\t}\n\t\treturn b.String(), args\n\tdefault:\n\t\treturn \"%s\", []any{v}\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 189,
      "end_line": 207,
      "file_path": "./dialect/gremlin/graph/dsl/dsl.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/dsl.go",
          "code_snippet": "Node interface {\n\t// Code returns the code representation of the element and its bindings (if any).\n\tCode() (string, []any)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/traversal.go",
          "code_snippet": "Traversal struct {\n\t// nodes holds the dsl nodes. first element is the reference name\n\t// of the TinkerGraph. defaults to \"g\".\n\tnodes []Node\n\terrs  []error\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205
      ],
      "cover_details": {
        "line_cover_rate": 0.8947368421052632
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/request.go:MarshalText",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestAuthenticateRequestEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestCredentialsMarshaling"
        }
      ],
      "name": "MarshalText",
      "signature": "(c Credentials) MarshalText () ([]byte, error)",
      "ground_truth": "func (c Credentials) MarshalText() ([]byte, error) {\n\tvar buf bytes.Buffer\n\tbuf.WriteByte(0)\n\tbuf.WriteString(c.Username)\n\tbuf.WriteByte(0)\n\tbuf.WriteString(c.Password)\n\n\tenc := base64.StdEncoding\n\ttext := make([]byte, enc.EncodedLen(buf.Len()))\n\tenc.Encode(text, buf.Bytes())\n\treturn text, nil\n}",
      "function_comment": "// MarshalText implements encoding.TextMarshaler interface.",
      "function_statement": "// MarshalText implements encoding.TextMarshaler interface.",
      "start_line": 78,
      "end_line": 89,
      "file_path": "./dialect/gremlin/request.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Credentials struct{ Username, Password string }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "Buffer struct {\n\tbuf      []byte // contents are the bytes buf[off : len(buf)]\n\toff      int    // read at \u0026buf[off], write at \u0026buf[len(buf)]\n\tlastRead readOp // last read operation, so that Unread* can work correctly.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteByte(c byte) error {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(1)\n\tif !ok {\n\t\tm = b.grow(1)\n\t}\n\tb.buf[m] = c\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) WriteString(s string) (n int, err error) {\n\tb.lastRead = opInvalid\n\tm, ok := b.tryGrowByReslice(len(s))\n\tif !ok {\n\t\tm = b.grow(len(s))\n\t}\n\treturn copy(b.buf[m:], s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/base64/base64.go",
          "code_snippet": "StdEncoding = NewEncoding(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/base64/base64.go",
          "code_snippet": "func (enc *Encoding) EncodedLen(n int) int {\n\tif enc.padChar == NoPadding {\n\t\treturn n/3*4 + (n%3*8+5)/6 // minimum # chars at 6 bits per char\n\t}\n\treturn (n + 2) / 3 * 4 // minimum # 4-char quanta, 3 bytes each\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Len() int { return len(b.buf) - b.off }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/base64/base64.go",
          "code_snippet": "func (enc *Encoding) Encode(dst, src []byte) {\n\tif len(src) == 0 {\n\t\treturn\n\t}\n\t// enc is a pointer receiver, so the use of enc.encode within the hot\n\t// loop below means a nil check at every operation. Lift that nil check\n\t// outside of the loop to speed up the encoder.\n\t_ = enc.encode\n\n\tdi, si := 0, 0\n\tn := (len(src) / 3) * 3\n\tfor si \u003c n {\n\t\t// Convert 3x 8bit source bytes into 4 bytes\n\t\tval := uint(src[si+0])\u003c\u003c16 | uint(src[si+1])\u003c\u003c8 | uint(src[si+2])\n\n\t\tdst[di+0] = enc.encode[val\u003e\u003e18\u00260x3F]\n\t\tdst[di+1] = enc.encode[val\u003e\u003e12\u00260x3F]\n\t\tdst[di+2] = enc.encode[val\u003e\u003e6\u00260x3F]\n\t\tdst[di+3] = enc.encode[val\u00260x3F]\n\n\t\tsi += 3\n\t\tdi += 4\n\t}\n\n\tremain := len(src) - si\n\tif remain == 0 {\n\t\treturn\n\t}\n\t// Add the remaining small block\n\tval := uint(src[si+0]) \u003c\u003c 16\n\tif remain == 2 {\n\t\tval |= uint(src[si+1]) \u003c\u003c 8\n\t}\n\n\tdst[di+0] = enc.encode[val\u003e\u003e18\u00260x3F]\n\tdst[di+1] = enc.encode[val\u003e\u003e12\u00260x3F]\n\n\tswitch remain {\n\tcase 2:\n\t\tdst[di+2] = enc.encode[val\u003e\u003e6\u00260x3F]\n\t\tif enc.padChar != NoPadding {\n\t\t\tdst[di+3] = byte(enc.padChar)\n\t\t}\n\tcase 1:\n\t\tif enc.padChar != NoPadding {\n\t\t\tdst[di+2] = byte(enc.padChar)\n\t\t\tdst[di+3] = byte(enc.padChar)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:setupTables",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        }
      ],
      "name": "setupTables",
      "signature": "(a *Atlas) setupTables (tables []*Table)",
      "ground_truth": "func (a *Atlas) setupTables(tables []*Table) {\n\tfor _, t := range tables {\n\t\tif t.columns == nil {\n\t\t\tt.columns = make(map[string]*Column, len(t.Columns))\n\t\t}\n\t\tfor _, c := range t.Columns {\n\t\t\tt.columns[c.Name] = c\n\t\t}\n\t\tfor _, idx := range t.Indexes {\n\t\t\tidx.Name = a.symbol(idx.Name)\n\t\t\tfor _, c := range idx.Columns {\n\t\t\t\tc.indexes.append(idx)\n\t\t\t}\n\t\t}\n\t\tfor _, pk := range t.PrimaryKey {\n\t\t\tc := t.columns[pk.Name]\n\t\t\tc.Key = PrimaryKey\n\t\t\tpk.Key = PrimaryKey\n\t\t}\n\t\tfor _, fk := range t.ForeignKeys {\n\t\t\tfk.Symbol = a.symbol(fk.Symbol)\n\t\t\tfor i := range fk.Columns {\n\t\t\t\tfk.Columns[i].foreign = fk\n\t\t\t}\n\t\t}\n\t}\n}",
      "function_comment": "// setupTables ensures the table is configured properly, like table columns\n// are linked to their indexes, and PKs columns are defined.",
      "function_statement": "// setupTables ensures the table is configured properly, like table columns\n// are linked to their indexes, and PKs columns are defined.",
      "start_line": 1079,
      "end_line": 1105,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\tName       string                  // index name.\n\tUnique     bool                    // uniqueness.\n\tColumns    []*Column               // actual table columns.\n\tAnnotation *entsql.IndexAnnotation // index annotation.\n\tcolumns    []string                // columns loaded from query scan.\n\trealname   string                  // real name in the database (Postgres only).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) symbol(name string) string {\n\tsize := 64\n\tif a.dialect == dialect.Postgres {\n\t\tsize = 63\n\t}\n\tif len(name) \u003c= size {\n\t\treturn name\n\t}\n\treturn fmt.Sprintf(\"%s_%x\", name[:size-33], md5.Sum([]byte(name)))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func (i *Indexes) append(idx1 *Index) {\n\tfor _, idx2 := range *i {\n\t\tif idx2.Name == idx1.Name {\n\t\t\treturn\n\t\t}\n\t}\n\t*i = append(*i, idx1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "PrimaryKey = \"PRI\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "ForeignKey struct {\n\tSymbol     string          // foreign-key name. Generated if empty.\n\tColumns    []*Column       // table column\n\tRefTable   *Table          // referenced table.\n\tRefColumns []*Column       // referenced columns.\n\tOnUpdate   ReferenceOption // action on update.\n\tOnDelete   ReferenceOption // action on delete.\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1079,
        1080,
        1081,
        1082,
        1083,
        1084,
        1085,
        1086,
        1087,
        1088,
        1089,
        1090,
        1091,
        1093,
        1094,
        1095,
        1096,
        1097,
        1098,
        1099,
        1100,
        1101,
        1102
      ],
      "cover_details": {
        "line_cover_rate": 0.8518518518518519
      }
    },
    {
      "id": "entgo.io/ent/entql/entql.go:Or",
      "testcases": [
        {
          "package": "entgo.io/ent/entql",
          "rel_file_path": "entql/entql_test.go",
          "func_name": "TestPString"
        },
        {
          "package": "entgo.io/ent/entql",
          "rel_file_path": "entql/types_test.go",
          "func_name": "TestFielder"
        }
      ],
      "name": "Or",
      "signature": "Or (x, y P, z ...P) P",
      "ground_truth": "func Or(x, y P, z ...P) P {\n\tif len(z) == 0 {\n\t\treturn \u0026BinaryExpr{\n\t\t\tOp: OpOr,\n\t\t\tX:  x,\n\t\t\tY:  y,\n\t\t}\n\t}\n\treturn \u0026NaryExpr{\n\t\tOp: OpOr,\n\t\tXs: append([]Expr{x, y}, p2expr(z)...),\n\t}\n}",
      "function_comment": "// Or returns a composed predicate that represents the logical OR predicate.",
      "function_statement": "// Or returns a composed predicate that represents the logical OR predicate.",
      "start_line": 147,
      "end_line": 159,
      "file_path": "./entql/entql.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "P interface {\n\t\tExpr\n\t\tNegate() P\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "BinaryExpr struct {\n\t\tOp   Op\n\t\tX, Y Expr\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "OpOr",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "NaryExpr struct {\n\t\tOp Op\n\t\tXs []Expr\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "Expr interface {\n\t\texpr()\n\t\tfmt.Stringer\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "func p2expr(ps []P) []Expr {\n\texpr := make([]Expr, len(ps))\n\tfor i := range ps {\n\t\texpr[i] = ps[i]\n\t}\n\treturn expr\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "entgo.io/ent/cmd/internal/printer/printer.go:node",
      "testcases": [
        {
          "package": "entgo.io/ent/cmd/internal/printer",
          "rel_file_path": "cmd/internal/printer/printer_test.go",
          "func_name": "TestPrinter_Print"
        }
      ],
      "name": "node",
      "signature": "(p Config) node (t *gen.Type)",
      "ground_truth": "func (p Config) node(t *gen.Type) {\n\tvar (\n\t\tb      strings.Builder\n\t\tid     []*gen.Field\n\t\ttable  = tablewriter.NewWriter(\u0026b)\n\t\theader = []string{\"Field\", \"Type\", \"Unique\", \"Optional\", \"Nillable\", \"Default\", \"UpdateDefault\", \"Immutable\", \"StructTag\", \"Validators\", \"Comment\"}\n\t)\n\tb.WriteString(t.Name + \":\\n\")\n\ttable.Options(\n\t\ttablewriter.WithHeaderConfig(tw.CellConfig{\n\t\t\tPadding: tw.CellPadding{\n\t\t\t\tGlobal: tw.Padding{\n\t\t\t\t\tLeft:  tw.Space,\n\t\t\t\t\tRight: tw.Space,\n\t\t\t\t},\n\t\t\t},\n\t\t\tFormatting: tw.CellFormatting{\n\t\t\t\tAutoFormat: tw.Off,\n\t\t\t},\n\t\t}),\n\t\ttablewriter.WithRendition(tw.Rendition{\n\t\t\tSymbols: tw.NewSymbols(tw.StyleASCII),\n\t\t}),\n\t)\n\ttable.Header(header)\n\tvar alignment = make([]tw.Align, 0)\n\tif t.ID != nil {\n\t\tid = append(id, t.ID)\n\t}\n\tfor _, f := range append(id, t.Fields...) {\n\t\tv := reflect.ValueOf(*f)\n\t\trow := make([]string, len(header))\n\t\tfor i := 0; i \u003c len(row)-1; i++ {\n\t\t\tfield := v.FieldByNameFunc(func(name string) bool {\n\t\t\t\t// The first field is mapped from \"Name\" to \"Field\".\n\t\t\t\treturn name == \"Name\" \u0026\u0026 i == 0 || name == header[i]\n\t\t\t})\n\t\t\trow[i] = fmt.Sprint(field.Interface())\n\t\t\t_, err := strconv.Atoi(row[i])\n\t\t\tif err == nil {\n\t\t\t\talignment = append(alignment, tw.AlignRight)\n\t\t\t} else {\n\t\t\t\talignment = append(alignment, tw.AlignLeft)\n\t\t\t}\n\t\t}\n\t\trow[len(row)-1] = f.Comment()\n\t\t_ = table.Append(row)\n\t\ttable.Options(\n\t\t\ttablewriter.WithRowAlignmentConfig(\n\t\t\t\ttw.CellAlignment{PerColumn: alignment},\n\t\t\t),\n\t\t)\n\t}\n\terr := table.Render()\n\tif err != nil {\n\t\treturn\n\t}\n\t// Create new table for edges\n\ttable = tablewriter.NewWriter(\u0026b)\n\ttable.Options(\n\t\ttablewriter.WithHeaderConfig(tw.CellConfig{\n\t\t\tFormatting: tw.CellFormatting{AutoFormat: tw.Off},\n\t\t\tPadding: tw.CellPadding{\n\t\t\t\tGlobal: tw.Padding{\n\t\t\t\t\tLeft:  tw.Space,\n\t\t\t\t\tRight: tw.Space,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\ttablewriter.WithRendition(tw.Rendition{\n\t\t\tSymbols: tw.NewSymbols(tw.StyleASCII),\n\t\t}),\n\t)\n\ttable.Header([]string{\"Edge\", \"Type\", \"Inverse\", \"BackRef\", \"Relation\", \"Unique\", \"Optional\", \"Comment\"})\n\thasEdges := false\n\tfor _, e := range t.Edges {\n\t\thasEdges = true\n\t\terr := table.Append([]string{\n\t\t\te.Name,\n\t\t\te.Type.Name,\n\t\t\tstrconv.FormatBool(e.IsInverse()),\n\t\t\te.Inverse,\n\t\t\te.Rel.Type.String(),\n\t\t\tstrconv.FormatBool(e.Unique),\n\t\t\tstrconv.FormatBool(e.Optional),\n\t\t\te.Comment(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tif hasEdges {\n\t\terr := table.Render()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tio.WriteString(p, strings.ReplaceAll(b.String(), \"\\n\", \"\\n\\t\")+\"\\n\")\n}",
      "function_comment": "// node returns description of a type. The format of the description is:\n//\n//\tType:\n//\t\t\t\u003cFields Table\u003e\n//\n//\t\t\t\u003cEdges Table\u003e",
      "function_statement": "// node returns description of a type. The format of the description is:\n//\n//\tType:\n//\t\t\t\u003cFields Table\u003e\n//\n//\t\t\t\u003cEdges Table\u003e",
      "start_line": 43,
      "end_line": 141,
      "file_path": "./cmd/internal/printer/printer.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/cmd/internal/printer/printer.go",
          "code_snippet": "Config struct {\n\tio.Writer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Field struct {\n\t\tcfg *Config\n\t\tdef *load.Field\n\t\ttyp *Type\n\t\t// Name is the name of this field in the database schema.\n\t\tName string\n\t\t// Type holds the type information of the field.\n\t\tType *field.TypeInfo\n\t\t// Unique indicate if this field is a unique field.\n\t\tUnique bool\n\t\t// Optional indicates is this field is optional on create.\n\t\tOptional bool\n\t\t// Nillable indicates that this field can be null in the\n\t\t// database and pointer in the generated entities.\n\t\tNillable bool\n\t\t// Default indicates if this field has a default value for creation.\n\t\tDefault bool\n\t\t// Enums information for enum fields.\n\t\tEnums []Enum\n\t\t// UpdateDefault indicates if this field has a default value for update.\n\t\tUpdateDefault bool\n\t\t// Immutable indicates is this field cannot be updated.\n\t\tImmutable bool\n\t\t// StructTag of the field. default to \"json\".\n\t\tStructTag string\n\t\t// Validators holds the number of validators the field have.\n\t\tValidators int\n\t\t// Position info of the field.\n\t\tPosition *load.Position\n\t\t// UserDefined indicates that this field was defined explicitly by the user in\n\t\t// the schema. Unlike the default id field, which is defined by the generator.\n\t\tUserDefined bool\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// referenced foreign-key.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (f Field) Comment() string {\n\tif f.def != nil {\n\t\treturn f.def.Comment\n\t}\n\treturn \"\"\n}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) IsInverse() bool { return e.Inverse != \"\" }",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (r Rel) String() string {\n\ts := \"Unknown\"\n\tswitch r {\n\tcase O2O:\n\t\ts = \"O2O\"\n\tcase O2M:\n\t\ts = \"O2M\"\n\tcase M2O:\n\t\ts = \"M2O\"\n\tcase M2M:\n\t\ts = \"M2M\"\n\t}\n\treturn s\n}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Relation struct {\n\t\t// Type holds the relation type of the edge.\n\t\tType Rel\n\t\t// Table holds the relation table for this edge.\n\t\t// For O2O and O2M, it's the table name of the type we're this edge point to.\n\t\t// For M2O, this is the owner's type, and for M2M this is the join table.\n\t\tTable string\n\t\t// Columns holds the relation column(s) in the relation table above.\n\t\t// For O2M, M2O and O2O, it contains one element with the column name.\n\t\t// For M2M edges, it contains two columns defined in the join table with\n\t\t// the same order as defined in the schema: (owner_id, reference_id).\n\t\tColumns []string\n\t\t// foreign-key information for non-M2M edges.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) Comment() string {\n\tif e.def != nil {\n\t\treturn e.def.Comment\n\t}\n\treturn \"\"\n}",
          "ref_module": "gen"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func NewWriter(w io.Writer) *Table {\n\tt := NewTable(w)\n\tif t.logger != nil {\n\t\tt.logger.Debug(\"NewWriter created buffered Table\")\n\t}\n\treturn t\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Options(opts ...Option) *Table {\n\n\t// add logger\n\tif t.logger == nil {\n\t\tt.logger = ll.New(\"table\").Handler(lh.NewTextHandler(t.trace))\n\t}\n\n\t// loop through options\n\tfor _, opt := range opts {\n\t\topt(t)\n\t}\n\n\t// force debugging mode if set\n\t// This should  be move away form WithDebug\n\tif t.config.Debug == true {\n\t\tt.logger.Enable()\n\t\tt.logger.Resume()\n\t} else {\n\t\tt.logger.Disable()\n\t\tt.logger.Suspend()\n\t}\n\n\t// Get additional system information for debugging\n\tgoVersion := runtime.Version()\n\tgoOS := runtime.GOOS\n\tgoArch := runtime.GOARCH\n\tnumCPU := runtime.NumCPU()\n\n\tt.logger.Infof(\"Environment: LC_CTYPE=%s, LANG=%s, TERM=%s\", os.Getenv(\"LC_CTYPE\"), os.Getenv(\"LANG\"), os.Getenv(\"TERM\"))\n\tt.logger.Infof(\"Go Runtime: Version=%s, OS=%s, Arch=%s, CPUs=%d\", goVersion, goOS, goArch, numCPU)\n\n\t// send logger to renderer\n\t// this will overwrite the default logger\n\tt.renderer.Logger(t.logger)\n\treturn t\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithHeaderConfig(config tw.CellConfig) Option {\n\treturn func(target *Table) {\n\t\ttarget.config.Header = config\n\t\tif target.logger != nil {\n\t\t\ttarget.logger.Debug(\"Option: WithHeaderConfig applied to Table.\")\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellConfig struct {\n\tFormatting   CellFormatting // Cell formatting options\n\tPadding      CellPadding    // Padding configuration\n\tCallbacks    CellCallbacks  // Callback functions (unused)\n\tFilter       CellFilter     // Function to filter cell content (renamed from Filter Filter)\n\tAlignment    CellAlignment  // Alignment configuration for cells\n\tColMaxWidths CellWidth      // Per-column maximum width overrides\n\n\t// Deprecated: use Alignment.PerColumn instead. Will be removed in a future version.\n\t// will be removed soon\n\tColumnAligns []Align // Per-column alignment overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellPadding struct {\n\tGlobal    Padding   // Default padding applied to all cells\n\tPerColumn []Padding // Column-specific padding overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/types.go",
          "code_snippet": "Padding struct {\n\tLeft   string\n\tRight  string\n\tTop    string\n\tBottom string\n\n\t// Overwrite forces tablewriter to use this padding configuration exactly as specified,\n\t// even when empty. When false (default), empty Padding fields will inherit defaults.\n\t//\n\t// For explicit no-padding, use the PaddingNone constant instead of setting Overwrite.\n\tOverwrite bool\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "Space   = \" \"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellFormatting struct {\n\tAutoWrap  int // Wrapping behavior (e.g., WrapTruncate, WrapNormal)\n\tMergeMode int // Bitmask for merge behavior (e.g., MergeHorizontal, MergeVertical)\n\n\t// Changed form bool to State\n\t// See https://github.com/olekukonko/tablewriter/issues/261\n\tAutoFormat State // Enables automatic formatting (e.g., title case for headers)\n\n\t// Deprecated: kept for compatibility\n\t// will be removed soon\n\tAlignment Align // Text alignment within the cell (e.g., Left, Right, Center)\n\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "Off     State = Fail",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithRendition(rendition tw.Rendition) Option {\n\treturn func(target *Table) {\n\t\tif target.renderer == nil {\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Warn(\"Option: WithRendition: No renderer set on table.\")\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif ru, ok := target.renderer.(tw.Renditioning); ok {\n\t\t\tru.Rendition(rendition)\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Debugf(\"Option: WithRendition: Applied to renderer via Renditioning.SetRendition(): %+v\", rendition)\n\t\t\t}\n\t\t} else {\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Warnf(\"Option: WithRendition: Current renderer type %T does not implement tw.Renditioning. Rendition may not be applied as expected.\", target.renderer)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/renderer.go",
          "code_snippet": "Rendition struct {\n\tBorders   Border   // Border visibility settings\n\tSymbols   Symbols  // Symbols used for table drawing\n\tSettings  Settings // Rendering behavior settings\n\tStreaming bool\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/symbols.go",
          "code_snippet": "func NewSymbols(style BorderStyle) Symbols {\n\tswitch style {\n\tcase StyleASCII:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameASCII,\n\t\t\trow:    \"-\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t},\n\t\t\theaderLeft:  \"+\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \"+\",\n\t\t}\n\tcase StyleLight, StyleDefault:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLight,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┼\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌\", \"┬\", \"┐\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"└\", \"┴\", \"┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"┼\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleHeavy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHeavy,\n\t\t\trow:    \"━\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╋\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┏\", \"┳\", \"┓\",\n\t\t\t\t\"┣\", \"╋\", \"┫\",\n\t\t\t\t\"┗\", \"┻\", \"┛\",\n\t\t\t},\n\t\t\theaderLeft:  \"┣\",\n\t\t\theaderMid:   \"╋\",\n\t\t\theaderRight: \"┫\",\n\t\t}\n\tcase StyleDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDouble,\n\t\t\trow:    \"═\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╬\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔\", \"╦\", \"╗\",\n\t\t\t\t\"╠\", \"╬\", \"╣\",\n\t\t\t\t\"╚\", \"╩\", \"╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╠\",\n\t\t\theaderMid:   \"╬\",\n\t\t\theaderRight: \"╣\",\n\t\t}\n\tcase StyleDoubleLong:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDoubleLong,\n\t\t\trow:    \"═╡═\",\n\t\t\tcolumn: \"╞\",\n\t\t\tcenter: \"╪\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔═╡\", \"═╤═\", \"╡═╗\",\n\t\t\t\t\"╟ \", \"╪ \", \" ╢\",\n\t\t\t\t\"╚═╡\", \"═╧═\", \"╡═╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╟═╡\",\n\t\t\theaderMid:   \"╪═╡\",\n\t\t\theaderRight: \"╡═╢\",\n\t\t}\n\tcase StyleLightHeavy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLightHeavy,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╂\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┍\", \"┯\", \"┑\",\n\t\t\t\t\"┝\", \"╂\", \"┥\",\n\t\t\t\t\"┕\", \"┷\", \"┙\",\n\t\t\t},\n\t\t\theaderLeft:  \"┝\",\n\t\t\theaderMid:   \"╂\",\n\t\t\theaderRight: \"┥\",\n\t\t}\n\tcase StyleHeavyLight:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHeavyLight,\n\t\t\trow:    \"━\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┎\", \"┰\", \"┒\",\n\t\t\t\t\"┠\", \"┿\", \"┨\",\n\t\t\t\t\"┖\", \"┸\", \"┚\",\n\t\t\t},\n\t\t\theaderLeft:  \"┠\",\n\t\t\theaderMid:   \"┿\",\n\t\t\theaderRight: \"┨\",\n\t\t}\n\tcase StyleLightDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLightDouble,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╫\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╓\", \"╥\", \"╖\",\n\t\t\t\t\"╟\", \"╫\", \"╢\",\n\t\t\t\t\"╙\", \"╨\", \"╜\",\n\t\t\t},\n\t\t\theaderLeft:  \"╟\",\n\t\t\theaderMid:   \"╫\",\n\t\t\theaderRight: \"╢\",\n\t\t}\n\tcase StyleDoubleLight:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDoubleLight,\n\t\t\trow:    \"═\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"╪\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╒\", \"╤\", \"╕\",\n\t\t\t\t\"╞\", \"╪\", \"╡\",\n\t\t\t\t\"╘\", \"╧\", \"╛\",\n\t\t\t},\n\t\t\theaderLeft:  \"╞\",\n\t\t\theaderMid:   \"╪\",\n\t\t\theaderRight: \"╡\",\n\t\t}\n\tcase StyleRounded:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameRounded,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┼\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╭\", \"┬\", \"╮\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"╰\", \"┴\", \"╯\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"┼\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleMarkdown:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMarkdown,\n\t\t\trow:    \"-\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"|\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"|\", \"|\", \"|\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t},\n\t\t\theaderLeft:  \"|\",\n\t\t\theaderMid:   \"|\",\n\t\t\theaderRight: \"|\",\n\t\t}\n\tcase StyleGraphical:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameGraphical,\n\t\t\trow:    \"┄┄\",\n\t\t\tcolumn: \"┆\",\n\t\t\tcenter: \"╂\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌┄\", \"┄┄\", \"┄┐\",\n\t\t\t\t\"┆ \", \"╂ \", \" ┆\",\n\t\t\t\t\"└┄\", \"┄┄\", \"┄┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├┄\",\n\t\t\theaderMid:   \"╂┄\",\n\t\t\theaderRight: \"┄┤\",\n\t\t}\n\tcase StyleMerger:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMerger,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌\", \"┬\", \"┐\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"└\", \"┴\", \"┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleDotted:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDotted,\n\t\t\trow:    \"·\",\n\t\t\tcolumn: \":\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\".\", \"·\", \".\",\n\t\t\t\t\":\", \"+\", \":\",\n\t\t\t\t\"'\", \"·\", \"'\",\n\t\t\t},\n\t\t\theaderLeft:  \":\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \":\",\n\t\t}\n\tcase StyleArrow:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArrow,\n\t\t\trow:    \"→\",\n\t\t\tcolumn: \"↓\",\n\t\t\tcenter: \"↔\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"↗\", \"↑\", \"↖\",\n\t\t\t\t\"→\", \"↔\", \"←\",\n\t\t\t\t\"↘\", \"↓\", \"↙\",\n\t\t\t},\n\t\t\theaderLeft:  \"→\",\n\t\t\theaderMid:   \"↔\",\n\t\t\theaderRight: \"←\",\n\t\t}\n\tcase StyleStarry:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameStarry,\n\t\t\trow:    \"★\",\n\t\t\tcolumn: \"☆\",\n\t\t\tcenter: \"✶\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"✧\", \"✯\", \"✧\",\n\t\t\t\t\"✦\", \"✶\", \"✦\",\n\t\t\t\t\"✧\", \"✯\", \"✧\",\n\t\t\t},\n\t\t\theaderLeft:  \"✦\",\n\t\t\theaderMid:   \"✶\",\n\t\t\theaderRight: \"✦\",\n\t\t}\n\tcase StyleHearts:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHearts,\n\t\t\trow:    \"♥\",\n\t\t\tcolumn: \"❤\",\n\t\t\tcenter: \"✚\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"❥\", \"♡\", \"❥\",\n\t\t\t\t\"❣\", \"✚\", \"❣\",\n\t\t\t\t\"❦\", \"♡\", \"❦\",\n\t\t\t},\n\t\t\theaderLeft:  \"❣\",\n\t\t\theaderMid:   \"✚\",\n\t\t\theaderRight: \"❣\",\n\t\t}\n\tcase StyleCircuit:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCircuit,\n\t\t\trow:    \"=\",\n\t\t\tcolumn: \"||\",\n\t\t\tcenter: \"\u003c\u003e\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"/*\", \"##\", \"*/\",\n\t\t\t\t\"//\", \"\u003c\u003e\", \"\\\\\",\n\t\t\t\t\"\\\\*\", \"##\", \"*/\",\n\t\t\t},\n\t\t\theaderLeft:  \"//\",\n\t\t\theaderMid:   \"\u003c\u003e\",\n\t\t\theaderRight: \"\\\\\",\n\t\t}\n\tcase StyleNature:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameNature,\n\t\t\trow:    \"~\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"❀\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🌱\", \"🌿\", \"🌱\",\n\t\t\t\t\"🍃\", \"❀\", \"🍃\",\n\t\t\t\t\"🌻\", \"🌾\", \"🌻\",\n\t\t\t},\n\t\t\theaderLeft:  \"🍃\",\n\t\t\theaderMid:   \"❀\",\n\t\t\theaderRight: \"🍃\",\n\t\t}\n\tcase StyleArtistic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArtistic,\n\t\t\trow:    \"▬\",\n\t\t\tcolumn: \"▐\",\n\t\t\tcenter: \"⬔\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◈\", \"◊\", \"◈\",\n\t\t\t\t\"◀\", \"⬔\", \"▶\",\n\t\t\t\t\"◭\", \"▣\", \"◮\",\n\t\t\t},\n\t\t\theaderLeft:  \"◀\",\n\t\t\theaderMid:   \"⬔\",\n\t\t\theaderRight: \"▶\",\n\t\t}\n\tcase Style8Bit:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleName8Bit,\n\t\t\trow:    \"■\",\n\t\t\tcolumn: \"█\",\n\t\t\tcenter: \"♦\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔\", \"▲\", \"╗\",\n\t\t\t\t\"◄\", \"♦\", \"►\",\n\t\t\t\t\"╚\", \"▼\", \"╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"◄\",\n\t\t\theaderMid:   \"♦\",\n\t\t\theaderRight: \"►\",\n\t\t}\n\tcase StyleChaos:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameChaos,\n\t\t\trow:    \"≈\",\n\t\t\tcolumn: \"§\",\n\t\t\tcenter: \"☯\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌘\", \"∞\", \"⌥\",\n\t\t\t\t\"⚡\", \"☯\", \"♞\",\n\t\t\t\t\"⌂\", \"∆\", \"◊\",\n\t\t\t},\n\t\t\theaderLeft:  \"⚡\",\n\t\t\theaderMid:   \"☯\",\n\t\t\theaderRight: \"♞\",\n\t\t}\n\tcase StyleDots:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDots,\n\t\t\trow:    \"·\",\n\t\t\tcolumn: \" \",\n\t\t\tcenter: \"·\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"·\", \"·\", \"·\",\n\t\t\t\t\" \", \"·\", \" \",\n\t\t\t\t\"·\", \"·\", \"·\",\n\t\t\t},\n\t\t\theaderLeft:  \" \",\n\t\t\theaderMid:   \"·\",\n\t\t\theaderRight: \" \",\n\t\t}\n\tcase StyleBlocks:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameBlocks,\n\t\t\trow:    \"▀\",\n\t\t\tcolumn: \"█\",\n\t\t\tcenter: \"█\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"▛\", \"▀\", \"▜\",\n\t\t\t\t\"▌\", \"█\", \"▐\",\n\t\t\t\t\"▙\", \"▄\", \"▟\",\n\t\t\t},\n\t\t\theaderLeft:  \"▌\",\n\t\t\theaderMid:   \"█\",\n\t\t\theaderRight: \"▐\",\n\t\t}\n\tcase StyleZen:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameZen,\n\t\t\trow:    \"~\",\n\t\t\tcolumn: \" \",\n\t\t\tcenter: \"☯\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\" \", \"♨\", \" \",\n\t\t\t\t\" \", \"☯\", \" \",\n\t\t\t\t\" \", \"♨\", \" \",\n\t\t\t},\n\t\t\theaderLeft:  \" \",\n\t\t\theaderMid:   \"☯\",\n\t\t\theaderRight: \" \",\n\t\t}\n\tcase StyleVintage:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameVintage,\n\t\t\trow:    \"────\",\n\t\t\tcolumn: \" ⁜ \",\n\t\t\tcenter: \" ✠ \",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔══\", \"══╤\", \"══╗\",\n\t\t\t\t\" ⁜ \", \" ✠ \", \" ⁜ \",\n\t\t\t\t\"╚══\", \"══╧\", \"══╝\",\n\t\t\t},\n\t\t\theaderLeft:  \" ├─\",\n\t\t\theaderMid:   \"─✠─\",\n\t\t\theaderRight: \"─┤ \",\n\t\t}\n\tcase StyleSketch:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameSketch,\n\t\t\trow:    \"~~\",\n\t\t\tcolumn: \"/\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\" .\", \"~~\", \". \",\n\t\t\t\t\"/ \", \"+ \", \" \\\\\",\n\t\t\t\t\" '\", \"~~\", \"` \",\n\t\t\t},\n\t\t\theaderLeft:  \"/~\",\n\t\t\theaderMid:   \"+~\",\n\t\t\theaderRight: \"~\\\\\",\n\t\t}\n\tcase StyleArrowDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArrowDouble,\n\t\t\trow:    \"»»\",\n\t\t\tcolumn: \"⫸\",\n\t\t\tcenter: \"✿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌜»\", \"»»\", \"»⌝\",\n\t\t\t\t\"⫸ \", \"✿ \", \" ⫷\",\n\t\t\t\t\"⌞»\", \"»»\", \"»⌟\",\n\t\t\t},\n\t\t\theaderLeft:  \"⫸»\",\n\t\t\theaderMid:   \"✿»\",\n\t\t\theaderRight: \"»⫷\",\n\t\t}\n\tcase StyleCelestial:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCelestial,\n\t\t\trow:    \"✦✧\",\n\t\t\tcolumn: \"☽\",\n\t\t\tcenter: \"☀\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"✧✦\", \"✦✧\", \"✦✧\",\n\t\t\t\t\"☽ \", \"☀ \", \" ☾\",\n\t\t\t\t\"✧✦\", \"✦✧\", \"✦✧\",\n\t\t\t},\n\t\t\theaderLeft:  \"☽✦\",\n\t\t\theaderMid:   \"☀✧\",\n\t\t\theaderRight: \"✦☾\",\n\t\t}\n\tcase StyleCyber:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCyber,\n\t\t\trow:    \"═╦═\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╬\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔╦═\", \"╦═╦\", \"═╦╗\",\n\t\t\t\t\"║ \", \"╬ \", \" ║\",\n\t\t\t\t\"╚╩═\", \"╩═╩\", \"═╩╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╠╦═\",\n\t\t\theaderMid:   \"╬═╦\",\n\t\t\theaderRight: \"═╦╣\",\n\t\t}\n\tcase StyleRunic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameRunic,\n\t\t\trow:    \"ᛖᛖᛖ\",\n\t\t\tcolumn: \"ᛟ\",\n\t\t\tcenter: \"ᛞ\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"ᛏᛖᛖ\", \"ᛖᛖᛖ\", \"ᛖᛖᛏ\",\n\t\t\t\t\"ᛟ \", \"ᛞ \", \" ᛟ\",\n\t\t\t\t\"ᛗᛖᛖ\", \"ᛖᛖᛖ\", \"ᛖᛖᛗ\",\n\t\t\t},\n\t\t\theaderLeft:  \"ᛟᛖᛖ\",\n\t\t\theaderMid:   \"ᛞᛖᛖ\",\n\t\t\theaderRight: \"ᛖᛖᛟ\",\n\t\t}\n\tcase StyleIndustrial:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameIndustrial,\n\t\t\trow:    \"━╋━\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╋\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┏╋━\", \"╋━╋\", \"━╋┓\",\n\t\t\t\t\"┃ \", \"╋ \", \" ┃\",\n\t\t\t\t\"┗╋━\", \"╋━╋\", \"━╋┛\",\n\t\t\t},\n\t\t\theaderLeft:  \"┣╋━\",\n\t\t\theaderMid:   \"╋━╋\",\n\t\t\theaderRight: \"━╋┫\",\n\t\t}\n\tcase StyleInk:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameInk,\n\t\t\trow:    \"﹌\",\n\t\t\tcolumn: \"︱\",\n\t\t\tcenter: \"✒\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"﹏\", \"﹌\", \"﹏\",\n\t\t\t\t\"︱ \", \"✒ \", \" ︱\",\n\t\t\t\t\"﹋\", \"﹌\", \"﹋\",\n\t\t\t},\n\t\t\theaderLeft:  \"︱﹌\",\n\t\t\theaderMid:   \"✒﹌\",\n\t\t\theaderRight: \"﹌︱\",\n\t\t}\n\tcase StyleArcade:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArcade,\n\t\t\trow:    \"■□\",\n\t\t\tcolumn: \"▐\",\n\t\t\tcenter: \"◉\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"▞■\", \"■□\", \"□▚\",\n\t\t\t\t\"▐ \", \"◉ \", \" ▐\",\n\t\t\t\t\"▚■\", \"■□\", \"□▞\",\n\t\t\t},\n\t\t\theaderLeft:  \"▐■\",\n\t\t\theaderMid:   \"◉□\",\n\t\t\theaderRight: \"■▐\",\n\t\t}\n\tcase StyleBlossom:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameBlossom,\n\t\t\trow:    \"🌸\",\n\t\t\tcolumn: \"🌿\",\n\t\t\tcenter: \"✿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🌷\", \"🌸\", \"🌷\",\n\t\t\t\t\"🌿\", \"✿\", \"🌿\",\n\t\t\t\t\"🌱\", \"🌸\", \"🌱\",\n\t\t\t},\n\t\t\theaderLeft:  \"🌿🌸\",\n\t\t\theaderMid:   \"✿🌸\",\n\t\t\theaderRight: \"🌸🌿\",\n\t\t}\n\tcase StyleFrosted:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameFrosted,\n\t\t\trow:    \"░▒░\",\n\t\t\tcolumn: \"▓\",\n\t\t\tcenter: \"◍\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◌░▒\", \"░▒░\", \"▒░◌\",\n\t\t\t\t\"▓ \", \"◍ \", \" ▓\",\n\t\t\t\t\"◌░▒\", \"░▒░\", \"▒░◌\",\n\t\t\t},\n\t\t\theaderLeft:  \"▓░▒\",\n\t\t\theaderMid:   \"◍▒░\",\n\t\t\theaderRight: \"░▒▓\",\n\t\t}\n\tcase StyleMosaic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMosaic,\n\t\t\trow:    \"▰▱\",\n\t\t\tcolumn: \"⧉\",\n\t\t\tcenter: \"⬖\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⧠▰\", \"▰▱\", \"▱⧠\",\n\t\t\t\t\"⧉ \", \"⬖ \", \" ⧉\",\n\t\t\t\t\"⧅▰\", \"▰▱\", \"▱⧅\",\n\t\t\t},\n\t\t\theaderLeft:  \"⧉▰\",\n\t\t\theaderMid:   \"⬖▱\",\n\t\t\theaderRight: \"▰⧉\",\n\t\t}\n\tcase StyleUFO:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameUFO,\n\t\t\trow:    \"⊚⊚\",\n\t\t\tcolumn: \"☽\",\n\t\t\tcenter: \"☢\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌖⊚\", \"⊚⊚\", \"⊚⌖\",\n\t\t\t\t\"☽ \", \"☢ \", \" ☽\",\n\t\t\t\t\"⌗⊚\", \"⊚⊚\", \"⊚⌗\",\n\t\t\t},\n\t\t\theaderLeft:  \"☽⊚\",\n\t\t\theaderMid:   \"☢⊚\",\n\t\t\theaderRight: \"⊚☽\",\n\t\t}\n\tcase StyleSteampunk:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameSteampunk,\n\t\t\trow:    \"═⚙═\",\n\t\t\tcolumn: \"⛓️\",\n\t\t\tcenter: \"⚔️\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🜂⚙═\", \"═⚙═\", \"═⚙🜂\",\n\t\t\t\t\"⛓️ \", \"⚔️ \", \" ⛓️\",\n\t\t\t\t\"🜄⚙═\", \"═⚙═\", \"═⚙🜄\",\n\t\t\t},\n\t\t\theaderLeft:  \"⛓️⚙═\",\n\t\t\theaderMid:   \"⚔️═⚙\",\n\t\t\theaderRight: \"═⚙⛓️\",\n\t\t}\n\tcase StyleGalaxy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameGalaxy,\n\t\t\trow:    \"≋≋\",\n\t\t\tcolumn: \"♆\",\n\t\t\tcenter: \"☄️\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌇≋\", \"≋≋\", \"≋⌇\",\n\t\t\t\t\"♆ \", \"☄️ \", \" ♆\",\n\t\t\t\t\"⌇≋\", \"≋≋\", \"≋⌇\",\n\t\t\t},\n\t\t\theaderLeft:  \"♆≋\",\n\t\t\theaderMid:   \"☄️≋\",\n\t\t\theaderRight: \"≋♆\",\n\t\t}\n\tcase StyleJazz:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameJazz,\n\t\t\trow:    \"♬♬\",\n\t\t\tcolumn: \"▷\",\n\t\t\tcenter: \"★\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"♔♬\", \"♬♬\", \"♬♔\",\n\t\t\t\t\"▷ \", \"★ \", \" ◁\",\n\t\t\t\t\"♕♬\", \"♬♬\", \"♬♕\",\n\t\t\t},\n\t\t\theaderLeft:  \"▷♬\",\n\t\t\theaderMid:   \"★♬\",\n\t\t\theaderRight: \"♬◁\",\n\t\t}\n\tcase StylePuzzle:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNamePuzzle,\n\t\t\trow:    \"▣▣\",\n\t\t\tcolumn: \"◫\",\n\t\t\tcenter: \"✚\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◩▣\", \"▣▣\", \"▣◪\",\n\t\t\t\t\"◫ \", \"✚ \", \" ◫\",\n\t\t\t\t\"◧▣\", \"▣▣\", \"▣◨\",\n\t\t\t},\n\t\t\theaderLeft:  \"◫▣\",\n\t\t\theaderMid:   \"✚▣\",\n\t\t\theaderRight: \"▣◫\",\n\t\t}\n\tcase StyleHypno:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHypno,\n\t\t\trow:    \"◜◝\",\n\t\t\tcolumn: \"꩜\",\n\t\t\tcenter: \"⃰\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◟◜\", \"◜◝\", \"◝◞\",\n\t\t\t\t\"꩜ \", \"⃰ \", \" ꩜\",\n\t\t\t\t\"◟◜\", \"◜◝\", \"◝◞\",\n\t\t\t},\n\t\t\theaderLeft:  \"꩜◜\",\n\t\t\theaderMid:   \"⃰◝\",\n\t\t\theaderRight: \"◜꩜\",\n\t\t}\n\tdefault:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameNothing,\n\t\t\trow:    \"\",\n\t\t\tcolumn: \"\",\n\t\t\tcenter: \"\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t},\n\t\t\theaderLeft:  \"\",\n\t\t\theaderMid:   \"\",\n\t\t\theaderRight: \"\",\n\t\t}\n\t}\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/symbols.go",
          "code_snippet": "StyleASCII",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Header(elements ...any) {\n\tt.ensureInitialized()\n\tt.logger.Debugf(\"Header() method called with raw variadic elements: %v (len %d). Streaming: %v, Started: %v\", elements, len(elements), t.config.Stream.Enable, t.hasPrinted)\n\n\t// just forget\n\tif t.config.Behavior.Header.Hide.Enabled() {\n\t\treturn\n\t}\n\n\t// add come common default\n\tif t.config.Header.Formatting.AutoFormat == tw.Unknown {\n\t\tt.config.Header.Formatting.AutoFormat = tw.On\n\t}\n\n\tif t.config.Stream.Enable \u0026\u0026 t.hasPrinted {\n\t\t//  Streaming Path\n\t\tactualCellsToProcess := t.processVariadic(elements)\n\t\theadersAsStrings, err := t.convertCellsToStrings(actualCellsToProcess, t.config.Header)\n\t\tif err != nil {\n\t\t\tt.logger.Errorf(\"Header(): Failed to convert header elements to strings for streaming: %v\", err)\n\t\t\theadersAsStrings = []string{} // Use empty on error\n\t\t}\n\t\terrStream := t.streamRenderHeader(headersAsStrings) // streamRenderHeader handles padding to streamNumCols internally\n\t\tif errStream != nil {\n\t\t\tt.logger.Errorf(\"Error rendering streaming header: %v\", errStream)\n\t\t}\n\t\treturn\n\t}\n\n\t//  Batch Path\n\tprocessedElements := t.processVariadic(elements)\n\tt.logger.Debugf(\"Header() (Batch): Effective cells to process: %v\", processedElements)\n\n\theadersAsStrings, err := t.convertCellsToStrings(processedElements, t.config.Header)\n\tif err != nil {\n\t\tt.logger.Errorf(\"Header() (Batch): Failed to convert to strings: %v\", err)\n\t\tt.headers = [][]string{} // Set to empty on error\n\t\treturn\n\t}\n\n\t// prepareContent uses t.config.Header for AutoFormat and MaxWidth constraints.\n\t// It processes based on the number of columns in headersAsStrings.\n\tpreparedHeaderLines := t.prepareContent(headersAsStrings, t.config.Header)\n\tt.headers = preparedHeaderLines // Store directly. Padding to t.maxColumns() will happen in prepareContexts.\n\n\tt.logger.Debugf(\"Header set (batch mode), lines stored: %d. First line if exists: %v\", len(t.headers), func() []string {\n\t\tif len(t.headers) \u003e 0 {\n\t\t\treturn t.headers[0]\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}())\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/types.go",
          "code_snippet": "Align string",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func (v Value) FieldByNameFunc(match func(string) bool) Value {\n\tif f, ok := toRType(v.typ()).FieldByNameFunc(match); ok {\n\t\treturn v.FieldByIndex(f.Index)\n\t}\n\treturn Value{}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprint(a ...any) string {\n\tp := newPrinter()\n\tp.doPrint(a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strconv/atoi.go",
          "code_snippet": "func Atoi(s string) (int, error) {\n\tconst fnAtoi = \"Atoi\"\n\n\tsLen := len(s)\n\tif intSize == 32 \u0026\u0026 (0 \u003c sLen \u0026\u0026 sLen \u003c 10) ||\n\t\tintSize == 64 \u0026\u0026 (0 \u003c sLen \u0026\u0026 sLen \u003c 19) {\n\t\t// Fast path for small integers that fit int type.\n\t\ts0 := s\n\t\tif s[0] == '-' || s[0] == '+' {\n\t\t\ts = s[1:]\n\t\t\tif len(s) \u003c 1 {\n\t\t\t\treturn 0, syntaxError(fnAtoi, s0)\n\t\t\t}\n\t\t}\n\n\t\tn := 0\n\t\tfor _, ch := range []byte(s) {\n\t\t\tch -= '0'\n\t\t\tif ch \u003e 9 {\n\t\t\t\treturn 0, syntaxError(fnAtoi, s0)\n\t\t\t}\n\t\t\tn = n*10 + int(ch)\n\t\t}\n\t\tif s0[0] == '-' {\n\t\t\tn = -n\n\t\t}\n\t\treturn n, nil\n\t}\n\n\t// Slow path for invalid, big, or underscored integers.\n\ti64, err := ParseInt(s, 10, 0)\n\tif nerr, ok := err.(*NumError); ok {\n\t\tnerr.Func = fnAtoi\n\t}\n\treturn int(i64), err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "AlignRight   Align = \"right\"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "AlignLeft    Align = \"left\"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Append(rows ...interface{}) error { // rows is already []interface{}\n\tt.ensureInitialized()\n\n\tif t.config.Stream.Enable \u0026\u0026 t.hasPrinted {\n\t\tt.logger.Debugf(\"Append() called in streaming mode with %d items for a single row\", len(rows))\n\t\tvar rowItemForStream interface{}\n\t\tif len(rows) == 1 {\n\t\t\trowItemForStream = rows[0]\n\t\t} else {\n\t\t\trowItemForStream = rows // Pass the slice of items if multiple args\n\t\t}\n\t\tif err := t.streamAppendRow(rowItemForStream); err != nil {\n\t\t\tt.logger.Errorf(\"Error rendering streaming row: %v\", err)\n\t\t\treturn fmt.Errorf(\"failed to stream append row: %w\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\t//Batch Mode Logic\n\tt.logger.Debugf(\"Append (Batch) received %d arguments: %v\", len(rows), rows)\n\n\tvar cellsSource interface{}\n\tif len(rows) == 1 {\n\t\tcellsSource = rows[0]\n\t\tt.logger.Debug(\"Append (Batch): Single argument provided. Treating it as the source for row cells.\")\n\t} else {\n\t\tcellsSource = rows // 'rows' is []interface{} containing all arguments\n\t\tt.logger.Debug(\"Append (Batch): Multiple arguments provided. Treating them directly as cells for one row.\")\n\t}\n\n\tif err := t.appendSingle(cellsSource); err != nil {\n\t\tt.logger.Errorf(\"Append (Batch) failed for cellsSource %v: %v\", cellsSource, err)\n\t\treturn err\n\t}\n\n\tt.logger.Debugf(\"Append (Batch) completed for one row, total rows in table: %d\", len(t.rows))\n\treturn nil\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithRowAlignmentConfig(alignment tw.CellAlignment) Option {\n\treturn func(target *Table) {\n\t\ttarget.config.Row.Alignment = alignment\n\t\tif target.logger != nil {\n\t\t\ttarget.logger.Debugf(\"Option: WithRowAlignmentConfig applied to Table: %+v\", alignment)\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellAlignment struct {\n\tGlobal    Align   // Default alignment applied to all cells\n\tPerColumn []Align // Column-specific alignment overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Render() error {\n\treturn t.render()\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strconv/atob.go",
          "code_snippet": "func FormatBool(b bool) string {\n\tif b {\n\t\treturn \"true\"\n\t}\n\treturn \"false\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "func WriteString(w Writer, s string) (n int, err error) {\n\tif sw, ok := w.(StringWriter); ok {\n\t\treturn sw.WriteString(s)\n\t}\n\treturn w.Write([]byte(s))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func ReplaceAll(s, old, new string) string {\n\treturn Replace(s, old, new, -1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        134,
        135,
        136,
        140
      ],
      "cover_details": {
        "line_cover_rate": 0.8787878787878788
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:bindingToAttr",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        }
      ],
      "name": "bindingToAttr",
      "signature": "bindingToAttr (key string, val any) trace.Attribute",
      "ground_truth": "func bindingToAttr(key string, val any) trace.Attribute {\n\tswitch v := val.(type) {\n\tcase nil:\n\t\treturn trace.StringAttribute(key, \"\")\n\tcase int64:\n\t\treturn trace.Int64Attribute(key, v)\n\tcase float64:\n\t\treturn trace.Float64Attribute(key, v)\n\tcase string:\n\t\treturn trace.StringAttribute(key, v)\n\tcase bool:\n\t\treturn trace.BoolAttribute(key, v)\n\tdefault:\n\t\ts := fmt.Sprintf(\"%v\", v)\n\t\tif len(s) \u003e 256 {\n\t\t\ts = s[:256]\n\t\t}\n\t\treturn trace.StringAttribute(key, s)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 77,
      "end_line": 96,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Int64Attribute(key string, value int64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Float64Attribute(key string, value float64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func BoolAttribute(key string, value bool) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        }
      ],
      "name": "encode",
      "signature": "(enc marshalerEncoder) encode (marshaler Marshaler, stream *jsoniter.Stream)",
      "ground_truth": "func (enc marshalerEncoder) encode(marshaler Marshaler, stream *jsoniter.Stream) {\n\tdata, err := marshaler.MarshalGraphson()\n\tif err != nil {\n\t\tstream.Error = fmt.Errorf(\"graphson: error calling MarshalGraphson for type %s: %w\", enc.Type, err)\n\t\treturn\n\t}\n\tif !config.Valid(data) {\n\t\tstream.Error = fmt.Errorf(\"graphson: syntax error when marshaling type %s\", enc.Type)\n\t\treturn\n\t}\n\t_, stream.Error = stream.Write(data)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 68,
      "end_line": 79,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "Marshaler interface {\n\tMarshalGraphson() ([]byte, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) Write(p []byte) (nn int, err error) {\n\tstream.buf = append(stream.buf, p...)\n\tif stream.out != nil {\n\t\tnn, err = stream.out.Write(stream.buf)\n\t\tstream.buf = stream.buf[nn:]\n\t\treturn\n\t}\n\treturn len(p), nil\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/builder.go:JoinedTableView",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/builder_test.go",
          "func_name": "TestSelector_JoinedTableView"
        }
      ],
      "name": "JoinedTableView",
      "signature": "(s *Selector) JoinedTableView (name string) (TableView, bool)",
      "ground_truth": "func (s *Selector) JoinedTableView(name string) (TableView, bool) {\n\tfor _, j := range s.joins {\n\t\tswitch t := j.table.(type) {\n\t\tcase *SelectTable:\n\t\t\tif t.name == name || t.as == name {\n\t\t\t\treturn t, true\n\t\t\t}\n\t\tcase *Selector:\n\t\t\tif t.as == name {\n\t\t\t\treturn t, true\n\t\t\t}\n\t\t\tfor _, t2 := range t.from {\n\t\t\t\tif t3 := selectTable(t2); t3 != nil \u0026\u0026 (t3.name == name || t3.as == name) {\n\t\t\t\t\treturn t3, true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil, false\n}",
      "function_comment": "// JoinedTableView returns the first joined TableView with the given name or alias.",
      "function_statement": "// JoinedTableView returns the first joined TableView with the given name or alias.",
      "start_line": 2069,
      "end_line": 2088,
      "file_path": "./dialect/sql/builder.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "TableView interface {\n\tview()\n\t// C returns a formatted string prefixed\n\t// with the table view qualifier.\n\tC(string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "join struct {\n\ton    *Predicate\n\tkind  string\n\ttable TableView\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "SelectTable struct {\n\tBuilder\n\tas     string\n\tname   string\n\tschema string\n\tquote  bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func selectTable(t TableView) *SelectTable {\n\tif t == nil {\n\t\treturn nil\n\t}\n\tswitch view := t.(type) {\n\tcase *SelectTable:\n\t\treturn view\n\tcase *Selector:\n\t\tif len(view.from) == 0 {\n\t\t\treturn nil\n\t\t}\n\t\treturn selectTable(view.from[0])\n\tcase *queryView, *WithBuilder:\n\t\treturn nil\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"unexpected TableView %T\", t))\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        2069,
        2070,
        2071,
        2072,
        2073,
        2074,
        2075,
        2076,
        2077,
        2078,
        2079,
        2080,
        2081,
        2082,
        2083,
        2087
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:ParsePath",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestParsePath"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "ParsePath",
      "signature": "ParsePath (dotpath string) ([]string, error)",
      "ground_truth": "func ParsePath(dotpath string) ([]string, error) {\n\tvar (\n\t\ti, p int\n\t\tpath []string\n\t)\n\tfor i \u003c len(dotpath) {\n\t\tswitch r := dotpath[i]; {\n\t\tcase r == '\"':\n\t\t\tif i == len(dotpath)-1 {\n\t\t\t\treturn nil, fmt.Errorf(\"unexpected quote\")\n\t\t\t}\n\t\t\tidx := strings.IndexRune(dotpath[i+1:], '\"')\n\t\t\tif idx == -1 || idx == 0 {\n\t\t\t\treturn nil, fmt.Errorf(\"unbalanced quote\")\n\t\t\t}\n\t\t\ti += idx + 2\n\t\tcase r == '[':\n\t\t\tif p != i {\n\t\t\t\tpath = append(path, dotpath[p:i])\n\t\t\t}\n\t\t\tp = i\n\t\t\tif i == len(dotpath)-1 {\n\t\t\t\treturn nil, fmt.Errorf(\"unexpected bracket\")\n\t\t\t}\n\t\t\tidx := strings.IndexRune(dotpath[i:], ']')\n\t\t\tif idx == -1 || idx == 1 {\n\t\t\t\treturn nil, fmt.Errorf(\"unbalanced bracket\")\n\t\t\t}\n\t\t\tif !isNumber(dotpath[i+1 : i+idx]) {\n\t\t\t\treturn nil, fmt.Errorf(\"invalid index %q\", dotpath[i:i+idx+1])\n\t\t\t}\n\t\t\ti += idx + 1\n\t\tcase r == '.' || r == ']':\n\t\t\tif p != i {\n\t\t\t\tpath = append(path, dotpath[p:i])\n\t\t\t}\n\t\t\ti++\n\t\t\tp = i\n\t\tdefault:\n\t\t\ti++\n\t\t}\n\t}\n\tif p != i {\n\t\tpath = append(path, dotpath[p:i])\n\t}\n\treturn path, nil\n}",
      "function_comment": "// ParsePath parses the \"dotpath\" for the DotPath option.\n//\n//\t\"a.b\"\t\t=\u003e [\"a\", \"b\"]\n//\t\"a[1][2]\"\t=\u003e [\"a\", \"[1]\", \"[2]\"]\n//\t\"a.\\\"b.c\\\"\t=\u003e [\"a\", \"\\\"b.c\\\"\"]",
      "function_statement": "// ParsePath parses the \"dotpath\" for the DotPath option.\n//\n//\t\"a.b\"\t\t=\u003e [\"a\", \"b\"]\n//\t\"a[1][2]\"\t=\u003e [\"a\", \"[1]\", \"[2]\"]\n//\t\"a.\\\"b.c\\\"\t=\u003e [\"a\", \"\\\"b.c\\\"\"]",
      "start_line": 607,
      "end_line": 653,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func isNumber(s string) bool {\n\tfor _, r := range s {\n\t\tif !unicode.IsNumber(r) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func IndexRune(s string, r rune) int {\n\tconst haveFastIndex = bytealg.MaxBruteForce \u003e 0\n\tswitch {\n\tcase 0 \u003c= r \u0026\u0026 r \u003c utf8.RuneSelf:\n\t\treturn IndexByte(s, byte(r))\n\tcase r == utf8.RuneError:\n\t\tfor i, r := range s {\n\t\t\tif r == utf8.RuneError {\n\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t\treturn -1\n\tcase !utf8.ValidRune(r):\n\t\treturn -1\n\tdefault:\n\t\t// Search for rune r using the last byte of its UTF-8 encoded form.\n\t\t// The distribution of the last byte is more uniform compared to the\n\t\t// first byte which has a 78% chance of being [240, 243, 244].\n\t\trs := string(r)\n\t\tlast := len(rs) - 1\n\t\ti := last\n\t\tfails := 0\n\t\tfor i \u003c len(s) {\n\t\t\tif s[i] != rs[last] {\n\t\t\t\to := IndexByte(s[i+1:], rs[last])\n\t\t\t\tif o \u003c 0 {\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\t\t\t\ti += o + 1\n\t\t\t}\n\t\t\t// Step backwards comparing bytes.\n\t\t\tfor j := 1; j \u003c len(rs); j++ {\n\t\t\t\tif s[i-j] != rs[last-j] {\n\t\t\t\t\tgoto next\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn i - last\n\t\tnext:\n\t\t\tfails++\n\t\t\ti++\n\t\t\tif (haveFastIndex \u0026\u0026 fails \u003e bytealg.Cutover(i)) \u0026\u0026 i \u003c len(s) ||\n\t\t\t\t(!haveFastIndex \u0026\u0026 fails \u003e= 4+i\u003e\u003e4 \u0026\u0026 i \u003c len(s)) {\n\t\t\t\tgoto fallback\n\t\t\t}\n\t\t}\n\t\treturn -1\n\n\tfallback:\n\t\t// see comment in ../bytes/bytes.go\n\t\tif haveFastIndex {\n\t\t\tif j := bytealg.IndexString(s[i-last:], string(r)); j \u003e= 0 {\n\t\t\t\treturn i + j - last\n\t\t\t}\n\t\t} else {\n\t\t\tc0 := rs[last]\n\t\t\tc1 := rs[last-1]\n\t\tloop:\n\t\t\tfor ; i \u003c len(s); i++ {\n\t\t\t\tif s[i] == c0 \u0026\u0026 s[i-1] == c1 {\n\t\t\t\t\tfor k := 2; k \u003c len(rs); k++ {\n\t\t\t\t\t\tif s[i-k] != rs[last-k] {\n\t\t\t\t\t\t\tcontinue loop\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn i - last\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        617,
        618,
        619,
        622,
        623,
        624,
        625,
        626,
        627,
        628,
        629,
        630,
        631,
        632,
        635,
        636,
        637,
        638,
        639,
        640,
        641,
        642,
        643,
        644,
        645,
        646,
        649,
        650,
        651,
        652
      ],
      "cover_details": {
        "line_cover_rate": 0.851063829787234
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/stats.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/stats_test.go",
          "func_name": "TestStatsCollection"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t statsTransport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t statsTransport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tstats.Record(ctx, RequestCount.M(1))\n\tstart := time.Now()\n\trsp, err := t.base.RoundTrip(ctx, req)\n\tlatency := float64(time.Since(start)) / float64(time.Millisecond)\n\tvar (\n\t\ttags = make([]tag.Mutator, 1)\n\t\tms   = []stats.Measurement{RoundTripLatency.M(latency)}\n\t)\n\tif err == nil {\n\t\ttags[0] = tag.Upsert(StatusCode, strconv.Itoa(rsp.Status.Code))\n\t\tms = append(ms, ResponseBytes.M(int64(len(rsp.Result.Data))))\n\t} else {\n\t\ttags[0] = tag.Upsert(StatusCode, \"error\")\n\t}\n\t_ = stats.RecordWithTags(ctx, tags, ms...)\n\treturn rsp, err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 100,
      "end_line": 117,
      "file_path": "./dialect/gremlin/ocgremlin/stats.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "statsTransport struct {\n\tbase gremlin.RoundTripper\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "RequestCount = stats.Int64(\n\t\t\"gremlin/request_count\",\n\t\t\"Number of Gremlin requests started\",\n\t\tstats.UnitDimensionless,\n\t)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "RoundTripLatency = stats.Float64(\n\t\t\"gremlin/roundtrip_latency\",\n\t\t\"End-to-end latency\",\n\t\tstats.UnitMilliseconds,\n\t)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "StatusCode, _ = tag.NewKey(\"gremlin_status_code\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "ResponseBytes = stats.Int64(\n\t\t\"gremlin/response_bytes\",\n\t\t\"Total number of bytes in response data\",\n\t\tstats.UnitBytes,\n\t)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/stats/record.go",
          "code_snippet": "func Record(ctx context.Context, ms ...Measurement) {\n\t// Record behaves the same as RecordWithOptions, but because we do not have to handle generic functionality\n\t// (RecordOptions) we can reduce some allocations to speed up this hot path\n\tif len(ms) == 0 {\n\t\treturn\n\t}\n\trecorder := internal.MeasurementRecorder.(measurementRecorder)\n\trecord := false\n\tfor _, m := range ms {\n\t\tif m.desc.subscribed() {\n\t\t\trecord = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !record {\n\t\treturn\n\t}\n\trecorder(tag.FromContext(ctx), ms, nil)\n\treturn\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/stats/measure_int64.go",
          "code_snippet": "func (m *Int64Measure) M(v int64) Measurement {\n\treturn Measurement{\n\t\tm:    m,\n\t\tdesc: m.desc,\n\t\tv:    float64(v),\n\t}\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := runtimeNow()\n\tif mono == 0 {\n\t\treturn Time{uint64(nsec), sec + unixToInternal, Local}\n\t}\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/time/time.go",
          "code_snippet": "func Since(t Time) Duration {\n\tif t.wall\u0026hasMonotonic != 0 {\n\t\t// Common case optimization: if t has monotonic time, then Sub will use only it.\n\t\treturn subMono(runtimeNano()-startNano, t.ext)\n\t}\n\treturn Now().Sub(t)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/tag/map.go",
          "code_snippet": "Mutator interface {\n\tMutate(t *Map) (*Map, error)\n}",
          "ref_module": "tag"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/stats/measure.go",
          "code_snippet": "Measurement struct {\n\tv    float64\n\tm    Measure\n\tdesc *measureDescriptor\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/stats/measure_float64.go",
          "code_snippet": "func (m *Float64Measure) M(v float64) Measurement {\n\treturn Measurement{\n\t\tm:    m,\n\t\tdesc: m.desc,\n\t\tv:    v,\n\t}\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/tag/map.go",
          "code_snippet": "func Upsert(k Key, v string, mds ...Metadata) Mutator {\n\treturn \u0026mutator{\n\t\tfn: func(m *Map) (*Map, error) {\n\t\t\tif !checkValue(v) {\n\t\t\t\treturn nil, errInvalidValue\n\t\t\t}\n\t\t\tm.upsert(k, v, createMetadatas(mds...))\n\t\t\treturn m, nil\n\t\t},\n\t}\n}",
          "ref_module": "tag"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strconv/itoa.go",
          "code_snippet": "func Itoa(i int) string {\n\treturn FormatInt(int64(i), 10)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/go.opencensus.io@v0.24.0/stats/record.go",
          "code_snippet": "func RecordWithTags(ctx context.Context, mutators []tag.Mutator, ms ...Measurement) error {\n\treturn RecordWithOptions(ctx, WithTags(mutators...), WithMeasurements(ms...))\n}",
          "ref_module": "stats"
        }
      ],
      "covered_lines": [
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116
      ],
      "cover_details": {
        "line_cover_rate": 0.9444444444444444
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/graph.go:NewGraph",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "NewGraph",
      "signature": "NewGraph (c *Config, schemas ...*load.Schema) (g *Graph, err error)",
      "ground_truth": "func NewGraph(c *Config, schemas ...*load.Schema) (g *Graph, err error) {\n\tdefer catch(\u0026err)\n\tg = \u0026Graph{Config: c, Nodes: make([]*Type, 0, len(schemas)), Schemas: schemas}\n\tfor i := range schemas {\n\t\tg.addNode(schemas[i])\n\t}\n\tfor i := range schemas {\n\t\tg.addEdges(schemas[i])\n\t}\n\tfor _, t := range g.Nodes {\n\t\tcheck(g.resolve(t), \"resolve %q relations\", t.Name)\n\t}\n\tfor _, t := range g.Nodes {\n\t\tcheck(t.setupFKs(), \"set %q foreign-keys\", t.Name)\n\t}\n\tfor i := range schemas {\n\t\tg.addIndexes(schemas[i])\n\t}\n\tcheck(g.edgeSchemas(), \"resolving edges\")\n\taliases(g)\n\tg.defaults()\n\tif c.Storage != nil \u0026\u0026 c.Storage.Init != nil {\n\t\tcheck(c.Storage.Init(g), \"storage driver init\")\n\t}\n\tif enabled, _ := g.Config.FeatureEnabled(FeatureGlobalID.Name); enabled {\n\t\tif err := IncrementStartAnnotation(g); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn\n}",
      "function_comment": "// NewGraph creates a new Graph for the code generation from the given schema definitions.\n// It fails if one of the schemas is invalid.",
      "function_statement": "// NewGraph creates a new Graph for the code generation from the given schema definitions.\n// It fails if one of the schemas is invalid.",
      "start_line": 160,
      "end_line": 190,
      "file_path": "./entc/gen/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Config struct {\n\t\t// Schema holds the Go package path for the user ent/schema.\n\t\t// For example, \"\u003cproject\u003e/ent/schema\".\n\t\tSchema string\n\n\t\t// Target defines the filepath for the target directory that\n\t\t// holds the generated code. For example, \"./project/ent\".\n\t\t//\n\t\t// By default, 'ent generate ./ent/schema' uses './ent' as a\n\t\t// target directory.\n\t\tTarget string\n\n\t\t// Package defines the Go package path of the target directory\n\t\t// mentioned above. For example, \"github.com/org/project/ent\".\n\t\t//\n\t\t// By default, for schema package named \"\u003cproject\u003e/ent/schema\",\n\t\t// 'ent generate' uses \"\u003cproject\u003e/ent\" as a default package.\n\t\tPackage string\n\n\t\t// Header allows users to provide an optional header signature for\n\t\t// the generated files. It defaults to the standard 'go generate'\n\t\t// format: '// Code generated by ent, DO NOT EDIT.'.\n\t\tHeader string\n\n\t\t// Storage configuration for the codegen. Defaults to sql.\n\t\tStorage *Storage\n\n\t\t// IDType specifies the type of the id field in the codegen.\n\t\t// The supported types are string and int, which also the default.\n\t\tIDType *field.TypeInfo\n\n\t\t// Templates specifies a list of alternative templates to execute or\n\t\t// to override the default. If nil, the default template is used.\n\t\t//\n\t\t// Note that, additional templates are executed on the Graph object and\n\t\t// the execution output is stored in a file derived by the template name.\n\t\tTemplates []*Template\n\n\t\t// Features defines a list of additional features to add to the codegen phase.\n\t\t// For example, the PrivacyFeature.\n\t\tFeatures []Feature\n\n\t\t// Hooks holds an optional list of Hooks to apply on the graph before/after the code-generation.\n\t\tHooks []Hook\n\n\t\t// Annotations that are injected to the Config object can be accessed\n\t\t// globally in all templates. In order to access an annotation from a\n\t\t// graph template, do the following:\n\t\t//\n\t\t//\t{{- with $.Annotations.GQL }}\n\t\t//\t\t{{/* Annotation usage goes here. */}}\n\t\t//\t{{- end }}\n\t\t//\n\t\t// For type templates, we access the Config field to access the global\n\t\t// annotations, and not the type-specific annotation.\n\t\t//\n\t\t//\t{{- with $.Config.Annotations.GQL }}\n\t\t//\t\t{{/* Annotation usage goes here. */}}\n\t\t//\t{{- end }}\n\t\t//\n\t\t// Note that the mapping is from the annotation-name (e.g. \"GQL\") to a JSON decoded object.\n\t\tAnnotations Annotations\n\n\t\t// BuildFlags holds a list of custom build flags to use\n\t\t// when loading the schema packages.\n\t\tBuildFlags []string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Schema struct {\n\tName         string         `json:\"name,omitempty\"`\n\tPos          string         `json:\"-\"`\n\tView         bool           `json:\"view,omitempty\"`\n\tConfig       ent.Config     `json:\"config,omitempty\"`\n\tEdges        []*Edge        `json:\"edges,omitempty\"`\n\tFields       []*Field       `json:\"fields,omitempty\"`\n\tIndexes      []*Index       `json:\"indexes,omitempty\"`\n\tHooks        []*Position    `json:\"hooks,omitempty\"`\n\tInterceptors []*Position    `json:\"interceptors,omitempty\"`\n\tPolicy       []*Position    `json:\"policy,omitempty\"`\n\tAnnotations  map[string]any `json:\"annotations,omitempty\"`\n}",
          "ref_module": "load"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Graph struct {\n\t\t*Config\n\t\t// Nodes are list of Go types that mapped to the types in the loaded schema.\n\t\tNodes []*Type\n\t\tnodes map[string]*Type\n\t\t// Schemas holds the raw interfaces for the loaded schemas.\n\t\tSchemas []*load.Schema\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func catch(err *error) {\n\tif e := recover(); e != nil {\n\t\tgerr, ok := e.(graphError)\n\t\tif !ok {\n\t\t\tpanic(e)\n\t\t}\n\t\t*err = gerr\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) addNode(schema *load.Schema) {\n\tt, err := NewType(g.Config, schema)\n\tcheck(err, \"create type %s\", schema.Name)\n\tg.Nodes = append(g.Nodes, t)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) addEdges(schema *load.Schema) {\n\tt, _ := g.typ(schema.Name)\n\tseen := make(map[string]struct{}, len(schema.Edges))\n\tfor _, e := range schema.Edges {\n\t\ttyp, ok := g.typ(e.Type)\n\t\texpect(ok, \"type %q does not exist for edge\", e.Type)\n\t\t_, ok = t.fields[e.Name]\n\t\texpect(!ok, \"%s schema cannot contain field and edge with the same name %q\", schema.Name, e.Name)\n\t\t_, ok = seen[e.Name]\n\t\texpect(!ok, \"%s schema contains multiple %q edges\", schema.Name, e.Name)\n\t\tseen[e.Name] = struct{}{}\n\t\tswitch {\n\t\t// Assoc only.\n\t\tcase !e.Inverse:\n\t\t\tt.Edges = append(t.Edges, \u0026Edge{\n\t\t\t\tdef:         e,\n\t\t\t\tType:        typ,\n\t\t\t\tName:        e.Name,\n\t\t\t\tOwner:       t,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tOptional:    !e.Required,\n\t\t\t\tImmutable:   e.Immutable,\n\t\t\t\tStructTag:   structTag(e.Name, e.Tag),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t})\n\t\t// Inverse only.\n\t\tcase e.Inverse \u0026\u0026 e.Ref == nil:\n\t\t\texpect(e.RefName != \"\", \"back-reference edge %s.%s is missing the Ref attribute\", t.Name, e.Name)\n\t\t\tt.Edges = append(t.Edges, \u0026Edge{\n\t\t\t\tdef:         e,\n\t\t\t\tType:        typ,\n\t\t\t\tName:        e.Name,\n\t\t\t\tOwner:       typ,\n\t\t\t\tInverse:     e.RefName,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tOptional:    !e.Required,\n\t\t\t\tImmutable:   e.Immutable,\n\t\t\t\tStructTag:   structTag(e.Name, e.Tag),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t})\n\t\t// Inverse and assoc.\n\t\tcase e.Inverse:\n\t\t\tref := e.Ref\n\t\t\texpect(e.RefName == \"\", \"reference name is derived from the assoc name: %s.%s \u003c-\u003e %s.%s\", t.Name, ref.Name, t.Name, e.Name)\n\t\t\texpect(ref.Type == t.Name, \"assoc-inverse edge allowed only as o2o relation of the same type\")\n\t\t\tfrom := \u0026Edge{\n\t\t\t\tdef:         e,\n\t\t\t\tType:        typ,\n\t\t\t\tName:        e.Name,\n\t\t\t\tOwner:       t,\n\t\t\t\tInverse:     ref.Name,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tOptional:    !e.Required,\n\t\t\t\tImmutable:   e.Immutable,\n\t\t\t\tStructTag:   structTag(e.Name, e.Tag),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t}\n\t\t\tto := \u0026Edge{\n\t\t\t\tdef:         ref,\n\t\t\t\tRef:         from,\n\t\t\t\tType:        typ,\n\t\t\t\tOwner:       t,\n\t\t\t\tName:        ref.Name,\n\t\t\t\tUnique:      ref.Unique,\n\t\t\t\tOptional:    !ref.Required,\n\t\t\t\tImmutable:   ref.Immutable,\n\t\t\t\tStructTag:   structTag(ref.Name, ref.Tag),\n\t\t\t\tAnnotations: ref.Annotations,\n\t\t\t}\n\t\t\tfrom.Ref = to\n\t\t\tt.Edges = append(t.Edges, from, to)\n\t\tdefault:\n\t\t\tpanic(graphError{\"edge must be either an assoc or inverse edge\"})\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func check(err error, msg string, args ...any) {\n\tif err != nil {\n\t\targs = append(args, err)\n\t\tpanic(graphError{fmt.Sprintf(msg+\": %s\", args...)})\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) resolve(t *Type) error {\n\tfor _, e := range t.Edges {\n\t\tswitch {\n\t\tcase e.IsInverse():\n\t\t\tref, ok := e.Type.HasAssoc(e.Inverse)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"edge %q is missing for inverse edge: %s.%s(%s)\", e.Inverse, t.Name, e.Name, e.Type.Name)\n\t\t\t}\n\t\t\tif !e.Optional \u0026\u0026 !ref.Optional {\n\t\t\t\treturn fmt.Errorf(\"edges cannot be required in both directions: %s.%s \u003c-\u003e %s.%s\", t.Name, e.Name, e.Type.Name, ref.Name)\n\t\t\t}\n\t\t\tif ref.Type != t {\n\t\t\t\treturn fmt.Errorf(\"mismatch type for back-ref %q of %s.%s \u003c-\u003e %s.%s\", e.Inverse, t.Name, e.Name, e.Type.Name, ref.Name)\n\t\t\t}\n\t\t\te.Ref, ref.Ref = ref, e\n\t\t\ttable := t.Table()\n\t\t\t// Name the foreign-key column in a format that wouldn't change even if an inverse\n\t\t\t// edge is dropped (or added). The format is: \"\u003cEdge-Owner\u003e_\u003cEdge-Name\u003e\".\n\t\t\tcolumn := fmt.Sprintf(\"%s_%s\", e.Type.Label(), snake(ref.Name))\n\t\t\tswitch a, b := ref.Unique, e.Unique; {\n\t\t\t// If the relation column is in the inverse side/table. The rule is simple, if assoc is O2M,\n\t\t\t// then inverse is M2O and the relation is in its table.\n\t\t\tcase a \u0026\u0026 b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = O2O, O2O\n\t\t\tcase !a \u0026\u0026 b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = M2O, O2M\n\n\t\t\t// If the relation column is in the assoc side.\n\t\t\tcase a \u0026\u0026 !b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = O2M, M2O\n\t\t\t\ttable = e.Type.Table()\n\n\t\t\tcase !a \u0026\u0026 !b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = M2M, M2M\n\t\t\t\ttable = e.Type.Label() + \"_\" + ref.Name\n\t\t\t\tc1, c2 := ref.Owner.Label()+\"_id\", ref.Type.Label()+\"_id\"\n\t\t\t\t// If the relation is from the same type: User has Friends ([]User),\n\t\t\t\t// we give the second column a different name (the relation name).\n\t\t\t\tif c1 == c2 {\n\t\t\t\t\tc2 = rules.Singularize(e.Name) + \"_id\"\n\t\t\t\t}\n\t\t\t\t// Share the same backing array for the relation columns so\n\t\t\t\t// that any changes to one will be reflected in both edges.\n\t\t\t\te.Rel.Columns = []string{c1, c2}\n\t\t\t\tref.Rel.Columns = e.Rel.Columns\n\t\t\t}\n\t\t\te.Rel.Table, ref.Rel.Table = table, table\n\t\t\tif !e.M2M() {\n\t\t\t\te.Rel.Columns = []string{column}\n\t\t\t\tref.Rel.Columns = e.Rel.Columns\n\t\t\t}\n\t\t// Assoc with uninitialized relation.\n\t\tcase !e.IsInverse() \u0026\u0026 e.Rel.Type == Unk:\n\t\t\tswitch {\n\t\t\tcase !e.Unique \u0026\u0026 e.Type == t:\n\t\t\t\te.Rel.Type = M2M\n\t\t\t\te.Bidi = true\n\t\t\t\te.Rel.Table = t.Label() + \"_\" + e.Name\n\t\t\t\te.Rel.Columns = []string{e.Owner.Label() + \"_id\", rules.Singularize(e.Name) + \"_id\"}\n\t\t\tcase e.Unique \u0026\u0026 e.Type == t:\n\t\t\t\te.Rel.Type = O2O\n\t\t\t\te.Bidi = true\n\t\t\t\te.Rel.Table = t.Table()\n\t\t\tcase e.Unique:\n\t\t\t\te.Rel.Type = M2O\n\t\t\t\te.Rel.Table = t.Table()\n\t\t\tdefault:\n\t\t\t\te.Rel.Type = O2M\n\t\t\t\te.Rel.Table = e.Type.Table()\n\t\t\t}\n\t\t\tif !e.M2M() {\n\t\t\t\te.Rel.Columns = []string{fmt.Sprintf(\"%s_%s\", t.Label(), snake(e.Name))}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t *Type) setupFKs() error {\n\tfor _, e := range t.Edges {\n\t\tif err := e.setStorageKey(); err != nil {\n\t\t\treturn fmt.Errorf(\"%q edge: %w\", e.Name, err)\n\t\t}\n\t\tif ef := e.def.Field; ef != \"\" \u0026\u0026 !e.OwnFK() {\n\t\t\treturn fmt.Errorf(\"edge %q has a field %q but it is not holding a foreign key\", e.Name, ef)\n\t\t}\n\t\tif e.IsInverse() || e.M2M() {\n\t\t\tcontinue\n\t\t}\n\t\towner, refid := t, e.Type.ID\n\t\tif !e.OwnFK() {\n\t\t\towner, refid = e.Type, t.ID\n\t\t}\n\t\tfk := \u0026ForeignKey{\n\t\t\tEdge: e,\n\t\t\tField: \u0026Field{\n\t\t\t\ttyp:         owner,\n\t\t\t\tName:        builderField(e.Rel.Column()),\n\t\t\t\tType:        refid.Type,\n\t\t\t\tNillable:    true,\n\t\t\t\tOptional:    true,\n\t\t\t\tUnique:      e.Unique,\n\t\t\t\tUserDefined: refid.UserDefined,\n\t\t\t},\n\t\t}\n\t\t// Update the foreign-key/edge-field info of the assoc-edge.\n\t\te.Rel.fk = fk\n\t\tif edgeField := e.def.Field; edgeField != \"\" {\n\t\t\tif err := owner.setupFieldEdge(fk, e, edgeField); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\t// Update inverse-edge info as well (optional).\n\t\tif ref := e.Ref; ref != nil {\n\t\t\tref.Rel.fk = fk\n\t\t\tif edgeField := e.Ref.def.Field; edgeField != \"\" {\n\t\t\t\tif err := owner.setupFieldEdge(fk, e.Ref, edgeField); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Special case for checking if the FK is already defined as the ID field (Issue 1288).\n\t\tif key, _ := e.StorageKey(); key != nil \u0026\u0026 len(key.Columns) == 1 \u0026\u0026 key.Columns[0] == refid.StorageKey() {\n\t\t\tfk.Field = refid\n\t\t\tfk.UserDefined = true\n\t\t}\n\t\towner.addFK(fk)\n\t\t// In case the user wants to set the column name using the StorageKey option, make sure they\n\t\t// do it using the edge-field option if both back-ref edge and field are defined (Issue 1288).\n\t\tif e.def.StorageKey != nil \u0026\u0026 len(e.def.StorageKey.Columns) \u003e 0 \u0026\u0026 !e.OwnFK() \u0026\u0026 e.Ref != nil \u0026\u0026 e.Type.fields[e.Rel.Column()] != nil {\n\t\t\treturn fmt.Errorf(\n\t\t\t\t\"column %q definition on edge %[2]q should be replaced with Field(%[1]q) on its reference %[3]q\",\n\t\t\t\te.Rel.Column(), e.Name, e.Ref.Name,\n\t\t\t)\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) addIndexes(schema *load.Schema) {\n\ttyp, _ := g.typ(schema.Name)\n\tfor _, idx := range schema.Indexes {\n\t\tcheck(typ.AddIndex(idx), \"invalid index for schema %q\", schema.Name)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) edgeSchemas() error {\n\tfor _, n := range g.Nodes {\n\t\tfor _, e := range n.Edges {\n\t\t\tif e.def.Through == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif !e.M2M() {\n\t\t\t\treturn fmt.Errorf(\"edge %s.%s Through(%q, %s.Type) is allowed only on M2M edges, but got: %q\", n.Name, e.Name, e.def.Through.N, e.def.Through.T, e.Rel.Type)\n\t\t\t}\n\t\t\tedgeT, ok := g.typ(e.def.Through.T)\n\t\t\tswitch {\n\t\t\tcase !ok:\n\t\t\t\treturn fmt.Errorf(\"edge %s.%s defined with Through(%q, %s.Type), but type %[4]s was not found\", n.Name, e.Name, e.def.Through.N, e.def.Through.T, e.def.Through.T)\n\t\t\tcase edgeT == n:\n\t\t\t\treturn fmt.Errorf(\"edge %s.%s defined with Through(%q, %s.Type), but edge cannot go through itself\", n.Name, e.Name, e.def.Through.N, e.def.Through.T)\n\t\t\tcase e.def.Through.N == \"\" || n.hasEdge(e.def.Through.N):\n\t\t\t\treturn fmt.Errorf(\"edge %s.%s defined with Through(%q, %s.Type), but schema %[1]s already has an edge named %[3]s\", n.Name, e.Name, e.def.Through.N, e.def.Through.T)\n\t\t\tcase e.IsInverse():\n\t\t\t\tif edgeT.EdgeSchema.From != nil {\n\t\t\t\t\treturn fmt.Errorf(\"type %s is already used as an edge-schema by other edge.From: %s.%s\", edgeT.Name, edgeT.EdgeSchema.From.Name, edgeT.EdgeSchema.From.Owner.Name)\n\t\t\t\t}\n\t\t\t\te.Through = edgeT\n\t\t\t\tedgeT.EdgeSchema.From = e\n\t\t\t\tif to, from := edgeT.EdgeSchema.To, edgeT.EdgeSchema.From; to != nil \u0026\u0026 from.Ref != to {\n\t\t\t\t\treturn fmt.Errorf(\"mismtached edge.From(%q, %s.Type) and edge.To(%q, %s.Type) for edge schema %s\", from.Name, from.Type.Name, to.Name, to.Type.Name, edgeT.Name)\n\t\t\t\t}\n\t\t\tdefault: // Assoc.\n\t\t\t\tif edgeT.EdgeSchema.To != nil {\n\t\t\t\t\treturn fmt.Errorf(\"type %s is already used as an edge schema by other edge.To: %s.%s\", edgeT.Name, edgeT.EdgeSchema.From.Name, edgeT.EdgeSchema.From.Owner.Name)\n\t\t\t\t}\n\t\t\t\te.Through = edgeT\n\t\t\t\tedgeT.EdgeSchema.To = e\n\t\t\t\tif to, from := edgeT.EdgeSchema.To, edgeT.EdgeSchema.From; from != nil \u0026\u0026 from.Ref != to {\n\t\t\t\t\treturn fmt.Errorf(\"mismtached edge.To(%q, %s.Type) and edge.From(%q, %s.Type) for edge schema %s\", from.Name, from.Type.Name, to.Name, to.Type.Name, edgeT.Name)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Update both Assoc/To and Inverse/From\n\t\t\t// relation tables to the edge schema table.\n\t\t\te.Rel.Table = edgeT.Table()\n\t\t\tif e.Ref != nil {\n\t\t\t\te.Ref.Rel.Table = edgeT.Table()\n\t\t\t}\n\t\t\tvar ref *Edge\n\t\t\tfor i, c := range e.Rel.Columns {\n\t\t\t\tr, ok := func() (*Edge, bool) {\n\t\t\t\t\t// Search first for matching by edge-field.\n\t\t\t\t\tfor _, fk := range edgeT.ForeignKeys {\n\t\t\t\t\t\tif fk.Field.Name == c {\n\t\t\t\t\t\t\treturn fk.Edge, true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// In case of no match, search by edge-type. This can happen if the type (edge owner)\n\t\t\t\t\t// is named \"T\", but the edge-schema \"E\" names its edge field as \"u_id\". We consider\n\t\t\t\t\t// it as a match if there is only one usage of \"T\" in \"E\".\n\t\t\t\t\tvar (\n\t\t\t\t\t\tmatches []*Edge\n\t\t\t\t\t\tmatchOn = n\n\t\t\t\t\t)\n\t\t\t\t\tif i == 0 \u0026\u0026 e.IsInverse() || i == 1 \u0026\u0026 !e.IsInverse() {\n\t\t\t\t\t\tmatchOn = e.Type\n\t\t\t\t\t}\n\t\t\t\t\tfor _, e2 := range edgeT.Edges {\n\t\t\t\t\t\tif e2.Type == matchOn \u0026\u0026 e2.Field() != nil {\n\t\t\t\t\t\t\tmatches = append(matches, e2)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif len(matches) == 1 {\n\t\t\t\t\t\t// Ensure the M2M foreign key is updated accordingly.\n\t\t\t\t\t\te.Rel.Columns[i] = matches[0].Field().Name\n\t\t\t\t\t\treturn matches[0], true\n\t\t\t\t\t}\n\t\t\t\t\treturn nil, false\n\t\t\t\t}()\n\t\t\t\tif !ok {\n\t\t\t\t\treturn fmt.Errorf(\"missing edge-field %s.%s for edge schema used by %s.%s in Through(%q, %s.Type)\", edgeT.Name, c, n.Name, e.Name, e.def.Through.N, edgeT.Name)\n\t\t\t\t}\n\t\t\t\tif r.Optional {\n\t\t\t\t\treturn fmt.Errorf(\"edge-schema %s is missing a Required() attribute for its reference edge %q\", edgeT.Name, e.Name)\n\t\t\t\t}\n\t\t\t\tif !e.IsInverse() \u0026\u0026 i == 0 || e.IsInverse() \u0026\u0026 i == 1 {\n\t\t\t\t\tref = r\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Edges from src/dest table are always O2M. One row to many\n\t\t\t// rows in the join table. Hence, a many-to-many relationship.\n\t\t\tn.Edges = append(n.Edges, \u0026Edge{\n\t\t\t\tdef:         \u0026load.Edge{},\n\t\t\t\tName:        e.def.Through.N,\n\t\t\t\tType:        edgeT,\n\t\t\t\tInverse:     ref.Name,\n\t\t\t\tRef:         ref,\n\t\t\t\tOwner:       n,\n\t\t\t\tOptional:    true,\n\t\t\t\tStructTag:   structTag(e.def.Through.N, \"\"),\n\t\t\t\tAnnotations: e.Annotations,\n\t\t\t\tRel: Relation{\n\t\t\t\t\tType:    O2M,\n\t\t\t\t\tfk:      ref.Rel.fk,\n\t\t\t\t\tTable:   ref.Rel.Table,\n\t\t\t\t\tColumns: ref.Rel.Columns,\n\t\t\t\t},\n\t\t\t})\n\t\t\t// Edge schema contains a composite primary key, and it was not resolved in previous iterations.\n\t\t\tif ant := fieldAnnotate(edgeT.Annotations); ant != nil \u0026\u0026 len(ant.ID) \u003e 0 \u0026\u0026 len(edgeT.EdgeSchema.ID) == 0 {\n\t\t\t\tr1, r2 := e.Rel.Columns[0], e.Rel.Columns[1]\n\t\t\t\tif len(ant.ID) != 2 || ant.ID[0] != r1 || ant.ID[1] != r2 {\n\t\t\t\t\treturn fmt.Errorf(`edge schema primary key can only be defined on \"id\" or (%q, %q) in the same order`, r1, r2)\n\t\t\t\t}\n\t\t\t\tedgeT.ID = nil\n\t\t\t\tfor _, f := range ant.ID {\n\t\t\t\t\tedgeT.EdgeSchema.ID = append(edgeT.EdgeSchema.ID, edgeT.fields[f])\n\t\t\t\t}\n\t\t\t}\n\t\t\tif edgeT.HasCompositeID() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\thasI := func() bool {\n\t\t\t\tfor _, idx := range edgeT.Indexes {\n\t\t\t\t\tif !idx.Unique || len(idx.Columns) != 2 {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tc1, c2 := idx.Columns[0], idx.Columns[1]\n\t\t\t\t\tr1, r2 := e.Rel.Columns[0], e.Rel.Columns[1]\n\t\t\t\t\tif c1 == r1 \u0026\u0026 c2 == r2 || c1 == r2 \u0026\u0026 c2 == r1 {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}()\n\t\t\tif !hasI {\n\t\t\t\tif err := edgeT.AddIndex(\u0026load.Index{Unique: true, Fields: e.Rel.Columns}); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func aliases(g *Graph) {\n\tmayAlias := make(map[string]*Type)\n\tfor _, n := range g.Nodes {\n\t\tif pkg := n.PackageDir(); importPkg[pkg] != \"\" {\n\t\t\t// By default, a package named \"pet\" will be named as \"entpet\".\n\t\t\tn.alias = path.Base(g.Package) + pkg\n\t\t} else {\n\t\t\tmayAlias[n.PackageDir()] = n\n\t\t}\n\t}\n\tfor _, n := range g.Nodes {\n\t\tfor _, f := range n.Fields {\n\t\t\tif !f.HasGoType() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tname := f.Type.PkgName\n\t\t\tif name == \"\" \u0026\u0026 f.Type.PkgPath != \"\" {\n\t\t\t\tname = path.Base(f.Type.PkgPath)\n\t\t\t}\n\t\t\t// A user-defined type already uses the\n\t\t\t// package local name.\n\t\t\tif n, ok := mayAlias[name]; ok {\n\t\t\t\t// By default, a package named \"pet\" will be named as \"entpet\".\n\t\t\t\tn.alias = path.Base(g.Package) + name\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (g *Graph) defaults() {\n\tif g.IDType != nil {\n\t\treturn\n\t}\n\tg.IDType = defaultIDType\n\tif len(g.Nodes) == 0 {\n\t\treturn\n\t}\n\tidTypes := make([]*field.TypeInfo, 0, len(g.Nodes))\n\tfor _, n := range g.Nodes {\n\t\tif n.HasOneFieldID() {\n\t\t\tidTypes = append(idTypes, n.ID.Type)\n\t\t}\n\t}\n\t// Check that all nodes have the same type for the ID field.\n\tfor i := 0; i \u003c len(idTypes)-1; i++ {\n\t\tif idTypes[i].Type != idTypes[i+1].Type {\n\t\t\treturn\n\t\t}\n\t}\n\tg.IDType = idTypes[0]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/storage.go",
          "code_snippet": "Storage struct {\n\tName       string             // storage name.\n\tBuilder    reflect.Type       // query builder type.\n\tDialects   []string           // supported dialects.\n\tIdentName  string             // identifier name (fields and funcs).\n\tImports    []string           // import packages needed.\n\tSchemaMode SchemaMode         // schema mode support.\n\tOps        func(*Field) []Op  // storage specific operations.\n\tOpCode     func(Op) string    // operation code for predicates.\n\tInit       func(*Graph) error // optional init function.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/graph.go",
          "code_snippet": "func (c Config) FeatureEnabled(name string) (bool, error) {\n\tfor _, f := range allFeatures {\n\t\tif name == f.Name {\n\t\t\treturn c.featureEnabled(f), nil\n\t\t}\n\t}\n\treturn false, fmt.Errorf(\"unexpected feature name %q\", name)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/feature.go",
          "code_snippet": "FeatureGlobalID = Feature{\n\t\tName:        \"sql/globalid\",\n\t\tStage:       Experimental,\n\t\tDefault:     false,\n\t\tDescription: \"Ensures all nodes have a unique global identifier\", GraphTemplates: []GraphTemplate{\n\t\t\t{\n\t\t\t\tName:   \"internal/globalid\",\n\t\t\t\tFormat: \"internal/globalid.go\",\n\t\t\t},\n\t\t},\n\t\tcleanup: func(c *Config) error {\n\t\t\treturn remove(filepath.Join(c.Target, \"internal\"), \"globalid.go\")\n\t\t},\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/feature.go",
          "code_snippet": "Feature struct {\n\t// Name of the feature.\n\tName string\n\n\t// Stage of the feature.\n\tStage FeatureStage\n\n\t// Default values indicates if this feature is enabled by default.\n\tDefault bool\n\n\t// A Description of this feature.\n\tDescription string\n\n\t// Templates defines list of templates for extending or overriding the default\n\t// templates. In order to write the template output to a standalone file, use\n\t// the GraphTemplates below.\n\tTemplates []*Template\n\n\t// GraphTemplates defines optional templates to be executed on the graph\n\t// and will their output will be written to the configured destination.\n\tGraphTemplates []GraphTemplate\n\n\t// cleanup used to cleanup all changes when a feature-flag is removed.\n\t// e.g. delete files from previous codegen runs.\n\tcleanup func(*Config) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/globalid.go",
          "code_snippet": "func IncrementStartAnnotation(g *Graph) error {\n\t// To ensure we keep the existing type ranges, load the current global id sequence, if there is any.\n\tvar (\n\t\tr        = make(IncrementStarts)\n\t\tpath     = IncrementStartsFilePath(g.Target)\n\t\tbuf, err = os.ReadFile(path)\n\t)\n\tswitch {\n\tcase os.IsNotExist(err): // first time generation\n\tcase err != nil:\n\t\treturn err\n\tdefault:\n\t\tif ok, _ := g.FeatureEnabled(FeatureSnapshot.Name); ok {\n\t\t\tif err = ResolveIncrementStartsConflict(g.Target); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tbuf, err = os.ReadFile(path)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tvar (\n\t\t\tmatches = make([][]byte, 0, 2)\n\t\t\tlines   = bytes.Split(buf, []byte(\"\\n\"))\n\t\t)\n\t\tfor i := 0; i \u003c len(lines); i++ {\n\t\t\tif l := lines[i]; bytes.HasPrefix(l, []byte(incrementIdent)) {\n\t\t\t\tmatches = append(matches, l)\n\t\t\t}\n\t\t}\n\t\tif len(matches) != 1 {\n\t\t\treturn fmt.Errorf(\"expect to have exactly 1 ranges in %s\", path)\n\t\t}\n\t\tvar (\n\t\t\tline  = matches[0]\n\t\t\tstart = bytes.IndexByte(line, '\"')\n\t\t\tend   = bytes.LastIndexByte(line, '\"')\n\t\t)\n\t\tif start == -1 || start \u003e= end {\n\t\t\treturn fmt.Errorf(\"unexpected line %s\", line)\n\t\t}\n\t\tl, err := strconv.Unquote(string(line[start : end+1]))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := json.Unmarshal([]byte(l), \u0026r); err != nil {\n\t\t\treturn fmt.Errorf(\"unmarshal ranges: %w\", err)\n\t\t}\n\t}\n\t// Range over all nodes and assign the increment starting value.\n\tvar (\n\t\tneed    []*Type\n\t\tlastIdx = -1\n\t)\n\tfor _, n := range g.Nodes {\n\t\ta := n.EntSQL()\n\t\tif a == nil {\n\t\t\ta = \u0026entsql.Annotation{}\n\t\t}\n\t\tswitch v, ok := r[n.Table()]; {\n\t\tcase a.IncrementStart != nil:\n\t\t\t// In case the start value is defined by an annotation already, it has precedence.\n\t\t\tr[n.Table()] = *a.IncrementStart\n\t\tcase ok:\n\t\t\t// In case this node has no annotation but an existing entry in the increments file.\n\t\t\ta.IncrementStart = \u0026v\n\t\tdefault:\n\t\t\t// In case this is a new node, it gets the next free increment range (highest value \u003c\u003c 32).\n\t\t\tneed = append(need, n)\n\t\t}\n\t\tif v, ok := r[n.Table()]; ok {\n\t\t\tlastIdx = max(lastIdx, v/(1\u003c\u003c32-1))\n\t\t}\n\t\tif err := setAnnotation(n, a); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\t// Compute new ranges and write them back to the file.\n\tfor i, n := range need {\n\t\tr[n.Table()] = (lastIdx + i + 1) \u003c\u003c 32\n\t\ta := n.EntSQL()\n\t\ta.IncrementStart = func(i int) *int { return \u0026i }(r[n.Table()]) // copy to not override previous values\n\t\tif err := setAnnotation(n, a); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\t// Ensure increment ranges are exactly of size 1\u003c\u003c32 with no overlaps.\n\td := make(map[int]string)\n\tfor t, s := range r {\n\t\tswitch t1, ok := d[s]; {\n\t\tcase ok:\n\t\t\treturn fmt.Errorf(\"duplicated increment start value %d for types %s and %s\", s, t1, t)\n\t\tcase s%(1\u003c\u003c32) != 0:\n\t\t\treturn fmt.Errorf(\n\t\t\t\t\"unexpected increment start value %d for type %s, expected multiple of %d (1\u003c\u003c32)\", s, t, 1\u003c\u003c32,\n\t\t\t)\n\t\t}\n\t\td[s] = t\n\t}\n\tif g.Annotations == nil {\n\t\tg.Annotations = make(Annotations)\n\t}\n\tg.Annotations[r.Name()] = r\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        189
      ],
      "cover_details": {
        "line_cover_rate": 0.9354838709677419
      }
    },
    {
      "id": "entgo.io/ent/entql/types.go:StringOr",
      "testcases": [
        {
          "package": "entgo.io/ent/entql",
          "rel_file_path": "entql/types_test.go",
          "func_name": "TestFielder"
        }
      ],
      "name": "StringOr",
      "signature": "StringOr (x, y StringP, z ...StringP) StringP",
      "ground_truth": "func StringOr(x, y StringP, z ...StringP) StringP {\n\texpr := \u0026stringP{}\n\texpr.done = func(name string) {\n\t\tzs := make([]P, len(z))\n\t\tfor i := range z {\n\t\t\tzs[i] = z[i].Field(name)\n\t\t}\n\t\texpr.P = Or(x.Field(name), y.Field(name), zs...)\n\t}\n\treturn expr\n}",
      "function_comment": "// StringOr returns a composed predicate that represents the logical OR predicate.",
      "function_statement": "// StringOr returns a composed predicate that represents the logical OR predicate.",
      "start_line": 1780,
      "end_line": 1790,
      "file_path": "./entql/types.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/types.go",
          "code_snippet": "StringP interface {\n\tFielder\n\tstring()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/types.go",
          "code_snippet": "stringP struct {\n\tP\n\tdone func(string)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "P interface {\n\t\tExpr\n\t\tNegate() P\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/types.go",
          "code_snippet": "Fielder interface {\n\tField(string) P\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entql/entql.go",
          "code_snippet": "func Or(x, y P, z ...P) P {\n\tif len(z) == 0 {\n\t\treturn \u0026BinaryExpr{\n\t\t\tOp: OpOr,\n\t\t\tX:  x,\n\t\t\tY:  y,\n\t\t}\n\t}\n\treturn \u0026NaryExpr{\n\t\tOp: OpOr,\n\t\tXs: append([]Expr{x, y}, p2expr(z)...),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1780,
        1781,
        1782,
        1783,
        1784,
        1785,
        1786,
        1787,
        1789
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/request.go:NewEvalRequest",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestEvaluateRequestWithoutBindingsEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestEvaluateRequestEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseStatus"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestClientCanceledContext"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadRequest"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestClientQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindings"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportRoundTripper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseBody"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        }
      ],
      "name": "NewEvalRequest",
      "signature": "NewEvalRequest (query string, opts ...RequestOption) *Request",
      "ground_truth": "func NewEvalRequest(query string, opts ...RequestOption) *Request {\n\tr := \u0026Request{\n\t\tRequestID: uuid.New().String(),\n\t\tOperation: OpsEval,\n\t\tArguments: map[string]any{\n\t\t\tArgsGremlin:  query,\n\t\t\tArgsLanguage: \"gremlin-groovy\",\n\t\t},\n\t}\n\tfor i := range opts {\n\t\topts[i](r)\n\t}\n\treturn r\n}",
      "function_comment": "// NewEvalRequest returns a new evaluation request request.",
      "function_statement": "// NewEvalRequest returns a new evaluation request request.",
      "start_line": 33,
      "end_line": 46,
      "file_path": "./dialect/gremlin/request.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "RequestOption func(*Request)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "OpsEval = \"eval\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsLanguage = \"language\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/google/uuid@v1.3.0/uuid.go",
          "code_snippet": "func (uuid UUID) String() string {\n\tvar buf [36]byte\n\tencodeHex(buf[:], uuid)\n\treturn string(buf[:])\n}",
          "ref_module": "uuid"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/google/uuid@v1.3.0/version4.go",
          "code_snippet": "func New() UUID {\n\treturn Must(NewRandom())\n}",
          "ref_module": "uuid"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "decode",
      "signature": "(dec efaceDecoder) decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec efaceDecoder) decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\trtype, err := dec.reflectBytes(data)\n\tif err != nil {\n\t\titer.ReportError(\"decode empty interface\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(data)\n\tdefer config.ReturnIterator(it)\n\n\tvar val any\n\tif rtype != nil {\n\t\tval = rtype.New()\n\t\tit.ReadVal(val)\n\t\tval = rtype.Indirect(val)\n\t} else {\n\t\tif jsoniter.Get(data, TypeKey).LastError() == nil {\n\t\t\tvk := jsoniter.Get(data, ValueKey)\n\t\t\tif vk.LastError() == nil {\n\t\t\t\tval = vk.GetInterface()\n\t\t\t}\n\t\t}\n\t\tif val == nil {\n\t\t\tval = it.Read()\n\t\t}\n\t}\n\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode empty interface\", it.Error.Error())\n\t\treturn\n\t}\n\n\t// nolint: gas\n\tdec.typ.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 43,
      "end_line": 82,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (dec efaceDecoder) reflectBytes(data []byte) (reflect2.Type, error) {\n\ttyp := Type(jsoniter.Get(data, TypeKey).ToString())\n\trtype := dec.reflectType(typ)\n\tif rtype != nil {\n\t\treturn rtype, nil\n\t}\n\n\tswitch typ {\n\tcase listType:\n\t\treturn dec.reflectSlice(data)\n\tcase mapType:\n\t\treturn dec.reflectMap(data)\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "ValueKey = \"@value\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/pool.go",
          "code_snippet": "IteratorPool interface {\n\tBorrowIterator(data []byte) *Iterator\n\tReturnIterator(iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "func (iter *Iterator) ReadVal(obj interface{}) {\n\tdepth := iter.depth\n\tcacheKey := reflect2.RTypeOf(obj)\n\tdecoder := iter.cfg.getDecoderFromCache(cacheKey)\n\tif decoder == nil {\n\t\ttyp := reflect2.TypeOf(obj)\n\t\tif typ == nil || typ.Kind() != reflect.Ptr {\n\t\t\titer.ReportError(\"ReadVal\", \"can only unmarshal into pointer\")\n\t\t\treturn\n\t\t}\n\t\tdecoder = iter.cfg.DecoderOf(typ)\n\t}\n\tptr := reflect2.PtrOf(obj)\n\tif ptr == nil {\n\t\titer.ReportError(\"ReadVal\", \"can not read into nil pointer\")\n\t\treturn\n\t}\n\tdecoder.Decode(ptr, iter)\n\tif iter.depth != depth {\n\t\titer.ReportError(\"ReadVal\", \"unexpected mismatched nesting\")\n\t\treturn\n\t}\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/any.go",
          "code_snippet": "Any interface {\n\tLastError() error\n\tValueType() ValueType\n\tMustBeValid() Any\n\tToBool() bool\n\tToInt() int\n\tToInt32() int32\n\tToInt64() int64\n\tToUint() uint\n\tToUint32() uint32\n\tToUint64() uint64\n\tToFloat32() float32\n\tToFloat64() float64\n\tToString() string\n\tToVal(val interface{})\n\tGet(path ...interface{}) Any\n\tSize() int\n\tKeys() []string\n\tGetInterface() interface{}\n\tWriteTo(stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Get(data []byte, path ...interface{}) Any {\n\treturn ConfigDefault.Get(data, path...)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) Read() interface{} {\n\tvalueType := iter.WhatIsNext()\n\tswitch valueType {\n\tcase StringValue:\n\t\treturn iter.ReadString()\n\tcase NumberValue:\n\t\tif iter.cfg.configBeforeFrozen.UseNumber {\n\t\t\treturn json.Number(iter.readNumberAsString())\n\t\t}\n\t\treturn iter.ReadFloat64()\n\tcase NilValue:\n\t\titer.skipFourBytes('n', 'u', 'l', 'l')\n\t\treturn nil\n\tcase BoolValue:\n\t\treturn iter.ReadBool()\n\tcase ArrayValue:\n\t\tarr := []interface{}{}\n\t\titer.ReadArrayCB(func(iter *Iterator) bool {\n\t\t\tvar elem interface{}\n\t\t\titer.ReadVal(\u0026elem)\n\t\t\tarr = append(arr, elem)\n\t\t\treturn true\n\t\t})\n\t\treturn arr\n\tcase ObjectValue:\n\t\tobj := map[string]interface{}{}\n\t\titer.ReadMapCB(func(Iter *Iterator, field string) bool {\n\t\t\tvar elem interface{}\n\t\t\titer.ReadVal(\u0026elem)\n\t\t\tobj[field] = elem\n\t\t\treturn true\n\t\t})\n\t\treturn obj\n\tdefault:\n\t\titer.ReportError(\"Read\", fmt.Sprintf(\"unexpected value type: %v\", valueType))\n\t\treturn nil\n\t}\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        75,
        76,
        77,
        78,
        81
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/scan.go:assignable",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/scan_test.go",
          "func_name": "TestScanSlice"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/scan_test.go",
          "func_name": "TestScanSlice_CamelTags"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/scan_test.go",
          "func_name": "TestScanJSON"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/scan_test.go",
          "func_name": "TestScanNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/scan_test.go",
          "func_name": "TestScanSlicePtr"
        },
        {
          "package": "entgo.io/ent/dialect/sql",
          "rel_file_path": "dialect/sql/scan_test.go",
          "func_name": "TestInterface"
        }
      ],
      "name": "assignable",
      "signature": "assignable (typ reflect.Type) bool",
      "ground_truth": "func assignable(typ reflect.Type) bool {\n\tswitch k := typ.Kind(); {\n\tcase typ.Implements(scannerType):\n\tcase k == reflect.Interface \u0026\u0026 typ.NumMethod() == 0:\n\tcase k == reflect.String || k \u003e= reflect.Bool \u0026\u0026 k \u003c= reflect.Float64:\n\tcase (k == reflect.Slice || k == reflect.Array) \u0026\u0026 typ.Elem().Kind() == reflect.Uint8:\n\tdefault:\n\t\treturn false\n\t}\n\treturn true\n}",
      "function_comment": "// assignable reports if the given type can be assigned directly by `Rows.Scan`.",
      "function_statement": "// assignable reports if the given type can be assigned directly by `Rows.Scan`.",
      "start_line": 182,
      "end_line": 192,
      "file_path": "./dialect/sql/scan.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/scan.go",
          "code_snippet": "scannerType  = reflect.TypeOf((*sql.Scanner)(nil)).Elem()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "String",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        191
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/dialect.go:Append",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestAppend"
        }
      ],
      "name": "Append",
      "signature": "(d *sqlite) Append (u *sql.UpdateBuilder, column string, elems []any, opts ...Option)",
      "ground_truth": "func (d *sqlite) Append(u *sql.UpdateBuilder, column string, elems []any, opts ...Option) {\n\tsetCase(u, column, when{\n\t\tCond: func(b *sql.Builder) {\n\t\t\ttyp := func(b *sql.Builder) *sql.Builder {\n\t\t\t\treturn b.WriteString(\"JSON_TYPE\").Wrap(func(b *sql.Builder) {\n\t\t\t\t\tb.Ident(column).Comma()\n\t\t\t\t\tidentPath(column, opts...).mysqlPath(b)\n\t\t\t\t})\n\t\t\t}\n\t\t\ttyp(b).WriteOp(sql.OpIsNull)\n\t\t\tb.WriteString(\" OR \")\n\t\t\ttyp(b).WriteOp(sql.OpEQ).WriteString(\"'null'\")\n\t\t},\n\t\tThen: func(b *sql.Builder) {\n\t\t\tif len(opts) \u003e 0 {\n\t\t\t\tb.WriteString(\"JSON_SET\").Wrap(func(b *sql.Builder) {\n\t\t\t\t\tb.Ident(column).Comma()\n\t\t\t\t\tidentPath(column, opts...).mysqlPath(b)\n\t\t\t\t\tb.Comma().Argf(\"JSON(?)\", marshalArg(elems))\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tb.Arg(marshalArg(elems))\n\t\t\t}\n\t\t},\n\t\tElse: func(b *sql.Builder) {\n\t\t\tb.WriteString(\"JSON_INSERT\").Wrap(func(b *sql.Builder) {\n\t\t\t\tb.Ident(column).Comma()\n\t\t\t\t// If no path was provided the top-level value is\n\t\t\t\t// a JSON array. i.e. JSON_INSERT(c, '$[#]', ?).\n\t\t\t\tpath := func(b *sql.Builder) { b.WriteString(\"'$[#]'\") }\n\t\t\t\tif len(opts) \u003e 0 {\n\t\t\t\t\tp := identPath(column, opts...)\n\t\t\t\t\tp.Path = append(p.Path, \"[#]\")\n\t\t\t\t\tpath = p.mysqlPath\n\t\t\t\t}\n\t\t\t\tfor i, e := range elems {\n\t\t\t\t\tif i \u003e 0 {\n\t\t\t\t\t\tb.Comma()\n\t\t\t\t\t}\n\t\t\t\t\tpath(b)\n\t\t\t\t\tb.Comma()\n\t\t\t\t\td.appendArg(b, e)\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t})\n}",
      "function_comment": "// Append implements the driver.Append method.",
      "function_statement": "// Append implements the driver.Append method.",
      "start_line": 18,
      "end_line": 64,
      "file_path": "./dialect/sql/sqljson/dialect.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/dialect.go",
          "code_snippet": "sqlite struct{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "UpdateBuilder struct {\n\tBuilder\n\ttable     string\n\tschema    string\n\twhere     *Predicate\n\tnulls     []string\n\tcolumns   []string\n\treturning []string\n\tvalues    []any\n\torder     []any\n\tlimit     *int\n\tprefix    Queries\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "Option func(*PathOptions)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/dialect.go",
          "code_snippet": "func setCase(u *sql.UpdateBuilder, column string, w when) {\n\tu.Set(column, sql.ExprFunc(func(b *sql.Builder) {\n\t\tb.WriteString(\"CASE WHEN \").Wrap(func(b *sql.Builder) {\n\t\t\tw.Cond(b)\n\t\t})\n\t\tb.WriteString(\" THEN \")\n\t\tw.Then(b)\n\t\tb.WriteString(\" ELSE \")\n\t\tw.Else(b)\n\t\tb.WriteString(\" END\")\n\t}))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/dialect.go",
          "code_snippet": "when struct{ Cond, Then, Else func(*sql.Builder) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Wrap(f func(*Builder)) *Builder {\n\tnb := \u0026Builder{dialect: b.dialect, total: b.total, sb: \u0026strings.Builder{}}\n\tnb.WriteByte('(')\n\tf(nb)\n\tnb.WriteByte(')')\n\tb.WriteString(nb.String())\n\tb.args = append(b.args, nb.args...)\n\tb.total = nb.total\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Comma() *Builder {\n\treturn b.WriteString(\", \")\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlPath(b *sql.Builder) {\n\tb.WriteString(`'$`)\n\tfor _, p := range p.Path {\n\t\tswitch _, isIndex := isJSONIdx(p); {\n\t\tcase isIndex:\n\t\t\tb.WriteString(p)\n\t\tcase p == \"*\" || isQuoted(p) || isIdentifier(p):\n\t\t\tb.WriteString(\".\" + p)\n\t\tdefault:\n\t\t\tb.WriteString(`.\"` + p + `\"`)\n\t\t}\n\t}\n\tb.WriteByte('\\'')\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func identPath(ident string, opts ...Option) *PathOptions {\n\tpath := \u0026PathOptions{Ident: ident}\n\tfor i := range opts {\n\t\topts[i](path)\n\t}\n\treturn path\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpIsNull",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpEQ      Op = iota",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Argf(format string, a any) *Builder {\n\tswitch a := a.(type) {\n\tcase nil:\n\t\tb.WriteString(\"NULL\")\n\t\treturn b\n\tcase *raw:\n\t\tb.WriteString(a.s)\n\t\treturn b\n\tcase Querier:\n\t\tb.Join(a)\n\t\treturn b\n\t}\n\tb.total++\n\tb.args = append(b.args, a)\n\tb.WriteString(format)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func marshalArg(arg any) any {\n\tif buf, err := json.Marshal(arg); err == nil {\n\t\targ = string(buf)\n\t}\n\treturn arg\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Arg(a any) *Builder {\n\tswitch v := a.(type) {\n\tcase nil:\n\t\tb.WriteString(\"NULL\")\n\t\treturn b\n\tcase *raw:\n\t\tb.WriteString(v.s)\n\t\treturn b\n\tcase Querier:\n\t\tb.Join(v)\n\t\treturn b\n\t}\n\t// Default placeholder param (MySQL and SQLite).\n\tformat := \"?\"\n\tif b.postgres() {\n\t\t// Postgres' arguments are referenced using the syntax $n.\n\t\t// $1 refers to the 1st argument, $2 to the 2nd, and so on.\n\t\tformat = \"$\" + strconv.Itoa(b.total+1)\n\t}\n\tif f, ok := a.(ParamFormatter); ok {\n\t\tformat = f.FormatParam(format, \u0026StmtInfo{\n\t\t\tDialect: b.dialect,\n\t\t})\n\t}\n\treturn b.Argf(format, a)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "PathOptions struct {\n\tIdent   string\n\tPath    []string\n\tCast    string\n\tUnquote bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/dialect.go",
          "code_snippet": "func (d *sqlite) appendArg(b *sql.Builder, v any) {\n\tswitch {\n\tcase !isPrimitive(v):\n\t\tb.Argf(\"JSON(?)\", marshalArg(v))\n\tdefault:\n\t\tb.Arg(v)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59
      ],
      "cover_details": {
        "line_cover_rate": 0.8297872340425532
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:DecoderOfSlice",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecoderOfSlice",
      "signature": "(ext decodeExtension) DecoderOfSlice (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfSlice(typ reflect2.Type) jsoniter.ValDecoder {\n\tsliceType := typ.(reflect2.SliceType)\n\telemType := sliceType.Elem()\n\tif elemType.Kind() == reflect.Uint8 {\n\t\treturn nil\n\t}\n\treturn sliceDecoder{\n\t\tsliceType: sliceType,\n\t\telemDec:   ext.LazyDecoderOf(elemType),\n\t}\n}",
      "function_comment": "// DecoderOfSlice returns a value decoder of a slice type.",
      "function_statement": "// DecoderOfSlice returns a value decoder of a slice type.",
      "start_line": 35,
      "end_line": 45,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "sliceDecoder struct {\n\tsliceType reflect2.SliceType\n\telemDec   jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "SliceType interface {\n\tListType\n\tMakeSlice(length int, cap int) interface{}\n\tUnsafeMakeSlice(length int, cap int) unsafe.Pointer\n\tGrow(obj interface{}, newLength int)\n\tUnsafeGrow(ptr unsafe.Pointer, newLength int)\n\tAppend(obj interface{}, elem interface{})\n\tUnsafeAppend(obj unsafe.Pointer, elem unsafe.Pointer)\n\tLengthOf(obj interface{}) int\n\tUnsafeLengthOf(ptr unsafe.Pointer) int\n\tSetNil(obj interface{})\n\tUnsafeSetNil(ptr unsafe.Pointer)\n\tCap(obj interface{}) int\n\tUnsafeCap(ptr unsafe.Pointer) int\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ListType interface {\n\tType\n\tElem() Type\n\tSetIndex(obj interface{}, index int, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, index int, elem unsafe.Pointer)\n\tGetIndex(obj interface{}, index int) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, index int) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44
      ],
      "cover_details": {
        "line_cover_rate": 0.9090909090909091
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/type.go:ValidSchemaName",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestValidSchemaName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestFKColumns"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraph"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_AddIndex"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestRelation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestMultiSchemaAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestGraph_Hooks"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestEnsureCorrectFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "ValidSchemaName",
      "signature": "ValidSchemaName (name string) error",
      "ground_truth": "func ValidSchemaName(name string) error {\n\t// Schema package is lower-cased (see Type.Package).\n\tpkg := strings.ToLower(name)\n\tif token.Lookup(pkg).IsKeyword() {\n\t\treturn fmt.Errorf(\"schema lowercase name conflicts with Go keyword %q\", pkg)\n\t}\n\tif types.Universe.Lookup(pkg) != nil {\n\t\treturn fmt.Errorf(\"schema lowercase name conflicts with Go predeclared identifier %q\", pkg)\n\t}\n\tif _, ok := globalIdent[pkg]; ok {\n\t\treturn fmt.Errorf(\"schema lowercase name conflicts ent predeclared identifier %q\", pkg)\n\t}\n\tif _, ok := globalIdent[name]; ok {\n\t\treturn fmt.Errorf(\"schema name conflicts with ent predeclared identifier %q\", name)\n\t}\n\treturn nil\n}",
      "function_comment": "// ValidSchemaName will determine if a name is going to conflict with any\n// pre-defined names",
      "function_statement": "// ValidSchemaName will determine if a name is going to conflict with any\n// pre-defined names",
      "start_line": 1005,
      "end_line": 1021,
      "file_path": "./entc/gen/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "globalIdent = names(\n\t\t\"AggregateFunc\",\n\t\t\"As\",\n\t\t\"Asc\",\n\t\t\"Client\",\n\t\t\"config\",\n\t\t\"Count\",\n\t\t\"Debug\",\n\t\t\"Desc\",\n\t\t\"Driver\",\n\t\t\"Hook\",\n\t\t\"Interceptor\",\n\t\t\"Log\",\n\t\t\"MutateFunc\",\n\t\t\"Mutation\",\n\t\t\"Mutator\",\n\t\t\"Op\",\n\t\t\"Option\",\n\t\t\"OrderFunc\",\n\t\t\"Max\",\n\t\t\"Mean\",\n\t\t\"Min\",\n\t\t\"Schema\",\n\t\t\"Sum\",\n\t\t\"Policy\",\n\t\t\"Query\",\n\t\t\"Value\",\n\t)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func ToLower(s string) string {\n\tisASCII, hasUpper := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasUpper = hasUpper || ('A' \u003c= c \u0026\u0026 c \u003c= 'Z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasUpper {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'A' \u003c= c \u0026\u0026 c \u003c= 'Z' {\n\t\t\t\tc += 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToLower, s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/token/token.go",
          "code_snippet": "func (tok Token) IsKeyword() bool { return keyword_beg \u003c tok \u0026\u0026 tok \u003c keyword_end }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/token/token.go",
          "code_snippet": "func Lookup(ident string) Token {\n\tif tok, is_keyword := keywords[ident]; is_keyword {\n\t\treturn tok\n\t}\n\treturn IDENT\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/types/scope.go",
          "code_snippet": "func (s *Scope) Lookup(name string) Object {\n\tobj := resolve(name, s.elems[name])\n\t// Hijack Lookup for \"any\": with gotypesalias=1, we want the Universe to\n\t// return an Alias for \"any\", and with gotypesalias=0 we want to return\n\t// the legacy representation of aliases.\n\t//\n\t// This is rather tricky, but works out after auditing of the usage of\n\t// s.elems. The only external API to access scope elements is Lookup.\n\t//\n\t// TODO: remove this once gotypesalias=0 is no longer supported.\n\tif obj == universeAnyAlias \u0026\u0026 !aliasAny() {\n\t\treturn universeAnyNoAlias\n\t}\n\treturn obj\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/go/types/universe.go",
          "code_snippet": "Universe *Scope",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1005,
        1006,
        1007,
        1008,
        1009,
        1010,
        1011,
        1012,
        1013,
        1014,
        1015,
        1016,
        1017,
        1018,
        1019,
        1020
      ],
      "cover_details": {
        "line_cover_rate": 0.9411764705882353
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/expand.go:ExpandBindings",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindingsNoQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestNewClient"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindings"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestConfigBuild"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        }
      ],
      "name": "ExpandBindings",
      "signature": "ExpandBindings (rt RoundTripper) RoundTripper",
      "ground_truth": "func ExpandBindings(rt RoundTripper) RoundTripper {\n\treturn RoundTripperFunc(func(ctx context.Context, r *Request) (*Response, error) {\n\t\tbindings, ok := r.Arguments[ArgsBindings]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\tquery, ok := r.Arguments[ArgsGremlin]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\t{\n\t\t\tquery, bindings := query.(string), bindings.(map[string]any)\n\t\t\tkeys := make(sort.StringSlice, 0, len(bindings))\n\t\t\tfor k := range bindings {\n\t\t\t\tkeys = append(keys, k)\n\t\t\t}\n\t\t\tsort.Sort(sort.Reverse(keys))\n\t\t\tkv := make([]string, 0, len(bindings)*2)\n\t\t\tfor _, k := range keys {\n\t\t\t\ts, err := jsoniter.MarshalToString(bindings[k])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"marshal bindings value for key %s: %w\", k, err)\n\t\t\t\t}\n\t\t\t\tkv = append(kv, k, s)\n\t\t\t}\n\t\t\tdelete(r.Arguments, ArgsBindings)\n\t\t\tr.Arguments[ArgsGremlin] = strings.NewReplacer(kv...).Replace(query)\n\t\t}\n\t\treturn rt.RoundTrip(ctx, r)\n\t})\n}",
      "function_comment": "// ExpandBindings expands the given RoundTripper and expands the request bindings into the Gremlin traversal.",
      "function_statement": "// ExpandBindings expands the given RoundTripper and expands the request bindings into the Gremlin traversal.",
      "start_line": 17,
      "end_line": 47,
      "file_path": "./dialect/gremlin/expand.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripperFunc func(context.Context, *Request) (*Response, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsBindings = \"bindings\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/sort/sort.go",
          "code_snippet": "StringSlice []string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/sort/sort.go",
          "code_snippet": "func Sort(data Interface) {\n\tn := data.Len()\n\tif n \u003c= 1 {\n\t\treturn\n\t}\n\tlimit := bits.Len(uint(n))\n\tpdqsort(data, 0, n, limit)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/sort/sort.go",
          "code_snippet": "func Reverse(data Interface) Interface {\n\treturn \u0026reverse{data}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func MarshalToString(v interface{}) (string, error) {\n\treturn ConfigDefault.MarshalToString(v)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func delete(m map[Type]Type1, key Type)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/replace.go",
          "code_snippet": "func (r *Replacer) Replace(s string) string {\n\tr.once.Do(r.buildOnce)\n\treturn r.r.Replace(s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/replace.go",
          "code_snippet": "func NewReplacer(oldnew ...string) *Replacer {\n\tif len(oldnew)%2 == 1 {\n\t\tpanic(\"strings.NewReplacer: odd argument count\")\n\t}\n\treturn \u0026Replacer{oldnew: append([]string(nil), oldnew...)}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        45
      ],
      "cover_details": {
        "line_cover_rate": 0.8709677419354839
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/client.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t *Transport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t *Transport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tspanNameFormatter := t.FormatSpanName\n\tif spanNameFormatter == nil {\n\t\tspanNameFormatter = func(context.Context, *gremlin.Request) string {\n\t\t\treturn \"gremlin:traversal\"\n\t\t}\n\t}\n\tstartOpts := t.StartOptions\n\tif t.GetStartOptions != nil {\n\t\tstartOpts = t.GetStartOptions(ctx, req)\n\t}\n\n\tvar rt gremlin.RoundTripper = \u0026traceTransport{\n\t\tbase:           t.Base,\n\t\tformatSpanName: spanNameFormatter,\n\t\tstartOptions:   startOpts,\n\t\twithQuery:      t.WithQuery,\n\t}\n\trt = statsTransport{rt}\n\treturn rt.RoundTrip(ctx, req)\n}",
      "function_comment": "// RoundTrip implements gremlin.RoundTripper, delegating to Base and recording stats and traces for the request.",
      "function_statement": "// RoundTrip implements gremlin.RoundTripper, delegating to Base and recording stats and traces for the request.",
      "start_line": 44,
      "end_line": 64,
      "file_path": "./dialect/gremlin/ocgremlin/client.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/client.go",
          "code_snippet": "Transport struct {\n\t// Base is a wrapped gremlin.RoundTripper that does the actual requests.\n\tBase gremlin.RoundTripper\n\n\t// StartOptions are applied to the span started by this Transport around each\n\t// request.\n\t//\n\t// StartOptions.SpanKind will always be set to trace.SpanKindClient\n\t// for spans started by this transport.\n\tStartOptions trace.StartOptions\n\n\t// GetStartOptions allows to set start options per request. If set,\n\t// StartOptions is going to be ignored.\n\tGetStartOptions func(context.Context, *gremlin.Request) trace.StartOptions\n\n\t// NameFromRequest holds the function to use for generating the span name\n\t// from the information found in the outgoing Gremlin Request. By default the\n\t// name equals the URL Path.\n\tFormatSpanName func(context.Context, *gremlin.Request) string\n\n\t// WithQuery, if set to true, will enable recording of gremlin queries in spans.\n\t// Only allow this if it is safe to have queries recorded with respect to\n\t// security.\n\tWithQuery bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "traceTransport struct {\n\tbase           gremlin.RoundTripper\n\tstartOptions   trace.StartOptions\n\tformatSpanName func(context.Context, *gremlin.Request) string\n\twithQuery      bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "statsTransport struct {\n\tbase gremlin.RoundTripper\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:DecorateDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecorateDecoder",
      "signature": "(ext decodeExtension) DecorateDecoder (typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecorateDecoder(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif dec := ext.DecoratorOfRegistered(dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfUnmarshaler(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfTyper(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfNative(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Ptr, reflect.Struct:\n\t\treturn dec\n\tcase reflect.Interface:\n\t\treturn ext.DecoratorOfInterface(typ, dec)\n\tcase reflect.Slice:\n\t\treturn ext.DecoratorOfSlice(typ, dec)\n\tcase reflect.Array:\n\t\treturn ext.DecoratorOfArray(dec)\n\tcase reflect.Map:\n\t\treturn ext.DecoratorOfMap(dec)\n\tdefault:\n\t\treturn ext.DecoderOfError(\"graphson: unsupported type: %s\", typ.String())\n\t}\n}",
      "function_comment": "// DecorateDecoder decorates an passed in value decoder for type.",
      "function_statement": "// DecorateDecoder decorates an passed in value decoder for type.",
      "start_line": 82,
      "end_line": 109,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (decodeExtension) DecoratorOfRegistered(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := dec.(registeredDecoder); ok {\n\t\treturn dec\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (decodeExtension) DecoratorOfUnmarshaler(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif reflect2.PtrTo(typ).Implements(unmarshalerType) {\n\t\treturn dec\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfTyper(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerDecoder{\n\t\t\ttypeDecoder: typeDecoder{ValDecoder: dec},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (decodeExtension) DecoratorOfNative(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool:\n\t\treturn dec\n\tcase reflect.String:\n\t\treturn typeDecoder{dec, typeCheckerFunc(func(Type) error { return nil })}\n\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n\t\treflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n\t\treturn typeDecoder{dec, integerTypes}\n\tcase reflect.Float32:\n\t\treturn typeDecoder{dec, floatTypes}\n\tcase reflect.Float64:\n\t\treturn typeDecoder{dec, doubleTypes}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (decodeExtension) DecoratorOfInterface(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := typ.(*reflect2.UnsafeEFaceType); ok {\n\t\treturn efaceDecoder{typ, dec}\n\t}\n\treturn dec\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfSlice(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif typ.(reflect2.SliceType).Elem().Kind() == reflect.Uint8 {\n\t\treturn typeDecoder{dec, byteBufferType}\n\t}\n\treturn typeDecoder{dec, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfArray(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (decodeExtension) DecoratorOfMap(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, mapType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func (decodeExtension) DecoderOfError(format string, args ...any) jsoniter.ValDecoder {\n\treturn decoratorOfError(format, args...)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/graph/dsl/dsl.go:codeList",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/graph/dsl",
          "rel_file_path": "dialect/gremlin/graph/dsl/dsl_test.go",
          "func_name": "TestTraverse"
        }
      ],
      "name": "codeList",
      "signature": "codeList (sep string, vs ...any) (string, []any)",
      "ground_truth": "func codeList(sep string, vs ...any) (string, []any) {\n\tvar (\n\t\tbr   strings.Builder\n\t\targs []any\n\t)\n\tfor i, node := range vs {\n\t\tif i \u003e 0 {\n\t\t\tbr.WriteString(sep)\n\t\t}\n\t\tc, nargs := code(node)\n\t\tbr.WriteString(c)\n\t\targs = append(args, nargs...)\n\t}\n\treturn br.String(), args\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 173,
      "end_line": 187,
      "file_path": "./dialect/gremlin/graph/dsl/dsl.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/graph/dsl/dsl.go",
          "code_snippet": "func code(v any) (string, []any) {\n\tswitch n := v.(type) {\n\tcase Node:\n\t\treturn n.Code()\n\tcase *Traversal:\n\t\tvar (\n\t\t\tb    strings.Builder\n\t\t\targs []any\n\t\t)\n\t\tfor i := range n.nodes {\n\t\t\tcode, nargs := n.nodes[i].Code()\n\t\t\tb.WriteString(code)\n\t\t\targs = append(args, nargs...)\n\t\t}\n\t\treturn b.String(), args\n\tdefault:\n\t\treturn \"%s\", []any{v}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        186
      ],
      "cover_details": {
        "line_cover_rate": 0.8666666666666667
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:pascalWords",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_EnumName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_Constant"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_DefaultName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        }
      ],
      "name": "pascalWords",
      "signature": "pascalWords (words []string) string",
      "ground_truth": "func pascalWords(words []string) string {\n\tfor i, w := range words {\n\t\tupper := strings.ToUpper(w)\n\t\tif _, ok := acronyms[upper]; ok {\n\t\t\twords[i] = upper\n\t\t} else {\n\t\t\twords[i] = rules.Capitalize(w)\n\t\t}\n\t}\n\treturn strings.Join(words, \"\")\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 165,
      "end_line": 175,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/func.go",
          "code_snippet": "acronyms = make(map[string]struct{})",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func ToUpper(s string) string {\n\tisASCII, hasLower := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasLower = hasLower || ('a' \u003c= c \u0026\u0026 c \u003c= 'z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasLower {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'a' \u003c= c \u0026\u0026 c \u003c= 'z' {\n\t\t\t\tc -= 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToUpper, s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Capitalize(word string) string {\n\treturn strings.ToUpper(word[:1]) + word[1:]\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func Join(elems []string, sep string) string {\n\tswitch len(elems) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn elems[0]\n\t}\n\n\tvar n int\n\tif len(sep) \u003e 0 {\n\t\tif len(sep) \u003e= maxInt/(len(elems)-1) {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(sep) * (len(elems) - 1)\n\t}\n\tfor _, elem := range elems {\n\t\tif len(elem) \u003e maxInt-n {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(elem)\n\t}\n\n\tvar b Builder\n\tb.Grow(n)\n\tb.WriteString(elems[0])\n\tfor _, s := range elems[1:] {\n\t\tb.WriteString(sep)\n\t\tb.WriteString(s)\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        174
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/entc/load/load.go:gocmd",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/load_test.go",
          "func_name": "TestLoad"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/load_test.go",
          "func_name": "TestLoadSchemaFailure"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/load_test.go",
          "func_name": "TestLoadSpecific"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/load_test.go",
          "func_name": "TestLoadBaseSchema"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/load_test.go",
          "func_name": "TestLoadTags"
        }
      ],
      "name": "gocmd",
      "signature": "gocmd (command, target string, buildFlags []string) (string, error)",
      "ground_truth": "func gocmd(command, target string, buildFlags []string) (string, error) {\n\targs := []string{command}\n\targs = append(args, buildFlags...)\n\targs = append(args, target)\n\tcmd := exec.Command(\"go\", args...)\n\tstderr := bytes.NewBuffer(nil)\n\tstdout := bytes.NewBuffer(nil)\n\tcmd.Stderr = stderr\n\tcmd.Stdout = stdout\n\tif err := cmd.Run(); err != nil {\n\t\treturn \"\", errors.New(strings.TrimSpace(stderr.String()))\n\t}\n\treturn stdout.String(), nil\n}",
      "function_comment": "// goCmd runs a go command and returns its output.",
      "function_statement": "// goCmd runs a go command and returns its output.",
      "start_line": 344,
      "end_line": 357,
      "file_path": "./entc/load/load.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/os/exec/exec.go",
          "code_snippet": "func Command(name string, arg ...string) *Cmd {\n\tcmd := \u0026Cmd{\n\t\tPath: name,\n\t\tArgs: append([]string{name}, arg...),\n\t}\n\n\tif v := execwait.Value(); v != \"\" {\n\t\tif v == \"2\" {\n\t\t\t// Obtain the caller stack. (This is equivalent to runtime/debug.Stack,\n\t\t\t// copied to avoid importing the whole package.)\n\t\t\tstack := make([]byte, 1024)\n\t\t\tfor {\n\t\t\t\tn := runtime.Stack(stack, false)\n\t\t\t\tif n \u003c len(stack) {\n\t\t\t\t\tstack = stack[:n]\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tstack = make([]byte, 2*len(stack))\n\t\t\t}\n\n\t\t\tif i := bytes.Index(stack, []byte(\"\\nos/exec.Command(\")); i \u003e= 0 {\n\t\t\t\tstack = stack[i+1:]\n\t\t\t}\n\t\t\tcmd.createdByStack = stack\n\t\t}\n\n\t\truntime.SetFinalizer(cmd, func(c *Cmd) {\n\t\t\tif c.Process != nil \u0026\u0026 c.ProcessState == nil {\n\t\t\t\tdebugHint := \"\"\n\t\t\t\tif c.createdByStack == nil {\n\t\t\t\t\tdebugHint = \" (set GODEBUG=execwait=2 to capture stacks for debugging)\"\n\t\t\t\t} else {\n\t\t\t\t\tos.Stderr.WriteString(\"GODEBUG=execwait=2 detected a leaked exec.Cmd created by:\\n\")\n\t\t\t\t\tos.Stderr.Write(c.createdByStack)\n\t\t\t\t\tos.Stderr.WriteString(\"\\n\")\n\t\t\t\t\tdebugHint = \"\"\n\t\t\t\t}\n\t\t\t\tpanic(\"exec: Cmd started a Process but leaked without a call to Wait\" + debugHint)\n\t\t\t}\n\t\t})\n\t}\n\n\tif filepath.Base(name) == name {\n\t\tlp, err := LookPath(name)\n\t\tif lp != \"\" {\n\t\t\t// Update cmd.Path even if err is non-nil.\n\t\t\t// If err is ErrDot (especially on Windows), lp may include a resolved\n\t\t\t// extension (like .exe or .bat) that should be preserved.\n\t\t\tcmd.Path = lp\n\t\t}\n\t\tif err != nil {\n\t\t\tcmd.Err = err\n\t\t}\n\t} else if runtime.GOOS == \"windows\" \u0026\u0026 filepath.IsAbs(name) {\n\t\t// We may need to add a filename extension from PATHEXT\n\t\t// or verify an extension that is already present.\n\t\t// Since the path is absolute, its extension should be unambiguous\n\t\t// and independent of cmd.Dir, and we can go ahead and cache the lookup now.\n\t\t//\n\t\t// Note that we don't cache anything here for relative paths, because\n\t\t// cmd.Dir may be set after we return from this function and that may\n\t\t// cause the command to resolve to a different extension.\n\t\tif lp, err := lookExtensions(name, \"\"); err == nil {\n\t\t\tcmd.cachedLookExtensions.in, cmd.cachedLookExtensions.out = name, lp\n\t\t} else {\n\t\t\tcmd.Err = err\n\t\t}\n\t}\n\treturn cmd\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func NewBuffer(buf []byte) *Buffer { return \u0026Buffer{buf: buf} }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/os/exec/exec.go",
          "code_snippet": "Cmd struct {\n\t// Path is the path of the command to run.\n\t//\n\t// This is the only field that must be set to a non-zero\n\t// value. If Path is relative, it is evaluated relative\n\t// to Dir.\n\tPath string\n\n\t// Args holds command line arguments, including the command as Args[0].\n\t// If the Args field is empty or nil, Run uses {Path}.\n\t//\n\t// In typical use, both Path and Args are set by calling Command.\n\tArgs []string\n\n\t// Env specifies the environment of the process.\n\t// Each entry is of the form \"key=value\".\n\t// If Env is nil, the new process uses the current process's\n\t// environment.\n\t// If Env contains duplicate environment keys, only the last\n\t// value in the slice for each duplicate key is used.\n\t// As a special case on Windows, SYSTEMROOT is always added if\n\t// missing and not explicitly set to the empty string.\n\t//\n\t// See also the Dir field, which may set PWD in the environment.\n\tEnv []string\n\n\t// Dir specifies the working directory of the command.\n\t// If Dir is the empty string, Run runs the command in the\n\t// calling process's current directory.\n\t//\n\t// On Unix systems, the value of Dir also determines the\n\t// child process's PWD environment variable if not otherwise\n\t// specified. A Unix process represents its working directory\n\t// not by name but as an implicit reference to a node in the\n\t// file tree. So, if the child process obtains its working\n\t// directory by calling a function such as C's getcwd, which\n\t// computes the canonical name by walking up the file tree, it\n\t// will not recover the original value of Dir if that value\n\t// was an alias involving symbolic links. However, if the\n\t// child process calls Go's [os.Getwd] or GNU C's\n\t// get_current_dir_name, and the value of PWD is an alias for\n\t// the current directory, those functions will return the\n\t// value of PWD, which matches the value of Dir.\n\tDir string\n\n\t// Stdin specifies the process's standard input.\n\t//\n\t// If Stdin is nil, the process reads from the null device (os.DevNull).\n\t//\n\t// If Stdin is an *os.File, the process's standard input is connected\n\t// directly to that file.\n\t//\n\t// Otherwise, during the execution of the command a separate\n\t// goroutine reads from Stdin and delivers that data to the command\n\t// over a pipe. In this case, Wait does not complete until the goroutine\n\t// stops copying, either because it has reached the end of Stdin\n\t// (EOF or a read error), or because writing to the pipe returned an error,\n\t// or because a nonzero WaitDelay was set and expired.\n\tStdin io.Reader\n\n\t// Stdout and Stderr specify the process's standard output and error.\n\t//\n\t// If either is nil, Run connects the corresponding file descriptor\n\t// to the null device (os.DevNull).\n\t//\n\t// If either is an *os.File, the corresponding output from the process\n\t// is connected directly to that file.\n\t//\n\t// Otherwise, during the execution of the command a separate goroutine\n\t// reads from the process over a pipe and delivers that data to the\n\t// corresponding Writer. In this case, Wait does not complete until the\n\t// goroutine reaches EOF or encounters an error or a nonzero WaitDelay\n\t// expires.\n\t//\n\t// If Stdout and Stderr are the same writer, and have a type that can\n\t// be compared with ==, at most one goroutine at a time will call Write.\n\tStdout io.Writer\n\tStderr io.Writer\n\n\t// ExtraFiles specifies additional open files to be inherited by the\n\t// new process. It does not include standard input, standard output, or\n\t// standard error. If non-nil, entry i becomes file descriptor 3+i.\n\t//\n\t// ExtraFiles is not supported on Windows.\n\tExtraFiles []*os.File\n\n\t// SysProcAttr holds optional, operating system-specific attributes.\n\t// Run passes it to os.StartProcess as the os.ProcAttr's Sys field.\n\tSysProcAttr *syscall.SysProcAttr\n\n\t// Process is the underlying process, once started.\n\tProcess *os.Process\n\n\t// ProcessState contains information about an exited process.\n\t// If the process was started successfully, Wait or Run will\n\t// populate its ProcessState when the command completes.\n\tProcessState *os.ProcessState\n\n\t// ctx is the context passed to CommandContext, if any.\n\tctx context.Context\n\n\tErr error // LookPath error, if any.\n\n\t// If Cancel is non-nil, the command must have been created with\n\t// CommandContext and Cancel will be called when the command's\n\t// Context is done. By default, CommandContext sets Cancel to\n\t// call the Kill method on the command's Process.\n\t//\n\t// Typically a custom Cancel will send a signal to the command's\n\t// Process, but it may instead take other actions to initiate cancellation,\n\t// such as closing a stdin or stdout pipe or sending a shutdown request on a\n\t// network socket.\n\t//\n\t// If the command exits with a success status after Cancel is\n\t// called, and Cancel does not return an error equivalent to\n\t// os.ErrProcessDone, then Wait and similar methods will return a non-nil\n\t// error: either an error wrapping the one returned by Cancel,\n\t// or the error from the Context.\n\t// (If the command exits with a non-success status, or Cancel\n\t// returns an error that wraps os.ErrProcessDone, Wait and similar methods\n\t// continue to return the command's usual exit status.)\n\t//\n\t// If Cancel is set to nil, nothing will happen immediately when the command's\n\t// Context is done, but a nonzero WaitDelay will still take effect. That may\n\t// be useful, for example, to work around deadlocks in commands that do not\n\t// support shutdown signals but are expected to always finish quickly.\n\t//\n\t// Cancel will not be called if Start returns a non-nil error.\n\tCancel func() error\n\n\t// If WaitDelay is non-zero, it bounds the time spent waiting on two sources\n\t// of unexpected delay in Wait: a child process that fails to exit after the\n\t// associated Context is canceled, and a child process that exits but leaves\n\t// its I/O pipes unclosed.\n\t//\n\t// The WaitDelay timer starts when either the associated Context is done or a\n\t// call to Wait observes that the child process has exited, whichever occurs\n\t// first. When the delay has elapsed, the command shuts down the child process\n\t// and/or its I/O pipes.\n\t//\n\t// If the child process has failed to exit — perhaps because it ignored or\n\t// failed to receive a shutdown signal from a Cancel function, or because no\n\t// Cancel function was set — then it will be terminated using os.Process.Kill.\n\t//\n\t// Then, if the I/O pipes communicating with the child process are still open,\n\t// those pipes are closed in order to unblock any goroutines currently blocked\n\t// on Read or Write calls.\n\t//\n\t// If pipes are closed due to WaitDelay, no Cancel call has occurred,\n\t// and the command has otherwise exited with a successful status, Wait and\n\t// similar methods will return ErrWaitDelay instead of nil.\n\t//\n\t// If WaitDelay is zero (the default), I/O pipes will be read until EOF,\n\t// which might not occur until orphaned subprocesses of the command have\n\t// also closed their descriptors for the pipes.\n\tWaitDelay time.Duration\n\n\t// childIOFiles holds closers for any of the child process's\n\t// stdin, stdout, and/or stderr files that were opened by the Cmd itself\n\t// (not supplied by the caller). These should be closed as soon as they\n\t// are inherited by the child process.\n\tchildIOFiles []io.Closer\n\n\t// parentIOPipes holds closers for the parent's end of any pipes\n\t// connected to the child's stdin, stdout, and/or stderr streams\n\t// that were opened by the Cmd itself (not supplied by the caller).\n\t// These should be closed after Wait sees the command and copying\n\t// goroutines exit, or after WaitDelay has expired.\n\tparentIOPipes []io.Closer\n\n\t// goroutine holds a set of closures to execute to copy data\n\t// to and/or from the command's I/O pipes.\n\tgoroutine []func() error\n\n\t// If goroutineErr is non-nil, it receives the first error from a copying\n\t// goroutine once all such goroutines have completed.\n\t// goroutineErr is set to nil once its error has been received.\n\tgoroutineErr \u003c-chan error\n\n\t// If ctxResult is non-nil, it receives the result of watchCtx exactly once.\n\tctxResult \u003c-chan ctxResult\n\n\t// The stack saved when the Command was created, if GODEBUG contains\n\t// execwait=2. Used for debugging leaks.\n\tcreatedByStack []byte\n\n\t// For a security release long ago, we created x/sys/execabs,\n\t// which manipulated the unexported lookPathErr error field\n\t// in this struct. For Go 1.19 we exported the field as Err error,\n\t// above, but we have to keep lookPathErr around for use by\n\t// old programs building against new toolchains.\n\t// The String and Start methods look for an error in lookPathErr\n\t// in preference to Err, to preserve the errors that execabs sets.\n\t//\n\t// In general we don't guarantee misuse of reflect like this,\n\t// but the misuse of reflect was by us, the best of various bad\n\t// options to fix the security problem, and people depend on\n\t// those old copies of execabs continuing to work.\n\t// The result is that we have to leave this variable around for the\n\t// rest of time, a compatibility scar.\n\t//\n\t// See https://go.dev/blog/path-security\n\t// and https://go.dev/issue/43724 for more context.\n\tlookPathErr error\n\n\t// cachedLookExtensions caches the result of calling lookExtensions.\n\t// It is set when Command is called with an absolute path, letting it do\n\t// the work of resolving the extension, so Start doesn't need to do it again.\n\t// This is only used on Windows.\n\tcachedLookExtensions struct{ in, out string }\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/os/exec/exec.go",
          "code_snippet": "func (c *Cmd) Run() error {\n\tif err := c.Start(); err != nil {\n\t\treturn err\n\t}\n\treturn c.Wait()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func TrimSpace(s string) string {\n\t// Fast path for ASCII: look for the first ASCII non-space byte\n\tstart := 0\n\tfor ; start \u003c len(s); start++ {\n\t\tc := s[start]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// If we run into a non-ASCII byte, fall back to the\n\t\t\t// slower unicode-aware method on the remaining bytes\n\t\t\treturn TrimFunc(s[start:], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Now look for the first ASCII non-space byte from the end\n\tstop := len(s)\n\tfor ; stop \u003e start; stop-- {\n\t\tc := s[stop-1]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\t// start has been already trimmed above, should trim end only\n\t\t\treturn TrimRightFunc(s[start:stop], unicode.IsSpace)\n\t\t}\n\t\tif asciiSpace[c] == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// At this point s[start:stop] starts and ends with an ASCII\n\t// non-space bytes, so we're done. Non-ASCII cases have already\n\t// been handled above.\n\treturn s[start:stop]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) String() string {\n\tif b == nil {\n\t\t// Special case, useful in debugging.\n\t\treturn \"\u003cnil\u003e\"\n\t}\n\treturn string(b.buf[b.off:])\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        }
      ],
      "name": "Decode",
      "signature": "(dec float64Decoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec float64Decoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tvar val float64\n\tswitch next := iter.WhatIsNext(); next {\n\tcase jsoniter.NumberValue:\n\t\tval = iter.ReadFloat64()\n\tcase jsoniter.StringValue:\n\t\tswitch str := iter.ReadString(); str {\n\t\tcase \"NaN\":\n\t\t\tval = math.NaN()\n\t\tcase \"Infinity\":\n\t\t\tval = math.Inf(1)\n\t\tcase \"-Infinity\":\n\t\t\tval = math.Inf(-1)\n\t\tdefault:\n\t\t\titer.ReportError(\"decode float64\", \"invalid value \"+str)\n\t\t}\n\tdefault:\n\t\titer.ReportError(\"decode float64\", fmt.Sprintf(\"unexpected value type: %d\", next))\n\t}\n\n\tif iter.Error == nil || iter.Error == io.EOF {\n\t\t// nolint: gas\n\t\tdec.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 113,
      "end_line": 137,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Decoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "NumberValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_float.go",
          "code_snippet": "func (iter *Iterator) ReadFloat64() (ret float64) {\n\tc := iter.nextToken()\n\tif c == '-' {\n\t\treturn -iter.readPositiveFloat64()\n\t}\n\titer.unreadByte()\n\treturn iter.readPositiveFloat64()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "StringValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_str.go",
          "code_snippet": "func (iter *Iterator) ReadString() (ret string) {\n\tc := iter.nextToken()\n\tif c == '\"' {\n\t\tfor i := iter.head; i \u003c iter.tail; i++ {\n\t\t\tc := iter.buf[i]\n\t\t\tif c == '\"' {\n\t\t\t\tret = string(iter.buf[iter.head:i])\n\t\t\t\titer.head = i + 1\n\t\t\t\treturn ret\n\t\t\t} else if c == '\\\\' {\n\t\t\t\tbreak\n\t\t\t} else if c \u003c ' ' {\n\t\t\t\titer.ReportError(\"ReadString\",\n\t\t\t\t\tfmt.Sprintf(`invalid control character found: %d`, c))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\treturn iter.readStringSlowPath()\n\t} else if c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn \"\"\n\t}\n\titer.ReportError(\"ReadString\", `expects \" or n, but found `+string([]byte{c}))\n\treturn\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/math/bits.go",
          "code_snippet": "func NaN() float64 { return Float64frombits(uvnan) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/math/bits.go",
          "code_snippet": "func Inf(sign int) float64 {\n\tvar v uint64\n\tif sign \u003e= 0 {\n\t\tv = uvinf\n\t} else {\n\t\tv = uvneginf\n\t}\n\treturn Float64frombits(v)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        129,
        130,
        133,
        134,
        135,
        136
      ],
      "cover_details": {
        "line_cover_rate": 0.84
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:pkgName",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBool"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString_ValueScanner"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes_ValueScanner"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestInt_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestFloat_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString_DefaultFunc"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestSlices"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestFloat"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestTime"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestString"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Enums"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_UUID"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Other"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestRType_Implements"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestInt"
        }
      ],
      "name": "pkgName",
      "signature": "pkgName (ident string) string",
      "ground_truth": "func pkgName(ident string) string {\n\ti := strings.LastIndexByte(ident, '.')\n\tif i == -1 {\n\t\treturn \"\"\n\t}\n\ts := ident[:i]\n\tif i := strings.LastIndexAny(s, \"]*\"); i != -1 {\n\t\ts = s[i+1:]\n\t}\n\treturn s\n}",
      "function_comment": "// pkgName returns the package name from a Go\n// identifier with a package qualifier.",
      "function_statement": "// pkgName returns the package name from a Go\n// identifier with a package qualifier.",
      "start_line": 1503,
      "end_line": 1513,
      "file_path": "./schema/field/field.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func LastIndexByte(s string, c byte) int {\n\treturn bytealg.LastIndexByteString(s, c)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func LastIndexAny(s, chars string) int {\n\tif chars == \"\" {\n\t\t// Avoid scanning all of s.\n\t\treturn -1\n\t}\n\tif len(s) == 1 {\n\t\trc := rune(s[0])\n\t\tif rc \u003e= utf8.RuneSelf {\n\t\t\trc = utf8.RuneError\n\t\t}\n\t\tif IndexRune(chars, rc) \u003e= 0 {\n\t\t\treturn 0\n\t\t}\n\t\treturn -1\n\t}\n\tif len(s) \u003e 8 {\n\t\tif as, isASCII := makeASCIISet(chars); isASCII {\n\t\t\tfor i := len(s) - 1; i \u003e= 0; i-- {\n\t\t\t\tif as.contains(s[i]) {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1\n\t\t}\n\t}\n\tif len(chars) == 1 {\n\t\trc := rune(chars[0])\n\t\tif rc \u003e= utf8.RuneSelf {\n\t\t\trc = utf8.RuneError\n\t\t}\n\t\tfor i := len(s); i \u003e 0; {\n\t\t\tr, size := utf8.DecodeLastRuneInString(s[:i])\n\t\t\ti -= size\n\t\t\tif rc == r {\n\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t\treturn -1\n\t}\n\tfor i := len(s); i \u003e 0; {\n\t\tr, size := utf8.DecodeLastRuneInString(s[:i])\n\t\ti -= size\n\t\tif IndexRune(chars, r) \u003e= 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1503,
        1504,
        1505,
        1506,
        1507,
        1508,
        1509,
        1510,
        1511,
        1512
      ],
      "cover_details": {
        "line_cover_rate": 0.9090909090909091
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        }
      ],
      "name": "Encode",
      "signature": "(enc float64Encoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc float64Encoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tf := enc.UnsafeIndirect(ptr).(float64)\n\tswitch {\n\tcase math.IsNaN(f):\n\t\tstream.WriteString(\"NaN\")\n\tcase math.IsInf(f, 1):\n\t\tstream.WriteString(\"Infinity\")\n\tcase math.IsInf(f, -1):\n\t\tstream.WriteString(\"-Infinity\")\n\tdefault:\n\t\tstream.WriteFloat64(f)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 89,
      "end_line": 101,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Encoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/math/bits.go",
          "code_snippet": "func IsNaN(f float64) (is bool) {\n\t// IEEE 754 says that only NaNs satisfy f != f.\n\t// To avoid the floating-point hardware, could use:\n\t//\tx := Float64bits(f);\n\t//\treturn uint32(x\u003e\u003eshift)\u0026mask == mask \u0026\u0026 x != uvinf \u0026\u0026 x != uvneginf\n\treturn f != f\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_str.go",
          "code_snippet": "func (stream *Stream) WriteString(s string) {\n\tvalLen := len(s)\n\tstream.buf = append(stream.buf, '\"')\n\t// write string, the fast path, without utf8 and escape support\n\ti := 0\n\tfor ; i \u003c valLen; i++ {\n\t\tc := s[i]\n\t\tif c \u003e 31 \u0026\u0026 c != '\"' \u0026\u0026 c != '\\\\' {\n\t\t\tstream.buf = append(stream.buf, c)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tif i == valLen {\n\t\tstream.buf = append(stream.buf, '\"')\n\t\treturn\n\t}\n\twriteStringSlowPath(stream, i, s, valLen)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/math/bits.go",
          "code_snippet": "func IsInf(f float64, sign int) bool {\n\t// Test for infinity by comparing against maximum float.\n\t// To avoid the floating-point hardware, could use:\n\t//\tx := Float64bits(f);\n\t//\treturn sign \u003e= 0 \u0026\u0026 x == uvinf || sign \u003c= 0 \u0026\u0026 x == uvneginf;\n\treturn sign \u003e= 0 \u0026\u0026 f \u003e MaxFloat64 || sign \u003c= 0 \u0026\u0026 f \u003c -MaxFloat64\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_float.go",
          "code_snippet": "func (stream *Stream) WriteFloat64(val float64) {\n\tif math.IsInf(val, 0) || math.IsNaN(val) {\n\t\tstream.Error = fmt.Errorf(\"unsupported value: %f\", val)\n\t\treturn\n\t}\n\tabs := math.Abs(val)\n\tfmt := byte('f')\n\t// Note: Must use float32 comparisons for underlying float32 value to get precise cutoffs right.\n\tif abs != 0 {\n\t\tif abs \u003c 1e-6 || abs \u003e= 1e21 {\n\t\t\tfmt = 'e'\n\t\t}\n\t}\n\tstream.buf = strconv.AppendFloat(stream.buf, float64(val), fmt, -1, 64)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqljson/sqljson.go:value",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestAppend"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqljson",
          "rel_file_path": "dialect/sql/sqljson/sqljson_test.go",
          "func_name": "TestWritePath"
        }
      ],
      "name": "value",
      "signature": "(p *PathOptions) value (b *sql.Builder)",
      "ground_truth": "func (p *PathOptions) value(b *sql.Builder) {\n\tswitch {\n\tcase len(p.Path) == 0:\n\t\tb.Ident(p.Ident)\n\tcase b.Dialect() == dialect.Postgres:\n\t\tif p.Cast != \"\" {\n\t\t\tb.WriteByte('(')\n\t\t\tdefer b.WriteString(\")::\" + p.Cast)\n\t\t}\n\t\tp.pgTextPath(b)\n\tdefault:\n\t\tif p.Unquote \u0026\u0026 b.Dialect() == dialect.MySQL {\n\t\t\tb.WriteString(\"JSON_UNQUOTE(\")\n\t\t\tdefer b.WriteByte(')')\n\t\t}\n\t\tp.mysqlFunc(\"JSON_EXTRACT\", b)\n\t}\n}",
      "function_comment": "// value writes the path for getting the JSON value.",
      "function_statement": "// value writes the path for getting the JSON value.",
      "start_line": 513,
      "end_line": 530,
      "file_path": "./dialect/sql/sqljson/sqljson.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "PathOptions struct {\n\tIdent   string\n\tPath    []string\n\tCast    string\n\tUnquote bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "Postgres = \"postgres\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteByte(c byte) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteByte(c)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) *Builder {\n\tif b.sb == nil {\n\t\tb.sb = \u0026strings.Builder{}\n\t}\n\tb.sb.WriteString(s)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) pgTextPath(b *sql.Builder) {\n\tb.Ident(p.Ident)\n\tfor i, s := range p.Path {\n\t\tb.WriteString(\"-\u003e\")\n\t\tif p.Unquote \u0026\u0026 i == len(p.Path)-1 {\n\t\t\tb.WriteString(\"\u003e\")\n\t\t}\n\t\tif idx, ok := isJSONIdx(s); ok {\n\t\t\tb.WriteString(idx)\n\t\t} else {\n\t\t\tb.WriteString(\"'\" + s + \"'\")\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/dialect.go",
          "code_snippet": "MySQL    = \"mysql\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqljson/sqljson.go",
          "code_snippet": "func (p *PathOptions) mysqlFunc(fn string, b *sql.Builder) {\n\tb.WriteString(fn).WriteByte('(')\n\tb.Ident(p.Ident).Comma()\n\tp.mysqlPath(b)\n\tb.WriteByte(')')\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        513,
        514,
        515,
        516,
        517,
        518,
        519,
        520,
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        528
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/entql.go:AddE",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/entql_test.go",
          "func_name": "TestGraph_AddE"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/entql_test.go",
          "func_name": "TestGraph_EvalP"
        }
      ],
      "name": "AddE",
      "signature": "(g *Schema) AddE (name string, spec *EdgeSpec, from, to string) error",
      "ground_truth": "func (g *Schema) AddE(name string, spec *EdgeSpec, from, to string) error {\n\tvar fromT, toT *Node\n\tfor i := range g.Nodes {\n\t\tt := g.Nodes[i].Type\n\t\tif t == from {\n\t\t\tfromT = g.Nodes[i]\n\t\t}\n\t\tif t == to {\n\t\t\ttoT = g.Nodes[i]\n\t\t}\n\t}\n\tif fromT == nil || toT == nil {\n\t\treturn fmt.Errorf(\"from/to type was not found\")\n\t}\n\tif fromT.Edges == nil {\n\t\tfromT.Edges = make(map[string]struct {\n\t\t\tTo   *Node\n\t\t\tSpec *EdgeSpec\n\t\t})\n\t}\n\tfromT.Edges[name] = struct {\n\t\tTo   *Node\n\t\tSpec *EdgeSpec\n\t}{\n\t\tTo:   toT,\n\t\tSpec: spec,\n\t}\n\treturn nil\n}",
      "function_comment": "// AddE adds an edge to the graph. It fails, if one of the node\n// types is missing.\n//\n//\tg.AddE(\"pets\", spec, \"user\", \"pet\")\n//\tg.AddE(\"friends\", spec, \"user\", \"user\")",
      "function_statement": "// AddE adds an edge to the graph. It fails, if one of the node\n// types is missing.\n//\n//\tg.AddE(\"pets\", spec, \"user\", \"pet\")\n//\tg.AddE(\"friends\", spec, \"user\", \"user\")",
      "start_line": 49,
      "end_line": 77,
      "file_path": "./dialect/sql/sqlgraph/entql.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "Schema struct {\n\t\tNodes []*Node\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "EdgeSpec struct {\n\t\tRel     Rel\n\t\tInverse bool\n\t\tTable   string\n\t\tSchema  string\n\t\tColumns []string\n\t\tBidi    bool        // bidirectional edge.\n\t\tTarget  *EdgeTarget // target nodes.\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/entql.go",
          "code_snippet": "Node struct {\n\t\tNodeSpec\n\n\t\t// Type holds the node type (schema name).\n\t\tType string\n\n\t\t// Fields maps from field names to their spec.\n\t\tFields map[string]*FieldSpec\n\n\t\t// Edges maps from edge names to their spec.\n\t\tEdges map[string]struct {\n\t\t\tTo   *Node\n\t\t\tSpec *EdgeSpec\n\t\t}\n\t}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76
      ],
      "cover_details": {
        "line_cover_rate": 0.9310344827586207
      }
    },
    {
      "id": "entgo.io/ent/entc/load/load.go:loadError",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/load_test.go",
          "func_name": "TestLoadCycleError"
        }
      ],
      "name": "loadError",
      "signature": "(c *Config) loadError (perr packages.Error) (err error)",
      "ground_truth": "func (c *Config) loadError(perr packages.Error) (err error) {\n\tif strings.Contains(perr.Msg, \"import cycle not allowed\") {\n\t\tif cause := c.cycleCause(); cause != \"\" {\n\t\t\tperr.Msg += \"\\n\" + cause\n\t\t}\n\t}\n\terr = perr\n\tif perr.Pos == \"\" {\n\t\t// Strip \"-:\" prefix in case of empty position.\n\t\terr = errors.New(perr.Msg)\n\t}\n\treturn err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 168,
      "end_line": 180,
      "file_path": "./entc/load/load.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/load.go",
          "code_snippet": "Config struct {\n\t\t// Path is the path for the schema package.\n\t\tPath string\n\t\t// Names are the schema names to load. Empty means all schemas in the directory.\n\t\tNames []string\n\t\t// BuildFlags are forwarded to the package.Config when\n\t\t// loading the schema package.\n\t\tBuildFlags []string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/load.go",
          "code_snippet": "func (c *Config) cycleCause() (cause string) {\n\tdir, err := parser.ParseDir(token.NewFileSet(), c.Path, nil, 0)\n\t// Ignore reporting in case of parsing\n\t// error, or there no packages to parse.\n\tif err != nil || len(dir) == 0 {\n\t\treturn\n\t}\n\t// Find the package that contains the schema, or\n\t// extract the first package if there is only one.\n\tpkg := dir[filepath.Base(c.Path)]\n\tif pkg == nil {\n\t\tfor _, v := range dir {\n\t\t\tpkg = v\n\t\t\tbreak\n\t\t}\n\t}\n\t// Package local declarations used by schema fields.\n\tlocals := make(map[string]bool)\n\tfor _, f := range pkg.Files {\n\t\tfor _, d := range f.Decls {\n\t\t\tg, ok := d.(*ast.GenDecl)\n\t\t\tif !ok || g.Tok != token.TYPE {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, s := range g.Specs {\n\t\t\t\tts, ok := s.(*ast.TypeSpec)\n\t\t\t\tif !ok || !ts.Name.IsExported() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t// Non-struct types such as \"type Role int\".\n\t\t\t\tst, ok := ts.Type.(*ast.StructType)\n\t\t\t\tif !ok {\n\t\t\t\t\tlocals[ts.Name.Name] = true\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tvar embedSchema bool\n\t\t\t\tastutil.Apply(st.Fields, func(c *astutil.Cursor) bool {\n\t\t\t\t\tf, ok := c.Node().(*ast.Field)\n\t\t\t\t\tif ok {\n\t\t\t\t\t\tswitch x := f.Type.(type) {\n\t\t\t\t\t\tcase *ast.SelectorExpr:\n\t\t\t\t\t\t\tif x.Sel.Name == \"Schema\" || x.Sel.Name == \"Mixin\" {\n\t\t\t\t\t\t\t\tembedSchema = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase *ast.Ident:\n\t\t\t\t\t\t\t// A common pattern is to create local base schema to be embedded by other schemas.\n\t\t\t\t\t\t\tif name := strings.ToLower(x.Name); name == \"schema\" || name == \"mixin\" {\n\t\t\t\t\t\t\t\tembedSchema = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Stop traversing the AST in case an ~ent.Schema is embedded.\n\t\t\t\t\treturn !embedSchema\n\t\t\t\t}, nil)\n\t\t\t\tif !embedSchema {\n\t\t\t\t\tlocals[ts.Name.Name] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// No local declarations to report.\n\tif len(locals) == 0 {\n\t\treturn\n\t}\n\t// Usage of local declarations by schema fields.\n\tgoTypes := make(map[string]bool)\n\tfor _, f := range pkg.Files {\n\t\tfor _, d := range f.Decls {\n\t\t\tf, ok := d.(*ast.FuncDecl)\n\t\t\tif !ok || f.Name.Name != \"Fields\" || f.Type.Params.NumFields() != 0 || f.Type.Results.NumFields() != 1 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tastutil.Apply(f.Body, func(cursor *astutil.Cursor) bool {\n\t\t\t\ti, ok := cursor.Node().(*ast.Ident)\n\t\t\t\tif ok \u0026\u0026 locals[i.Name] {\n\t\t\t\t\tgoTypes[i.Name] = true\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}, nil)\n\t\t}\n\t}\n\tnames := make([]string, 0, len(goTypes))\n\tfor k := range goTypes {\n\t\tnames = append(names, strconv.Quote(k))\n\t}\n\tsort.Strings(names)\n\tif len(names) \u003e 0 {\n\t\tcause = fmt.Sprintf(\"To resolve this issue, move the custom types used by the generated code to a separate package: %s\", strings.Join(names, \", \"))\n\t}\n\treturn\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/x/tools@v0.30.0/go/packages/packages.go",
          "code_snippet": "Error struct {\n\tPos  string // \"file:line:col\" or \"file:line\" or \"\" or \"-\"\n\tMsg  string\n\tKind ErrorKind\n}",
          "ref_module": "packages"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/strings/strings.go",
          "code_snippet": "func Contains(s, substr string) bool {\n\treturn Index(s, substr) \u003e= 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        168,
        169,
        170,
        171,
        172,
        174,
        175,
        176,
        177,
        178,
        179
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:CreateEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "CreateEncoder",
      "signature": "(ext encodeExtension) CreateEncoder (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) CreateEncoder(typ reflect2.Type) jsoniter.ValEncoder {\n\tif enc := ext.EncoderOfRegistered(typ); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.EncoderOfNative(typ); enc != nil {\n\t\treturn enc\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Map:\n\t\treturn ext.EncoderOfMap(typ)\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// CreateEncoder returns a value encoder for type.",
      "function_statement": "// CreateEncoder returns a value encoder for type.",
      "start_line": 57,
      "end_line": 70,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (encodeExtension) EncoderOfRegistered(typ reflect2.Type) jsoniter.ValEncoder {\n\tenc := typeEncoders[typ.String()]\n\tif enc != nil {\n\t\treturn registeredEncoder{enc}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tenc := typeEncoders[ptrType.Elem().String()]\n\t\tif enc != nil {\n\t\t\treturn registeredEncoder{\n\t\t\t\tValEncoder: \u0026jsoniter.OptionalEncoder{\n\t\t\t\t\tValueEncoder: enc,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (encodeExtension) EncoderOfNative(typ reflect2.Type) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Encoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (ext encodeExtension) EncoderOfMap(typ reflect2.Type) jsoniter.ValEncoder {\n\tmapType := typ.(reflect2.MapType)\n\treturn \u0026mapEncoder{\n\t\tmapType: mapType,\n\t\tkeyEnc:  ext.LazyEncoderOf(mapType.Key()),\n\t\telemEnc: ext.LazyEncoderOf(mapType.Elem()),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/schema/field/field.go:Default",
      "testcases": [
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBool"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestBytes"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestSlices"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestTime"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Enums"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_UUID"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestField_Other"
        },
        {
          "package": "entgo.io/ent/schema/field",
          "rel_file_path": "schema/field/field_test.go",
          "func_name": "TestJSON"
        }
      ],
      "name": "Default",
      "signature": "(b *jsonBuilder) Default (v any) *jsonBuilder",
      "ground_truth": "func (b *jsonBuilder) Default(v any) *jsonBuilder {\n\tb.desc.Default = v\n\tswitch fieldT, defaultT := b.desc.Info.RType.rtype, reflect.TypeOf(v); {\n\tcase fieldT == defaultT:\n\tcase defaultT.Kind() == reflect.Func:\n\t\tb.desc.checkDefaultFunc(b.desc.Info.RType.rtype)\n\tdefault:\n\t\tb.desc.Err = fmt.Errorf(\"expect type (func() %[1]s) or (%[1]s) for other default value\", b.desc.Info)\n\t}\n\treturn b\n}",
      "function_comment": "// Default sets the default value of the field. For example:\n//\n//\tfield.JSON(\"dirs\", []http.Dir{}).\n//\t\t// A static default value.\n//\t\tDefault([]http.Dir{\"/tmp\"})\n//\n//\tfield.JSON(\"dirs\", []http.Dir{}).\n//\t\t// A function for generating the default value.\n//\t\tDefault(DefaultDirs)",
      "function_statement": "// Default sets the default value of the field. For example:\n//\n//\tfield.JSON(\"dirs\", []http.Dir{}).\n//\t\t// A static default value.\n//\t\tDefault([]http.Dir{\"/tmp\"})\n//\n//\tfield.JSON(\"dirs\", []http.Dir{}).\n//\t\t// A function for generating the default value.\n//\t\tDefault(DefaultDirs)",
      "start_line": 880,
      "end_line": 890,
      "file_path": "./schema/field/field.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "jsonBuilder struct {\n\tdesc *Descriptor\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "Descriptor struct {\n\tTag              string                  // struct tag.\n\tSize             int                     // varchar size.\n\tName             string                  // field name.\n\tInfo             *TypeInfo               // field type info.\n\tValueScanner     any                     // custom field codec.\n\tUnique           bool                    // unique index of field.\n\tNillable         bool                    // nillable struct field.\n\tOptional         bool                    // nullable field in database.\n\tImmutable        bool                    // create only field.\n\tDefault          any                     // default value on create.\n\tUpdateDefault    any                     // default value on update.\n\tValidators       []any                   // validator functions.\n\tStorageKey       string                  // sql column or gremlin property.\n\tEnums            []struct{ N, V string } // enum values.\n\tSensitive        bool                    // sensitive info string field.\n\tSchemaType       map[string]string       // override the schema type.\n\tAnnotations      []schema.Annotation     // field annotations.\n\tComment          string                  // field comment.\n\tDeprecated       bool                    // mark the field as deprecated.\n\tDeprecatedReason string                  // deprecation reason.\n\tErr              error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "RType struct {\n\tName    string // reflect.Type.Name\n\tIdent   string // reflect.Type.String\n\tKind    reflect.Kind\n\tPkgPath string\n\tMethods map[string]struct{ In, Out []*RType }\n\t// Used only for in-package checks.\n\trtype reflect.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInfo struct {\n\tType     Type\n\tIdent    string\n\tPkgPath  string // import path.\n\tPkgName  string // local package name.\n\tNillable bool   // slices or pointers.\n\tRType    *RType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "func (d *Descriptor) checkDefaultFunc(expectType reflect.Type) {\n\tfor _, typ := range []reflect.Type{reflect.TypeOf(d.Default), reflect.TypeOf(d.UpdateDefault)} {\n\t\tif typ == nil || typ.Kind() != reflect.Func || d.Err != nil {\n\t\t\tcontinue\n\t\t}\n\t\terr := fmt.Errorf(\"expect type (func() %s) for default value\", d.Info)\n\t\tif typ.NumIn() != 0 || typ.NumOut() != 1 {\n\t\t\td.Err = err\n\t\t}\n\t\trtype := expectType\n\t\tif d.Info.RType != nil {\n\t\t\trtype = d.Info.RType.rtype\n\t\t}\n\t\tif !typ.Out(0).AssignableTo(rtype) {\n\t\t\td.Err = err\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Func",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        880,
        881,
        882,
        883,
        884,
        885,
        886,
        887,
        889
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/request.go:NewAuthRequest",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestAuthenticateRequestEncode"
        }
      ],
      "name": "NewAuthRequest",
      "signature": "NewAuthRequest (requestID, username, password string) *Request",
      "ground_truth": "func NewAuthRequest(requestID, username, password string) *Request {\n\treturn \u0026Request{\n\t\tRequestID: requestID,\n\t\tOperation: OpsAuthentication,\n\t\tArguments: map[string]any{\n\t\t\tArgsSasl: Credentials{\n\t\t\t\tUsername: username,\n\t\t\t\tPassword: password,\n\t\t\t},\n\t\t\tArgsSaslMechanism: \"PLAIN\",\n\t\t},\n\t}\n}",
      "function_comment": "// NewAuthRequest returns a new auth request.",
      "function_statement": "// NewAuthRequest returns a new auth request.",
      "start_line": 49,
      "end_line": 61,
      "file_path": "./dialect/gremlin/request.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "OpsAuthentication = \"authentication\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsSasl = \"sasl\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Credentials struct{ Username, Password string }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsSaslMechanism = \"saslMechanism\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:DecoratorOfMarshaler",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "DecoratorOfMarshaler",
      "signature": "(ext encodeExtension) DecoratorOfMarshaler (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecoratorOfMarshaler(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ == marshalerType {\n\t\tenc := marshalerEncoder{enc, typ}\n\t\treturn directMarshalerEncoder{enc}\n\t}\n\tif typ.Implements(marshalerType) {\n\t\treturn marshalerEncoder{enc, typ}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(marshalerType) {\n\t\tptrEnc := ext.LazyEncoderOf(ptrType)\n\t\tenc := marshalerEncoder{ptrEnc, ptrType}\n\t\treturn referenceEncoder{enc}\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoratorOfMarshaler decorates a value encoder of a Marshaler interface.",
      "function_statement": "// DecoratorOfMarshaler decorates a value encoder of a Marshaler interface.",
      "start_line": 17,
      "end_line": 32,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerType   = reflect2.TypeOfPtr((*Marshaler)(nil)).Elem()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "directMarshalerEncoder struct {\n\tmarshalerEncoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (encodeExtension) LazyEncoderOf(typ reflect2.Type) jsoniter.ValEncoder {\n\treturn \u0026lazyEncoder{resolve: func() jsoniter.ValEncoder {\n\t\treturn config.EncoderOf(typ)\n\t}}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "referenceEncoder struct {\n\tjsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31
      ],
      "cover_details": {
        "line_cover_rate": 0.9375
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:CreateDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "CreateDecoder",
      "signature": "(ext decodeExtension) CreateDecoder (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) CreateDecoder(typ reflect2.Type) jsoniter.ValDecoder {\n\tif dec := ext.DecoderOfRegistered(typ); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoderOfUnmarshaler(typ); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoderOfNative(typ); dec != nil {\n\t\treturn dec\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Array:\n\t\treturn ext.DecoderOfArray(typ)\n\tcase reflect.Slice:\n\t\treturn ext.DecoderOfSlice(typ)\n\tcase reflect.Map:\n\t\treturn ext.DecoderOfMap(typ)\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// CreateDecoder returns a value decoder for type.",
      "function_statement": "// CreateDecoder returns a value decoder for type.",
      "start_line": 59,
      "end_line": 79,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (decodeExtension) DecoderOfRegistered(typ reflect2.Type) jsoniter.ValDecoder {\n\tdec := typeDecoders[typ.String()]\n\tif dec != nil {\n\t\treturn registeredDecoder{dec}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tdec := typeDecoders[ptrType.Elem().String()]\n\t\tif dec != nil {\n\t\t\treturn registeredDecoder{\n\t\t\t\tValDecoder: \u0026jsoniter.OptionalDecoder{\n\t\t\t\t\tValueType:    ptrType.Elem(),\n\t\t\t\t\tValueDecoder: dec,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (decodeExtension) DecoderOfUnmarshaler(typ reflect2.Type) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(unmarshalerType) {\n\t\treturn referenceDecoder{\n\t\t\tunmarshalerDecoder{ptrType},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (decodeExtension) DecoderOfNative(typ reflect2.Type) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Decoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfArray(typ reflect2.Type) jsoniter.ValDecoder {\n\tarrayType := typ.(reflect2.ArrayType)\n\treturn arrayDecoder{\n\t\tarrayType: arrayType,\n\t\telemDec:   ext.LazyDecoderOf(arrayType.Elem()),\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfSlice(typ reflect2.Type) jsoniter.ValDecoder {\n\tsliceType := typ.(reflect2.SliceType)\n\telemType := sliceType.Elem()\n\tif elemType.Kind() == reflect.Uint8 {\n\t\treturn nil\n\t}\n\treturn sliceDecoder{\n\t\tsliceType: sliceType,\n\t\telemDec:   ext.LazyDecoderOf(elemType),\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfMap(typ reflect2.Type) jsoniter.ValDecoder {\n\tmapType := typ.(reflect2.MapType)\n\tkeyType, elemType := mapType.Key(), mapType.Elem()\n\treturn \u0026mapDecoder{\n\t\tmapType:  mapType,\n\t\tkeyType:  keyType,\n\t\telemType: elemType,\n\t\tkeyDec:   ext.LazyDecoderOf(keyType),\n\t\telemDec:  ext.LazyDecoderOf(elemType),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77
      ],
      "cover_details": {
        "line_cover_rate": 0.9047619047619048
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/graph.go:fkColumn",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestAbortDuplicateFK"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestPosition"
        }
      ],
      "name": "fkColumn",
      "signature": "fkColumn (e *Edge, owner *schema.Table, refPK *schema.Column) *schema.Column",
      "ground_truth": "func fkColumn(e *Edge, owner *schema.Table, refPK *schema.Column) *schema.Column {\n\t// If the foreign-key also functions as a primary key, it cannot be nullable.\n\tispk := len(owner.PrimaryKey) == 1 \u0026\u0026 owner.PrimaryKey[0].Name == e.Rel.Column()\n\tcolumn := \u0026schema.Column{Name: e.Rel.Column(), Size: refPK.Size, Type: refPK.Type, SchemaType: refPK.SchemaType, Nullable: !ispk}\n\t// O2O relations are enforced using a unique index.\n\tcolumn.Unique = e.Rel.Type == O2O\n\t// Foreign key was defined as an edge field.\n\tif e.Rel.fk != nil \u0026\u0026 e.Rel.fk.Field != nil {\n\t\tfc := e.Rel.fk.Field.Column()\n\t\tcolumn.Comment, column.Default = fc.Comment, fc.Default\n\t}\n\treturn column\n}",
      "function_comment": "// fkColumn returns the foreign key column for the given edge.",
      "function_statement": "// fkColumn returns the foreign key column for the given edge.",
      "start_line": 824,
      "end_line": 836,
      "file_path": "./entc/gen/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (r Relation) Column() string {\n\tif len(r.Columns) == 0 {\n\t\tpanic(fmt.Sprintf(\"missing column for Relation.Table: %s\", r.Table))\n\t}\n\treturn r.Columns[0]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "O2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "Relation struct {\n\t\t// Type holds the relation type of the edge.\n\t\tType Rel\n\t\t// Table holds the relation table for this edge.\n\t\t// For O2O and O2M, it's the table name of the type we're this edge point to.\n\t\t// For M2O, this is the owner's type, and for M2M this is the join table.\n\t\tTable string\n\t\t// Columns holds the relation column(s) in the relation table above.\n\t\t// For O2M, M2O and O2O, it contains one element with the column name.\n\t\t// For M2M edges, it contains two columns defined in the join table with\n\t\t// the same order as defined in the schema: (owner_id, reference_id).\n\t\tColumns []string\n\t\t// foreign-key information for non-M2M edges.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "ForeignKey struct {\n\t\t// Field information for the foreign-key column.\n\t\tField *Field\n\t\t// Edge that is associated with this foreign-key.\n\t\tEdge *Edge\n\t\t// UserDefined indicates that this foreign-key was defined explicitly as a field in the schema,\n\t\t// and was referenced by an edge. For example:\n\t\t//\n\t\t//\tfield.Int(\"owner_id\").\n\t\t//\t\tOptional()\n\t\t//\n\t\t//\tedge.From(\"owner\", User.Type).\n\t\t//\t\tRef(\"pets\").\n\t\t//\t\tField(\"owner_id\")\n\t\t//\n\t\tUserDefined bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (f Field) Column() *schema.Column {\n\tc := \u0026schema.Column{\n\t\tName:     f.StorageKey(),\n\t\tType:     f.Type.Type,\n\t\tUnique:   f.Unique,\n\t\tNullable: f.Optional,\n\t\tSize:     f.size(),\n\t\tEnums:    f.EnumValues(),\n\t\tComment:  f.sqlComment(),\n\t}\n\tswitch {\n\tcase f.Default \u0026\u0026 (f.Type.Numeric() || f.Type.Type == field.TypeBool):\n\t\tc.Default = f.DefaultValue()\n\tcase f.Default \u0026\u0026 (f.IsString() || f.IsEnum()):\n\t\tif s, ok := f.DefaultValue().(string); ok {\n\t\t\tc.Default = s\n\t\t}\n\t}\n\t// Override the default-value defined in the\n\t// schema if it was provided by an annotation.\n\tswitch ant := f.EntSQL(); {\n\tcase ant == nil:\n\tcase ant.Default != \"\":\n\t\tc.Default = ant.Default\n\tcase ant.DefaultExpr != \"\":\n\t\tc.Default = schema.Expr(ant.DefaultExpr)\n\tcase ant.DefaultExprs != nil:\n\t\tx := make(map[string]schema.Expr)\n\t\tfor k, v := range ant.DefaultExprs {\n\t\t\tx[k] = schema.Expr(v)\n\t\t}\n\t\tc.Default = x\n\t}\n\t// Override the collation defined in the\n\t// schema if it was provided by an annotation.\n\tif ant := f.EntSQL(); ant != nil \u0026\u0026 ant.Collation != \"\" {\n\t\tc.Collation = ant.Collation\n\t}\n\tif f.def != nil {\n\t\tc.SchemaType = f.def.SchemaType\n\t}\n\treturn c\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        824,
        825,
        826,
        827,
        828,
        829,
        830,
        831,
        832,
        833,
        834,
        835
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:OrderByNeighborsCount",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestOrderByNeighborsCount"
        }
      ],
      "name": "OrderByNeighborsCount",
      "signature": "OrderByNeighborsCount (q *sql.Selector, s *Step, opts ...sql.OrderTermOption)",
      "ground_truth": "func OrderByNeighborsCount(q *sql.Selector, s *Step, opts ...sql.OrderTermOption) {\n\tvar (\n\t\tjoin  *sql.Selector\n\t\topt   = sql.NewOrderTermOptions(opts...)\n\t\tbuild = sql.Dialect(q.Dialect())\n\t)\n\tswitch {\n\tcase s.FromEdgeOwner():\n\t\t// For M2O and O2O inverse, the FK resides in the same table.\n\t\t// Hence, the order by is on the nullability of the column.\n\t\tx := func(b *sql.Builder) {\n\t\t\tb.Ident(s.From.Column)\n\t\t\tif opt.Desc {\n\t\t\t\tb.WriteOp(sql.OpNotNull)\n\t\t\t} else {\n\t\t\t\tb.WriteOp(sql.OpIsNull)\n\t\t\t}\n\t\t}\n\t\tq.OrderExpr(build.Expr(x))\n\tcase s.ThroughEdgeTable():\n\t\tcountAs := countAlias(q, s, opt)\n\t\tterms := []sql.OrderTerm{\n\t\t\tsql.OrderByCount(\"*\", append([]sql.OrderTermOption{sql.OrderAs(countAs)}, opts...)...),\n\t\t}\n\t\tpk1 := s.Edge.Columns[0]\n\t\tif s.Edge.Inverse {\n\t\t\tpk1 = s.Edge.Columns[1]\n\t\t}\n\t\tjoinT := build.Table(s.Edge.Table).Schema(s.Edge.Schema)\n\t\tjoin = build.Select(\n\t\t\tjoinT.C(pk1),\n\t\t).From(joinT).GroupBy(joinT.C(pk1))\n\t\tselectTerms(join, terms)\n\t\tq.LeftJoin(join).\n\t\t\tOn(\n\t\t\t\tq.C(s.From.Column),\n\t\t\t\tjoin.C(pk1),\n\t\t\t)\n\t\torderTerms(q, join, terms)\n\tcase s.ToEdgeOwner():\n\t\tcountAs := countAlias(q, s, opt)\n\t\tterms := []sql.OrderTerm{\n\t\t\tsql.OrderByCount(\"*\", append([]sql.OrderTermOption{sql.OrderAs(countAs)}, opts...)...),\n\t\t}\n\t\tedgeT := build.Table(s.Edge.Table).Schema(s.Edge.Schema)\n\t\tjoin = build.Select(\n\t\t\tedgeT.C(s.Edge.Columns[0]),\n\t\t).From(edgeT).GroupBy(edgeT.C(s.Edge.Columns[0]))\n\t\tselectTerms(join, terms)\n\t\tq.LeftJoin(join).\n\t\t\tOn(\n\t\t\t\tq.C(s.From.Column),\n\t\t\t\tjoin.C(s.Edge.Columns[0]),\n\t\t\t)\n\t\torderTerms(q, join, terms)\n\t}\n}",
      "function_comment": "// OrderByNeighborsCount appends ordering based on the number of neighbors.\n// For example, order users by their number of posts.",
      "function_statement": "// OrderByNeighborsCount appends ordering based on the number of neighbors.\n// For example, order users by their number of posts.",
      "start_line": 380,
      "end_line": 436,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "Step struct {\n\t// From is the source of the step.\n\tFrom struct {\n\t\t// V can be either one vertex or set of vertices.\n\t\t// It can be a pre-processed step (sql.Query) or a simple Go type (integer or string).\n\t\tV any\n\t\t// Table holds the table name of V (from).\n\t\tTable string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n\t// Edge holds the edge information for getting the neighbors.\n\tEdge struct {\n\t\t// Rel of the edge.\n\t\tRel Rel\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Table name of where this edge columns reside.\n\t\tTable string\n\t\t// Columns of the edge.\n\t\t// In O2O and M2O, it holds the foreign-key column. Hence, len == 1.\n\t\t// In M2M, it holds the primary-key columns of the join table. Hence, len == 2.\n\t\tColumns []string\n\t\t// Inverse indicates if the edge is an inverse edge.\n\t\tInverse bool\n\t}\n\t// To is the dest of the path (the neighbors).\n\tTo struct {\n\t\t// Table holds the table name of the neighbors (to).\n\t\tTable string\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sql.go",
          "code_snippet": "OrderTermOption func(*OrderTermOptions)",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sql.go",
          "code_snippet": "func NewOrderTermOptions(opts ...OrderTermOption) *OrderTermOptions {\n\to := \u0026OrderTermOptions{}\n\tfor _, opt := range opts {\n\t\topt(o)\n\t}\n\treturn o\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Dialect(name string) *DialectBuilder {\n\treturn \u0026DialectBuilder{name}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) FromEdgeOwner() bool {\n\treturn s.Edge.Rel == M2O || (s.Edge.Rel == O2O \u0026\u0026 s.Edge.Inverse)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Builder struct {\n\tsb        *strings.Builder // underlying builder.\n\tdialect   string           // configured dialect.\n\targs      []any            // query parameters.\n\ttotal     int              // total number of parameters in query tree.\n\terrs      []error          // errors that added during the query construction.\n\tqualifier string           // qualifier to prefix identifiers (e.g. table name).\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) Ident(s string) *Builder {\n\tswitch {\n\tcase len(s) == 0:\n\tcase !strings.HasSuffix(s, \"*\") \u0026\u0026 !b.isIdent(s) \u0026\u0026 !isFunc(s) \u0026\u0026 !isModifier(s) \u0026\u0026 !isAlias(s):\n\t\tif b.qualifier != \"\" {\n\t\t\tb.WriteString(b.Quote(b.qualifier)).WriteByte('.')\n\t\t}\n\t\tb.WriteString(b.Quote(s))\n\tcase (isFunc(s) || isModifier(s) || isAlias(s)) \u0026\u0026 b.postgres():\n\t\t// Modifiers and aggregation functions that\n\t\t// were called without dialect information.\n\t\tb.WriteString(strings.ReplaceAll(s, \"`\", `\"`))\n\tdefault:\n\t\tb.WriteString(s)\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sql.go",
          "code_snippet": "OrderTermOptions struct {\n\t\tDesc       bool   // Whether to sort in descending order.\n\t\tAs         string // Optional alias.\n\t\tSelected   bool   // Whether the term should be selected.\n\t\tNullsFirst bool   // Whether to sort nulls first.\n\t\tNullsLast  bool   // Whether to sort nulls last.\n\t}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b *Builder) WriteOp(op Op) *Builder {\n\tswitch {\n\tcase op \u003e= OpEQ \u0026\u0026 op \u003c= OpLike || op \u003e= OpAdd \u0026\u0026 op \u003c= OpMod:\n\t\tb.Pad().WriteString(ops[op]).Pad()\n\tcase op == OpIsNull || op == OpNotNull:\n\t\tb.Pad().WriteString(ops[op])\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid op %d\", op))\n\t}\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpNotNull",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "OpIsNull",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) OrderExpr(exprs ...Querier) *Selector {\n\tfor i := range exprs {\n\t\ts.order = append(s.order, exprs[i])\n\t}\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Expr(f func(*Builder)) Querier {\n\treturn Expr(d.String(f))\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ThroughEdgeTable() bool {\n\treturn s.Edge.Rel == M2M\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func countAlias(q *sql.Selector, s *Step, opt *sql.OrderTermOptions) string {\n\tif opt.As != \"\" {\n\t\treturn opt.As\n\t}\n\tselected := make(map[string]struct{})\n\tfor _, c := range q.SelectedColumns() {\n\t\tselected[c] = struct{}{}\n\t}\n\tcolumn := fmt.Sprintf(\"count_%s\", s.To.Table)\n\t// If the column was already selected,\n\t// try to find a free alias.\n\tif _, ok := selected[column]; ok {\n\t\tfor i := 1; i \u003c= 5; i++ {\n\t\t\tci := fmt.Sprintf(\"%s_%d\", column, i)\n\t\t\tif _, ok := selected[ci]; !ok {\n\t\t\t\treturn ci\n\t\t\t}\n\t\t}\n\t}\n\treturn column\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sql.go",
          "code_snippet": "OrderTerm interface {\n\t\tterm()\n\t}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sql.go",
          "code_snippet": "func OrderByCount(field string, opts ...OrderTermOption) *OrderExprTerm {\n\treturn orderByAgg(\"COUNT\", field, opts...)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sql.go",
          "code_snippet": "func OrderAs(as string) OrderTermOption {\n\treturn func(o *OrderTermOptions) {\n\t\to.As = as\n\t}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) Schema(name string) *SelectTable {\n\ts.schema = name\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Table(name string) *SelectTable {\n\tb := Table(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) GroupBy(columns ...string) *Selector {\n\ts.group = append(s.group, columns...)\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) From(t TableView) *Selector {\n\ts.from = nil\n\treturn s.AppendFrom(t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Select(columns ...string) *Selector {\n\tb := Select(columns...)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) C(column string) string {\n\tname := s.name\n\tif s.as != \"\" {\n\t\tname = s.as\n\t}\n\tb := \u0026Builder{dialect: s.dialect}\n\tif s.as == \"\" {\n\t\tb.writeSchema(s.schema)\n\t}\n\tb.Ident(name).WriteByte('.').Ident(column)\n\treturn b.String()\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func selectTerms(q *sql.Selector, ts []sql.OrderTerm) {\n\tfor _, t := range ts {\n\t\tswitch t := t.(type) {\n\t\tcase *sql.OrderFieldTerm:\n\t\t\tif t.As != \"\" {\n\t\t\t\tq.AppendSelectAs(q.C(t.Field), t.As)\n\t\t\t} else {\n\t\t\t\tq.AppendSelect(q.C(t.Field))\n\t\t\t}\n\t\tcase *sql.OrderExprTerm:\n\t\t\tq.AppendSelectExprAs(t.Expr(q), t.As)\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) On(c1, c2 string) *Selector {\n\ts.OnP(P(func(builder *Builder) {\n\t\tbuilder.Ident(c1).WriteOp(OpEQ).Ident(c2)\n\t}))\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) LeftJoin(t TableView) *Selector {\n\treturn s.join(\"LEFT JOIN\", t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) C(column string) string {\n\t// Skip formatting qualified columns.\n\tif s.isQualified(column) {\n\t\treturn column\n\t}\n\tif s.as != \"\" {\n\t\tb := \u0026Builder{dialect: s.dialect}\n\t\tb.Ident(s.as)\n\t\tb.WriteByte('.')\n\t\tb.Ident(column)\n\t\treturn b.String()\n\t}\n\treturn s.Table().C(column)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func orderTerms(q, join *sql.Selector, ts []sql.OrderTerm) {\n\tfor _, t := range ts {\n\t\tt := t\n\t\tvar (\n\t\t\t// Order by column or expression.\n\t\t\torderC string\n\t\t\torderX func(*sql.Selector) sql.Querier\n\t\t\t// Order by options.\n\t\t\tdesc, nullsfirst, nullslast bool\n\t\t)\n\t\tswitch t := t.(type) {\n\t\tcase *sql.OrderFieldTerm:\n\t\t\tf := t.Field\n\t\t\tif t.As != \"\" {\n\t\t\t\tf = t.As\n\t\t\t}\n\t\t\torderC = join.C(f)\n\t\t\tif t.Selected {\n\t\t\t\tq.AppendSelect(orderC)\n\t\t\t}\n\t\t\tdesc = t.Desc\n\t\t\tnullsfirst = t.NullsFirst\n\t\t\tnullslast = t.NullsLast\n\t\tcase *sql.OrderExprTerm:\n\t\t\tif t.As != \"\" {\n\t\t\t\torderC = join.C(t.As)\n\t\t\t\tif t.Selected {\n\t\t\t\t\tq.AppendSelect(orderC)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\torderX = t.Expr\n\t\t\t}\n\t\t\tdesc = t.Desc\n\t\t\tnullsfirst = t.NullsFirst\n\t\t\tnullslast = t.NullsLast\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tq.OrderExprFunc(func(b *sql.Builder) {\n\t\t\t// Write the ORDER BY term.\n\t\t\tswitch {\n\t\t\tcase orderC != \"\":\n\t\t\t\tb.WriteString(orderC)\n\t\t\tcase orderX != nil:\n\t\t\t\tb.Join(orderX(join))\n\t\t\t}\n\t\t\t// Unlike MySQL and SQLite, NULL values sort as if larger than any other value. Therefore,\n\t\t\t// we need to explicitly order NULLs first on ASC and last on DESC unless specified otherwise.\n\t\t\tswitch normalizePG := b.Dialect() == dialect.Postgres \u0026\u0026 !nullsfirst \u0026\u0026 !nullslast; {\n\t\t\tcase normalizePG \u0026\u0026 desc:\n\t\t\t\tb.WriteString(\" DESC NULLS LAST\")\n\t\t\tcase normalizePG:\n\t\t\t\tb.WriteString(\" NULLS FIRST\")\n\t\t\tcase desc:\n\t\t\t\tb.WriteString(\" DESC\")\n\t\t\t}\n\t\t\tif nullsfirst {\n\t\t\t\tb.WriteString(\" NULLS FIRST\")\n\t\t\t} else if nullslast {\n\t\t\t\tb.WriteString(\" NULLS LAST\")\n\t\t\t}\n\t\t})\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ToEdgeOwner() bool {\n\treturn s.Edge.Rel == O2M || (s.Edge.Rel == O2O \u0026\u0026 !s.Edge.Inverse)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        398,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        408,
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        416,
        417,
        418,
        419,
        420,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434
      ],
      "cover_details": {
        "line_cover_rate": 0.9122807017543859
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/config.go:Build",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestNewClient"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestConfigBuild"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        }
      ],
      "name": "Build",
      "signature": "(cfg Config) Build (opt ...Option) (c *Client, err error)",
      "ground_truth": "func (cfg Config) Build(opt ...Option) (c *Client, err error) {\n\topts := cfg.buildOptions(opt)\n\tswitch cfg.Endpoint.Scheme {\n\tcase \"http\", \"https\":\n\t\tc, err = NewHTTPClient(cfg.Endpoint.String(), opts.httpClient)\n\tdefault:\n\t\terr = fmt.Errorf(\"unsupported endpoint scheme: %s\", cfg.Endpoint.Scheme)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i := len(opts.interceptors) - 1; i \u003e= 0; i-- {\n\t\tc.Transport = opts.interceptors[i](c.Transport)\n\t}\n\tif !cfg.DisableExpansion {\n\t\tc.Transport = ExpandBindings(c.Transport)\n\t}\n\treturn c, nil\n}",
      "function_comment": "// Build constructs a client from Config.",
      "function_statement": "// Build constructs a client from Config.",
      "start_line": 49,
      "end_line": 68,
      "file_path": "./dialect/gremlin/config.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/config.go",
          "code_snippet": "Config struct {\n\t\tEndpoint         Endpoint `env:\"ENDPOINT\" long:\"endpoint\" default:\"\" description:\"gremlin endpoint to connect to\"`\n\t\tDisableExpansion bool     `env:\"DISABLE_EXPANSION\" long:\"disable-expansion\" description:\"disable bindings expansion\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/config.go",
          "code_snippet": "Option func(*options)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "Client struct {\n\t// Transport specifies the mechanism by which individual\n\t// Gremlin requests are made.\n\tTransport RoundTripper\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/config.go",
          "code_snippet": "func (Config) buildOptions(opts []Option) options {\n\tvar o options\n\tfor _, opt := range opts {\n\t\topt(\u0026o)\n\t}\n\treturn o\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "func NewHTTPClient(url string, client *http.Client) (*Client, error) {\n\ttransport, err := NewHTTPTransport(url, client)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026Client{transport}, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/config.go",
          "code_snippet": "options struct {\n\t\tinterceptors []Interceptor\n\t\thttpClient   *http.Client\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/expand.go",
          "code_snippet": "func ExpandBindings(rt RoundTripper) RoundTripper {\n\treturn RoundTripperFunc(func(ctx context.Context, r *Request) (*Response, error) {\n\t\tbindings, ok := r.Arguments[ArgsBindings]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\tquery, ok := r.Arguments[ArgsGremlin]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\t{\n\t\t\tquery, bindings := query.(string), bindings.(map[string]any)\n\t\t\tkeys := make(sort.StringSlice, 0, len(bindings))\n\t\t\tfor k := range bindings {\n\t\t\t\tkeys = append(keys, k)\n\t\t\t}\n\t\t\tsort.Sort(sort.Reverse(keys))\n\t\t\tkv := make([]string, 0, len(bindings)*2)\n\t\t\tfor _, k := range keys {\n\t\t\t\ts, err := jsoniter.MarshalToString(bindings[k])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"marshal bindings value for key %s: %w\", k, err)\n\t\t\t\t}\n\t\t\t\tkv = append(kv, k, s)\n\t\t\t}\n\t\t\tdelete(r.Arguments, ArgsBindings)\n\t\t\tr.Arguments[ArgsGremlin] = strings.NewReplacer(kv...).Replace(query)\n\t\t}\n\t\treturn rt.RoundTrip(ctx, r)\n\t})\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/net/url/url.go",
          "code_snippet": "URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port (see Hostname and Port methods)\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tOmitHost    bool      // do not emit empty host (authority)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/net/url/url.go",
          "code_snippet": "func (u *URL) String() string {\n\tvar buf strings.Builder\n\n\tn := len(u.Scheme)\n\tif u.Opaque != \"\" {\n\t\tn += len(u.Opaque)\n\t} else {\n\t\tif !u.OmitHost \u0026\u0026 (u.Scheme != \"\" || u.Host != \"\" || u.User != nil) {\n\t\t\tusername := u.User.Username()\n\t\t\tpassword, _ := u.User.Password()\n\t\t\tn += len(username) + len(password) + len(u.Host)\n\t\t}\n\t\tn += len(u.Path)\n\t}\n\tn += len(u.RawQuery) + len(u.RawFragment)\n\tn += len(\":\" + \"//\" + \"//\" + \":\" + \"@\" + \"/\" + \"./\" + \"?\" + \"#\")\n\tbuf.Grow(n)\n\n\tif u.Scheme != \"\" {\n\t\tbuf.WriteString(u.Scheme)\n\t\tbuf.WriteByte(':')\n\t}\n\tif u.Opaque != \"\" {\n\t\tbuf.WriteString(u.Opaque)\n\t} else {\n\t\tif u.Scheme != \"\" || u.Host != \"\" || u.User != nil {\n\t\t\tif u.OmitHost \u0026\u0026 u.Host == \"\" \u0026\u0026 u.User == nil {\n\t\t\t\t// omit empty host\n\t\t\t} else {\n\t\t\t\tif u.Host != \"\" || u.Path != \"\" || u.User != nil {\n\t\t\t\t\tbuf.WriteString(\"//\")\n\t\t\t\t}\n\t\t\t\tif ui := u.User; ui != nil {\n\t\t\t\t\tbuf.WriteString(ui.String())\n\t\t\t\t\tbuf.WriteByte('@')\n\t\t\t\t}\n\t\t\t\tif h := u.Host; h != \"\" {\n\t\t\t\t\tbuf.WriteString(escape(h, encodeHost))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpath := u.EscapedPath()\n\t\tif path != \"\" \u0026\u0026 path[0] != '/' \u0026\u0026 u.Host != \"\" {\n\t\t\tbuf.WriteByte('/')\n\t\t}\n\t\tif buf.Len() == 0 {\n\t\t\t// RFC 3986 §4.2\n\t\t\t// A path segment that contains a colon character (e.g., \"this:that\")\n\t\t\t// cannot be used as the first segment of a relative-path reference, as\n\t\t\t// it would be mistaken for a scheme name. Such a segment must be\n\t\t\t// preceded by a dot-segment (e.g., \"./this:that\") to make a relative-\n\t\t\t// path reference.\n\t\t\tif segment, _, _ := strings.Cut(path, \"/\"); strings.Contains(segment, \":\") {\n\t\t\t\tbuf.WriteString(\"./\")\n\t\t\t}\n\t\t}\n\t\tbuf.WriteString(path)\n\t}\n\tif u.ForceQuery || u.RawQuery != \"\" {\n\t\tbuf.WriteByte('?')\n\t\tbuf.WriteString(u.RawQuery)\n\t}\n\tif u.Fragment != \"\" {\n\t\tbuf.WriteByte('#')\n\t\tbuf.WriteString(u.EscapedFragment())\n\t}\n\treturn buf.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67
      ],
      "cover_details": {
        "line_cover_rate": 0.85
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/sqlgraph/graph.go:HasNeighbors",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/graph_test.go",
          "func_name": "TestHasNeighbors"
        },
        {
          "package": "entgo.io/ent/dialect/sql/sqlgraph",
          "rel_file_path": "dialect/sql/sqlgraph/entql_test.go",
          "func_name": "TestGraph_EvalP"
        }
      ],
      "name": "HasNeighbors",
      "signature": "HasNeighbors (q *sql.Selector, s *Step)",
      "ground_truth": "func HasNeighbors(q *sql.Selector, s *Step) {\n\tbuilder := sql.Dialect(q.Dialect())\n\tswitch {\n\tcase s.ThroughEdgeTable():\n\t\tpk1 := s.Edge.Columns[0]\n\t\tif s.Edge.Inverse {\n\t\t\tpk1 = s.Edge.Columns[1]\n\t\t}\n\t\tjoin := builder.Table(s.Edge.Table).Schema(s.Edge.Schema)\n\t\tq.Where(\n\t\t\tsql.In(\n\t\t\t\tq.C(s.From.Column),\n\t\t\t\tbuilder.Select(join.C(pk1)).From(join),\n\t\t\t),\n\t\t)\n\tcase s.FromEdgeOwner():\n\t\tq.Where(sql.NotNull(q.C(s.Edge.Columns[0])))\n\tcase s.ToEdgeOwner():\n\t\tto := builder.Table(s.Edge.Table).Schema(s.Edge.Schema)\n\t\t// In case the edge reside on the same table, give\n\t\t// the edge an alias to make qualifier different.\n\t\tif s.From.Table == s.Edge.Table {\n\t\t\tto.As(fmt.Sprintf(\"%s_edge\", s.Edge.Table))\n\t\t}\n\t\tq.Where(\n\t\t\tsql.Exists(\n\t\t\t\tbuilder.Select(to.C(s.Edge.Columns[0])).\n\t\t\t\t\tFrom(to).\n\t\t\t\t\tWhere(\n\t\t\t\t\t\tsql.ColumnsEQ(\n\t\t\t\t\t\t\tq.C(s.From.Column),\n\t\t\t\t\t\t\tto.C(s.Edge.Columns[0]),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t),\n\t\t)\n\t}\n}",
      "function_comment": "// HasNeighbors applies on the given Selector a neighbors check.",
      "function_statement": "// HasNeighbors applies on the given Selector a neighbors check.",
      "start_line": 240,
      "end_line": 277,
      "file_path": "./dialect/sql/sqlgraph/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "Selector struct {\n\tBuilder\n\t// ctx stores contextual data typically from\n\t// generated code such as alternate table schemas.\n\tctx       context.Context\n\tas        string\n\tselection []selection\n\tfrom      []TableView\n\tjoins     []join\n\tcollected [][]*Predicate\n\twhere     *Predicate\n\tor        bool\n\tnot       bool\n\torder     []any\n\tgroup     []string\n\thaving    *Predicate\n\tlimit     *int\n\toffset    *int\n\tdistinct  bool\n\tsetOps    []setOp\n\tprefix    Queries\n\tlock      *LockOptions\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "Step struct {\n\t// From is the source of the step.\n\tFrom struct {\n\t\t// V can be either one vertex or set of vertices.\n\t\t// It can be a pre-processed step (sql.Query) or a simple Go type (integer or string).\n\t\tV any\n\t\t// Table holds the table name of V (from).\n\t\tTable string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n\t// Edge holds the edge information for getting the neighbors.\n\tEdge struct {\n\t\t// Rel of the edge.\n\t\tRel Rel\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Table name of where this edge columns reside.\n\t\tTable string\n\t\t// Columns of the edge.\n\t\t// In O2O and M2O, it holds the foreign-key column. Hence, len == 1.\n\t\t// In M2M, it holds the primary-key columns of the join table. Hence, len == 2.\n\t\tColumns []string\n\t\t// Inverse indicates if the edge is an inverse edge.\n\t\tInverse bool\n\t}\n\t// To is the dest of the path (the neighbors).\n\tTo struct {\n\t\t// Table holds the table name of the neighbors (to).\n\t\tTable string\n\t\t// Schema is an optional name of the database\n\t\t// where the table is defined.\n\t\tSchema string\n\t\t// Column to join with. Usually the \"id\" column.\n\t\tColumn string\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Dialect(name string) *DialectBuilder {\n\treturn \u0026DialectBuilder{name}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (b Builder) Dialect() string {\n\treturn b.dialect\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ThroughEdgeTable() bool {\n\treturn s.Edge.Rel == M2M\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) Schema(name string) *SelectTable {\n\ts.schema = name\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Table(name string) *SelectTable {\n\tb := Table(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) Where(p *Predicate) *Selector {\n\tif len(s.collected) \u003e 0 {\n\t\ts.collected[len(s.collected)-1] = append(s.collected[len(s.collected)-1], p)\n\t\treturn s\n\t}\n\tif s.not {\n\t\tp = Not(p)\n\t\ts.not = false\n\t}\n\tswitch {\n\tcase s.where == nil:\n\t\ts.where = p\n\tcase s.where != nil \u0026\u0026 s.or:\n\t\ts.where = Or(s.where, p)\n\t\ts.or = false\n\tdefault:\n\t\ts.where = And(s.where, p)\n\t}\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func In(col string, args ...any) *Predicate {\n\treturn P().In(col, args...)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) C(column string) string {\n\t// Skip formatting qualified columns.\n\tif s.isQualified(column) {\n\t\treturn column\n\t}\n\tif s.as != \"\" {\n\t\tb := \u0026Builder{dialect: s.dialect}\n\t\tb.Ident(s.as)\n\t\tb.WriteByte('.')\n\t\tb.Ident(column)\n\t\treturn b.String()\n\t}\n\treturn s.Table().C(column)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *Selector) From(t TableView) *Selector {\n\ts.from = nil\n\treturn s.AppendFrom(t)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Select(columns ...string) *Selector {\n\tb := Select(columns...)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) C(column string) string {\n\tname := s.name\n\tif s.as != \"\" {\n\t\tname = s.as\n\t}\n\tb := \u0026Builder{dialect: s.dialect}\n\tif s.as == \"\" {\n\t\tb.writeSchema(s.schema)\n\t}\n\tb.Ident(name).WriteByte('.').Ident(column)\n\treturn b.String()\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) FromEdgeOwner() bool {\n\treturn s.Edge.Rel == M2O || (s.Edge.Rel == O2O \u0026\u0026 s.Edge.Inverse)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func NotNull(col string) *Predicate {\n\treturn P().NotNull(col)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/sqlgraph/graph.go",
          "code_snippet": "func (s *Step) ToEdgeOwner() bool {\n\treturn s.Edge.Rel == O2M || (s.Edge.Rel == O2O \u0026\u0026 !s.Edge.Inverse)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (s *SelectTable) As(alias string) *SelectTable {\n\ts.as = alias\n\treturn s\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Exists(query Querier) *Predicate {\n\treturn P().Exists(query)\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func ColumnsEQ(col1, col2 string) *Predicate {\n\treturn P().ColumnsEQ(col1, col2)\n}",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275
      ],
      "cover_details": {
        "line_cover_rate": 0.9473684210526315
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectBytes",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "reflectBytes",
      "signature": "(dec efaceDecoder) reflectBytes (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (dec efaceDecoder) reflectBytes(data []byte) (reflect2.Type, error) {\n\ttyp := Type(jsoniter.Get(data, TypeKey).ToString())\n\trtype := dec.reflectType(typ)\n\tif rtype != nil {\n\t\treturn rtype, nil\n\t}\n\n\tswitch typ {\n\tcase listType:\n\t\treturn dec.reflectSlice(data)\n\tcase mapType:\n\t\treturn dec.reflectMap(data)\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 84,
      "end_line": 99,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectType(typ Type) reflect2.Type {\n\tswitch typ {\n\tcase doubleType:\n\t\treturn reflect2.TypeOf(float64(0))\n\tcase floatType:\n\t\treturn reflect2.TypeOf(float32(0))\n\tcase byteType:\n\t\treturn reflect2.TypeOf(uint8(0))\n\tcase int16Type:\n\t\treturn reflect2.TypeOf(int16(0))\n\tcase int32Type:\n\t\treturn reflect2.TypeOf(int32(0))\n\tcase int64Type, bigIntegerType:\n\t\treturn reflect2.TypeOf(int64(0))\n\tcase byteBufferType:\n\t\treturn reflect2.TypeOf([]byte{})\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectSlice(data []byte) (reflect2.Type, error) {\n\tvar elem any\n\tif err := Unmarshal(data, \u0026[...]*any{\u0026elem}); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot read first list element: %w\", err)\n\t}\n\n\tif elem == nil {\n\t\treturn reflect2.TypeOf([]any{}), nil\n\t}\n\n\tsliceType := reflect.SliceOf(reflect.TypeOf(elem))\n\treturn reflect2.Type2(sliceType), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectMap(data []byte) (reflect2.Type, error) {\n\tvar key, elem any\n\tif err := Unmarshal(\n\t\tbytes.Replace(data, []byte(mapType), []byte(listType), 1),\n\t\t\u0026[...]*any{\u0026key, \u0026elem},\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot unmarshal first map item: %w\", err)\n\t}\n\n\tif key == nil {\n\t\treturn reflect2.TypeOf(map[any]any{}), nil\n\t} else if elem == nil {\n\t\treturn nil, errors.New(\"expect map element, but found only key\")\n\t}\n\n\tmapType := reflect.MapOf(reflect.TypeOf(key), reflect.TypeOf(elem))\n\treturn reflect2.Type2(mapType), nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/any.go",
          "code_snippet": "Any interface {\n\tLastError() error\n\tValueType() ValueType\n\tMustBeValid() Any\n\tToBool() bool\n\tToInt() int\n\tToInt32() int32\n\tToInt64() int64\n\tToUint() uint\n\tToUint32() uint32\n\tToUint64() uint64\n\tToFloat32() float32\n\tToFloat64() float64\n\tToString() string\n\tToVal(val interface{})\n\tGet(path ...interface{}) Any\n\tSize() int\n\tKeys() []string\n\tGetInterface() interface{}\n\tWriteTo(stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Get(data []byte, path ...interface{}) Any {\n\treturn ConfigDefault.Get(data, path...)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        92,
        93,
        94,
        95,
        96,
        97
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "entgo.io/ent/entc/load/schema.go:NewField",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalFails"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalDefaults"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalSchema"
        },
        {
          "package": "entgo.io/ent/entc/load",
          "rel_file_path": "entc/load/schema_test.go",
          "func_name": "TestMarshalMixin"
        }
      ],
      "name": "NewField",
      "signature": "NewField (fd *field.Descriptor) (*Field, error)",
      "ground_truth": "func NewField(fd *field.Descriptor) (*Field, error) {\n\tif fd.Err != nil {\n\t\treturn nil, fmt.Errorf(\"field %q: %v\", fd.Name, fd.Err)\n\t}\n\tsf := \u0026Field{\n\t\tName:             fd.Name,\n\t\tInfo:             fd.Info,\n\t\tValueScanner:     fd.ValueScanner != nil,\n\t\tTag:              fd.Tag,\n\t\tEnums:            fd.Enums,\n\t\tUnique:           fd.Unique,\n\t\tNillable:         fd.Nillable,\n\t\tOptional:         fd.Optional,\n\t\tDefault:          fd.Default != nil,\n\t\tUpdateDefault:    fd.UpdateDefault != nil,\n\t\tImmutable:        fd.Immutable,\n\t\tStorageKey:       fd.StorageKey,\n\t\tValidators:       len(fd.Validators),\n\t\tSensitive:        fd.Sensitive,\n\t\tSchemaType:       fd.SchemaType,\n\t\tAnnotations:      make(map[string]any),\n\t\tComment:          fd.Comment,\n\t\tDeprecated:       fd.Deprecated,\n\t\tDeprecatedReason: fd.DeprecatedReason,\n\t}\n\tfor _, at := range fd.Annotations {\n\t\tsf.addAnnotation(at)\n\t}\n\tif sf.Info == nil {\n\t\treturn nil, fmt.Errorf(\"missing type info for field %q\", sf.Name)\n\t}\n\tif size := int64(fd.Size); size != 0 {\n\t\tsf.Size = \u0026size\n\t}\n\tif sf.Default {\n\t\tsf.DefaultKind = reflect.TypeOf(fd.Default).Kind()\n\t}\n\t// If the default value can be encoded to the generator.\n\t// For example, not a function like time.Now.\n\tif _, err := json.Marshal(fd.Default); err == nil {\n\t\tsf.DefaultValue = fd.Default\n\t}\n\treturn sf, nil\n}",
      "function_comment": "// NewField creates a loaded field from field descriptor.",
      "function_statement": "// NewField creates a loaded field from field descriptor.",
      "start_line": 123,
      "end_line": 166,
      "file_path": "./entc/load/schema.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/schema/field/field.go",
          "code_snippet": "Descriptor struct {\n\tTag              string                  // struct tag.\n\tSize             int                     // varchar size.\n\tName             string                  // field name.\n\tInfo             *TypeInfo               // field type info.\n\tValueScanner     any                     // custom field codec.\n\tUnique           bool                    // unique index of field.\n\tNillable         bool                    // nillable struct field.\n\tOptional         bool                    // nullable field in database.\n\tImmutable        bool                    // create only field.\n\tDefault          any                     // default value on create.\n\tUpdateDefault    any                     // default value on update.\n\tValidators       []any                   // validator functions.\n\tStorageKey       string                  // sql column or gremlin property.\n\tEnums            []struct{ N, V string } // enum values.\n\tSensitive        bool                    // sensitive info string field.\n\tSchemaType       map[string]string       // override the schema type.\n\tAnnotations      []schema.Annotation     // field annotations.\n\tComment          string                  // field comment.\n\tDeprecated       bool                    // mark the field as deprecated.\n\tDeprecatedReason string                  // deprecation reason.\n\tErr              error\n}",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "Field struct {\n\tName             string                  `json:\"name,omitempty\"`\n\tInfo             *field.TypeInfo         `json:\"type,omitempty\"`\n\tValueScanner     bool                    `json:\"value_scanner,omitempty\"`\n\tTag              string                  `json:\"tag,omitempty\"`\n\tSize             *int64                  `json:\"size,omitempty\"`\n\tEnums            []struct{ N, V string } `json:\"enums,omitempty\"`\n\tUnique           bool                    `json:\"unique,omitempty\"`\n\tNillable         bool                    `json:\"nillable,omitempty\"`\n\tOptional         bool                    `json:\"optional,omitempty\"`\n\tDefault          bool                    `json:\"default,omitempty\"`\n\tDefaultValue     any                     `json:\"default_value,omitempty\"`\n\tDefaultKind      reflect.Kind            `json:\"default_kind,omitempty\"`\n\tUpdateDefault    bool                    `json:\"update_default,omitempty\"`\n\tImmutable        bool                    `json:\"immutable,omitempty\"`\n\tValidators       int                     `json:\"validators,omitempty\"`\n\tStorageKey       string                  `json:\"storage_key,omitempty\"`\n\tPosition         *Position               `json:\"position,omitempty\"`\n\tSensitive        bool                    `json:\"sensitive,omitempty\"`\n\tSchemaType       map[string]string       `json:\"schema_type,omitempty\"`\n\tAnnotations      map[string]any          `json:\"annotations,omitempty\"`\n\tComment          string                  `json:\"comment,omitempty\"`\n\tDeprecated       bool                    `json:\"deprecated,omitempty\"`\n\tDeprecatedReason string                  `json:\"deprecated_reason,omitempty\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///data00/home/baixuran/code/workspace/workspace/ent/entc/load/schema.go",
          "code_snippet": "func (f *Field) addAnnotation(an schema.Annotation) {\n\taddAnnotation(f.Annotations, an)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "Type interface {\n\t// Methods applicable to all types.\n\n\t// Align returns the alignment in bytes of a value of\n\t// this type when allocated in memory.\n\tAlign() int\n\n\t// FieldAlign returns the alignment in bytes of a value of\n\t// this type when used as a field in a struct.\n\tFieldAlign() int\n\n\t// Method returns the i'th method in the type's method set.\n\t// It panics if i is not in the range [0, NumMethod()).\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver,\n\t// and only exported methods are accessible.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\t//\n\t// Methods are sorted in lexicographic order.\n\tMethod(int) Method\n\n\t// MethodByName returns the method with that name in the type's\n\t// method set and a boolean indicating if the method was found.\n\t//\n\t// For a non-interface type T or *T, the returned Method's Type and Func\n\t// fields describe a function whose first argument is the receiver.\n\t//\n\t// For an interface type, the returned Method's Type field gives the\n\t// method signature, without a receiver, and the Func field is nil.\n\tMethodByName(string) (Method, bool)\n\n\t// NumMethod returns the number of methods accessible using Method.\n\t//\n\t// For a non-interface type, it returns the number of exported methods.\n\t//\n\t// For an interface type, it returns the number of exported and unexported methods.\n\tNumMethod() int\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// ConvertibleTo reports whether a value of the type is convertible to type u.\n\t// Even if ConvertibleTo returns true, the conversion may still panic.\n\t// For example, a slice of type []T is convertible to *[N]T,\n\t// but the conversion will panic if its length is less than N.\n\tConvertibleTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\t// Even if Comparable returns true, the comparison may still panic.\n\t// For example, values of interface type are comparable,\n\t// but the comparison will panic if their dynamic type is not comparable.\n\tComparable() bool\n\n\t// Methods applicable only to some types, depending on Kind.\n\t// The methods allowed for each kind are:\n\t//\n\t//\tInt*, Uint*, Float*, Complex*: Bits\n\t//\tArray: Elem, Len\n\t//\tChan: ChanDir, Elem\n\t//\tFunc: In, NumIn, Out, NumOut, IsVariadic.\n\t//\tMap: Key, Elem\n\t//\tPointer: Elem\n\t//\tSlice: Elem\n\t//\tStruct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField\n\n\t// Bits returns the size of the type in bits.\n\t// It panics if the type's Kind is not one of the\n\t// sized or unsized Int, Uint, Float, or Complex kinds.\n\tBits() int\n\n\t// ChanDir returns a channel type's direction.\n\t// It panics if the type's Kind is not Chan.\n\tChanDir() ChanDir\n\n\t// IsVariadic reports whether a function type's final input parameter\n\t// is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's\n\t// implicit actual type []T.\n\t//\n\t// For concreteness, if t represents func(x int, y ... float64), then\n\t//\n\t//\tt.NumIn() == 2\n\t//\tt.In(0) is the reflect.Type for \"int\"\n\t//\tt.In(1) is the reflect.Type for \"[]float64\"\n\t//\tt.IsVariadic() == true\n\t//\n\t// IsVariadic panics if the type's Kind is not Func.\n\tIsVariadic() bool\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Array, Chan, Map, Pointer, or Slice.\n\tElem() Type\n\n\t// Field returns a struct type's i'th field.\n\t// It panics if the type's Kind is not Struct.\n\t// It panics if i is not in the range [0, NumField()).\n\tField(i int) StructField\n\n\t// FieldByIndex returns the nested field corresponding\n\t// to the index sequence. It is equivalent to calling Field\n\t// successively for each index i.\n\t// It panics if the type's Kind is not Struct.\n\tFieldByIndex(index []int) StructField\n\n\t// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByName(name string) (StructField, bool)\n\n\t// FieldByNameFunc returns the struct field with a name\n\t// that satisfies the match function and a boolean indicating if\n\t// the field was found.\n\t//\n\t// FieldByNameFunc considers the fields in the struct itself\n\t// and then the fields in any embedded structs, in breadth first order,\n\t// stopping at the shallowest nesting depth containing one or more\n\t// fields satisfying the match function. If multiple fields at that depth\n\t// satisfy the match function, they cancel each other\n\t// and FieldByNameFunc returns no match.\n\t// This behavior mirrors Go's handling of name lookup in\n\t// structs containing embedded fields.\n\t//\n\t// If the returned field is promoted from an embedded struct,\n\t// then Offset in the returned StructField is the offset in\n\t// the embedded struct.\n\tFieldByNameFunc(match func(string) bool) (StructField, bool)\n\n\t// In returns the type of a function type's i'th input parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumIn()).\n\tIn(i int) Type\n\n\t// Key returns a map type's key type.\n\t// It panics if the type's Kind is not Map.\n\tKey() Type\n\n\t// Len returns an array type's length.\n\t// It panics if the type's Kind is not Array.\n\tLen() int\n\n\t// NumField returns a struct type's field count.\n\t// It panics if the type's Kind is not Struct.\n\tNumField() int\n\n\t// NumIn returns a function type's input parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumIn() int\n\n\t// NumOut returns a function type's output parameter count.\n\t// It panics if the type's Kind is not Func.\n\tNumOut() int\n\n\t// Out returns the type of a function type's i'th output parameter.\n\t// It panics if the type's Kind is not Func.\n\t// It panics if i is not in the range [0, NumOut()).\n\tOut(i int) Type\n\n\t// OverflowComplex reports whether the complex128 x cannot be represented by type t.\n\t// It panics if t's Kind is not Complex64 or Complex128.\n\tOverflowComplex(x complex128) bool\n\n\t// OverflowFloat reports whether the float64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Float32 or Float64.\n\tOverflowFloat(x float64) bool\n\n\t// OverflowInt reports whether the int64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Int, Int8, Int16, Int32, or Int64.\n\tOverflowInt(x int64) bool\n\n\t// OverflowUint reports whether the uint64 x cannot be represented by type t.\n\t// It panics if t's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.\n\tOverflowUint(x uint64) bool\n\n\t// CanSeq reports whether a [Value] with this type can be iterated over using [Value.Seq].\n\tCanSeq() bool\n\n\t// CanSeq2 reports whether a [Value] with this type can be iterated over using [Value.Seq2].\n\tCanSeq2() bool\n\n\tcommon() *abi.Type\n\tuncommon() *uncommonType\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///home/baixuran/.gvm/pkgsets/go1.22/global/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.linux-amd64/src/encoding/json/encode.go",
          "code_snippet": "func Marshal(v any) ([]byte, error) {\n\te := newEncodeState()\n\tdefer encodeStatePool.Put(e)\n\n\terr := e.marshal(v, encOpts{escapeHTML: true})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := append([]byte(nil), e.Bytes()...)\n\n\treturn buf, nil\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        154,
        157,
        158,
        159,
        162,
        163,
        164,
        165
      ],
      "cover_details": {
        "line_cover_rate": 0.8409090909090909
      }
    }
  ]
}