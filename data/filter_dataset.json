{
  "total_count": 299,
  "exclude_count": 0,
  "success_count": 232,
  "failed_count": 64,
  "skip_count": 3,
  "test_cases": null,
  "repo_module": "entgo.io/ent",
  "base_commit": "4d347cae974894d87f5a633a3eb969f1083fac6a",
  "git_repo": "git@github.com:ai4se-boys/ent.git",
  "dataset": [
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:DecoderOfSlice",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "DecoderOfSlice",
      "signature": "(ext decodeExtension) DecoderOfSlice (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfSlice(typ reflect2.Type) jsoniter.ValDecoder {\n\tsliceType := typ.(reflect2.SliceType)\n\telemType := sliceType.Elem()\n\tif elemType.Kind() == reflect.Uint8 {\n\t\treturn nil\n\t}\n\treturn sliceDecoder{\n\t\tsliceType: sliceType,\n\t\telemDec:   ext.LazyDecoderOf(elemType),\n\t}\n}",
      "function_comment": "// DecoderOfSlice returns a value decoder of a slice type.",
      "function_statement": "// DecoderOfSlice returns a value decoder of a slice type.",
      "start_line": 35,
      "end_line": 45,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "sliceDecoder struct {\n\tsliceType reflect2.SliceType\n\telemDec   jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "SliceType interface {\n\tListType\n\tMakeSlice(length int, cap int) interface{}\n\tUnsafeMakeSlice(length int, cap int) unsafe.Pointer\n\tGrow(obj interface{}, newLength int)\n\tUnsafeGrow(ptr unsafe.Pointer, newLength int)\n\tAppend(obj interface{}, elem interface{})\n\tUnsafeAppend(obj unsafe.Pointer, elem unsafe.Pointer)\n\tLengthOf(obj interface{}) int\n\tUnsafeLengthOf(ptr unsafe.Pointer) int\n\tSetNil(obj interface{})\n\tUnsafeSetNil(ptr unsafe.Pointer)\n\tCap(obj interface{}) int\n\tUnsafeCap(ptr unsafe.Pointer) int\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ListType interface {\n\tType\n\tElem() Type\n\tSetIndex(obj interface{}, index int, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, index int, elem unsafe.Pointer)\n\tGetIndex(obj interface{}, index int) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, index int) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44
      ],
      "cover_details": {
        "line_cover_rate": 0.9090909090909091
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/postgres.go:atOpen",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        }
      ],
      "name": "atOpen",
      "signature": "(d *Postgres) atOpen (conn dialect.ExecQuerier) (migrate.Driver, error)",
      "ground_truth": "func (d *Postgres) atOpen(conn dialect.ExecQuerier) (migrate.Driver, error) {\n\treturn postgres.Open(\u0026db{ExecQuerier: conn})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 87,
      "end_line": 89,
      "file_path": "./dialect/sql/schema/postgres.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/postgres.go",
          "code_snippet": "Postgres struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "ExecQuerier interface {\n\t// Exec executes a query that does not return records. For example, in SQL, INSERT or UPDATE.\n\t// It scans the result into the pointer v. For SQL drivers, it is dialect/sql.Result.\n\tExec(ctx context.Context, query string, args, v any) error\n\t// Query executes a query that returns rows, typically a SELECT in SQL.\n\t// It scans the result into the pointer v. For SQL drivers, it is *dialect/sql.Rows.\n\tQuery(ctx context.Context, query string, args, v any) error\n}",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "db struct{ dialect.ExecQuerier }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Driver interface {\n\t\tschema.Differ\n\t\tschema.ExecQuerier\n\t\tschema.Inspector\n\t\tschema.Locker\n\t\tPlanApplier\n\t\tSnapshoter\n\t\tCleanChecker\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "func Open(db schema.ExecQuerier) (migrate.Driver, error) {\n\tc := \u0026conn{ExecQuerier: db}\n\trows, err := db.QueryContext(context.Background(), paramsQuery)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"postgres: scanning system variables: %w\", err)\n\t}\n\tvar ver, am, crdb sql.NullString\n\tif err := sqlx.ScanOne(rows, \u0026ver, \u0026am, \u0026crdb); err != nil {\n\t\treturn nil, fmt.Errorf(\"postgres: scanning system variables: %w\", err)\n\t}\n\tif c.version, err = strconv.Atoi(ver.String); err != nil {\n\t\treturn nil, fmt.Errorf(\"postgres: malformed version: %s: %w\", ver.String, err)\n\t}\n\tif c.version \u003c 10_00_00 {\n\t\treturn nil, fmt.Errorf(\"postgres: unsupported postgres version: %d\", c.version)\n\t}\n\tc.accessMethod = am.String\n\tif c.crdb = sqlx.ValidString(crdb); c.crdb {\n\t\treturn noLockDriver{\n\t\t\t\u0026Driver{\n\t\t\t\tconn:        c,\n\t\t\t\tDiffer:      \u0026sqlx.Diff{DiffDriver: \u0026crdbDiff{diff{c}}},\n\t\t\t\tInspector:   \u0026crdbInspect{inspect{c}},\n\t\t\t\tPlanApplier: \u0026planApply{c},\n\t\t\t},\n\t\t}, nil\n\t}\n\treturn \u0026Driver{\n\t\tconn:        c,\n\t\tDiffer:      \u0026sqlx.Diff{DiffDriver: \u0026diff{c}},\n\t\tInspector:   \u0026inspect{c},\n\t\tPlanApplier: \u0026planApply{c},\n\t}, nil\n}",
          "ref_module": "postgres"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        87,
        88,
        89
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:realm",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "realm",
      "signature": "(a *Atlas) realm (tables []*Table) (*schema.Realm, error)",
      "ground_truth": "func (a *Atlas) realm(tables []*Table) (*schema.Realm, error) {\n\tvar (\n\t\tsm  = make(map[string]*schema.Schema)\n\t\tbyT = make(map[*Table]*schema.Table)\n\t)\n\tfor _, et := range tables {\n\t\tif _, ok := sm[et.Schema]; !ok {\n\t\t\tsm[et.Schema] = schema.New(et.Schema)\n\t\t}\n\t\ts := sm[et.Schema]\n\t\tif et.View {\n\t\t\tif et.Annotation == nil || et.Annotation.ViewAs == \"\" \u0026\u0026 et.Annotation.ViewFor[a.dialect] == \"\" {\n\t\t\t\tcontinue // defined externally\n\t\t\t}\n\t\t\tdef := et.Annotation.ViewFor[a.dialect]\n\t\t\tif def == \"\" {\n\t\t\t\tdef = et.Annotation.ViewAs\n\t\t\t}\n\t\t\tav := schema.NewView(et.Name, def)\n\t\t\tif et.Comment != \"\" {\n\t\t\t\tav.SetComment(et.Comment)\n\t\t\t}\n\t\t\tif err := a.aVColumns(et, av); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ts.AddViews(av)\n\t\t\tcontinue\n\t\t}\n\t\tat := schema.NewTable(et.Name)\n\t\tif et.Comment != \"\" {\n\t\t\tat.SetComment(et.Comment)\n\t\t}\n\t\ta.sqlDialect.atTable(et, at)\n\t\t// universalID is the old implementation of the global unique id, relying on a table in the database.\n\t\t// The new implementation is based on annotations attached to the schema. Only one can be enabled.\n\t\tswitch {\n\t\tcase a.universalID \u0026\u0026 et.Annotation != nil \u0026\u0026 et.Annotation.IncrementStart != nil:\n\t\t\treturn nil, errors.New(\"universal id and increment start annotation are mutually exclusive\")\n\t\tcase a.universalID \u0026\u0026 et.Name != TypeTable \u0026\u0026 len(et.PrimaryKey) == 1:\n\t\t\tr, err := a.pkRange(et)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ta.sqlDialect.atIncrementT(at, r)\n\t\tcase et.Annotation != nil \u0026\u0026 et.Annotation.IncrementStart != nil:\n\t\t\ta.sqlDialect.atIncrementT(at, int64(*et.Annotation.IncrementStart))\n\t\t}\n\t\tif err := a.aColumns(et, at); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif err := a.aIndexes(et, at); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ts.AddTables(at)\n\t\tbyT[et] = at\n\t}\n\tfor _, t1 := range tables {\n\t\tif t1.View {\n\t\t\tcontinue\n\t\t}\n\t\tt2 := byT[t1]\n\t\tfor _, fk1 := range t1.ForeignKeys {\n\t\t\tfk2 := schema.NewForeignKey(fk1.Symbol).\n\t\t\t\tSetTable(t2).\n\t\t\t\tSetOnUpdate(schema.ReferenceOption(fk1.OnUpdate)).\n\t\t\t\tSetOnDelete(schema.ReferenceOption(fk1.OnDelete))\n\t\t\tfor _, c1 := range fk1.Columns {\n\t\t\t\tc2, ok := t2.Column(c1.Name)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, fmt.Errorf(\"unexpected fk %q column: %q\", fk1.Symbol, c1.Name)\n\t\t\t\t}\n\t\t\t\tfk2.AddColumns(c2)\n\t\t\t}\n\t\t\tvar refT *schema.Table\n\t\t\tfor _, t2 := range sm[fk1.RefTable.Schema].Tables {\n\t\t\t\tif t2.Name == fk1.RefTable.Name {\n\t\t\t\t\trefT = t2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif refT == nil {\n\t\t\t\treturn nil, fmt.Errorf(\"unexpected fk %q ref-table: %q\", fk1.Symbol, fk1.RefTable.Name)\n\t\t\t}\n\t\t\tfk2.SetRefTable(refT)\n\t\t\tfor _, c1 := range fk1.RefColumns {\n\t\t\t\tc2, ok := refT.Column(c1.Name)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, fmt.Errorf(\"unexpected fk %q ref-column: %q\", fk1.Symbol, c1.Name)\n\t\t\t\t}\n\t\t\t\tfk2.AddRefColumns(c2)\n\t\t\t}\n\t\t\tt2.AddForeignKeys(fk2)\n\t\t}\n\t}\n\tss := slices.SortedFunc(maps.Values(sm), func(a, b *schema.Schema) int {\n\t\treturn strings.Compare(a.Name, b.Name)\n\t})\n\treturn \u0026schema.Realm{Schemas: ss}, nil\n}",
      "function_comment": "// tables converts an Ent table slice to an atlas tables.",
      "function_statement": "// tables converts an Ent table slice to an atlas tables.",
      "start_line": 846,
      "end_line": 944,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/entsql/annotation.go",
          "code_snippet": "Annotation struct {\n\t// The Schema option allows setting the schema which the table belongs to.\n\t// Note, this option is no-op for Ent default migration engine. However, schema\n\t// extensions (like Atlas) can accept this option and implement it accordingly.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSchema: \"public\",\n\t//\t}\n\t//\n\tSchema string `json:\"schema,omitempty\"`\n\n\t// The Table option allows overriding the default table\n\t// name that is generated by ent. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tTable: \"Users\",\n\t//\t}\n\t//\n\tTable string `json:\"table,omitempty\"`\n\n\t// Charset defines the character-set of the table. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCharset: \"utf8mb4\",\n\t//\t}\n\t//\n\tCharset string `json:\"charset,omitempty\"`\n\n\t// Collation defines the collation of the table (a set of rules for comparing\n\t// characters in a character set). For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCollation: \"utf8mb4_bin\",\n\t//\t}\n\t//\n\tCollation string `json:\"collation,omitempty\"`\n\n\t// Default specifies a literal default value of a column. Note that using\n\t// this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefault: `{\"key\":\"value\"}`,\n\t//\t}\n\t//\n\tDefault string `json:\"default,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column. Using this option,\n\t// users can define custom expressions to be set as database default values. Note that\n\t// using this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"CURRENT_TIMESTAMP\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"uuid_generate_v4()\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"(a + b)\",\n\t//\t}\n\t//\n\tDefaultExpr string `json:\"default_expr,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column per dialect.\n\t// See, DefaultExpr for full doc.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExprs: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"uuid()\",\n\t//\t\t\tdialect.Postgres: \"uuid_generate_v4\",\n\t//\t\t}\n\t//\n\tDefaultExprs map[string]string `json:\"default_exprs,omitempty\"`\n\n\t// Options defines the additional table options. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOptions: \"ENGINE = INNODB\",\n\t//\t}\n\t//\n\tOptions string `json:\"options,omitempty\"`\n\n\t// Size defines the column size in the generated schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSize: 128,\n\t//\t}\n\t//\n\tSize int64 `json:\"size,omitempty\"`\n\n\t// WithComments specifies whether fields' comments should\n\t// be stored in the database schema as column comments.\n\t//\n\t//  withCommentsEnabled := true\n\t//\tentsql.WithComments{\n\t//\t\tWithComments: \u0026withCommentsEnabled,\n\t//\t}\n\t//\n\tWithComments *bool `json:\"with_comments,omitempty\"`\n\n\t// Incremental defines the auto-incremental behavior of a column. For example:\n\t//\n\t//  incrementalEnabled := true\n\t//  entsql.Annotation{\n\t//      Incremental: \u0026incrementalEnabled,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever best fits each scenario.\n\t//\n\tIncremental *bool `json:\"incremental,omitempty\"`\n\n\t// IncrementStart defines the auto-incremental start value of a column. For example:\n\t//\n\t//  incrementStart := 100\n\t//  entsql.Annotation{\n\t//      IncrementStart: \u0026incrementStart,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever the database settings are.\n\t//\n\tIncrementStart *int `json:\"increment_start,omitempty\"`\n\n\t// OnDelete specifies a custom referential action for DELETE operations on parent\n\t// table that has matching rows in the child table.\n\t//\n\t// For example, in order to delete rows from the parent table and automatically delete\n\t// their matching rows in the child table, pass the following annotation:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOnDelete: entsql.Cascade,\n\t//\t}\n\t//\n\tOnDelete ReferenceOption `json:\"on_delete,omitempty\"`\n\n\t// Check allows injecting custom \"DDL\" for setting an unnamed \"CHECK\" clause in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCheck: \"age \u003c 10\",\n\t//\t}\n\t//\n\tCheck string `json:\"check,omitempty\"`\n\n\t// Checks allows injecting custom \"DDL\" for setting named \"CHECK\" clauses in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tChecks: map[string]string{\n\t//\t\t\t\"valid_discount\": \"price \u003e discount_price\",\n\t//\t\t},\n\t//\t}\n\t//\n\tChecks map[string]string `json:\"checks,omitempty\"`\n\n\t// Skip indicates that the field or the schema is skipped/ignored during\n\t// migration (e.g., defined externally).\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSkip: true,\n\t//\t}\n\t//\n\tSkip bool `json:\"skip,omitempty\"`\n\n\t// ViewAs allows defining a view for the schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tView: \"SELECT name FROM users\",\n\t//\t}\n\tViewAs string `json:\"view_as,omitempty\"`\n\n\t// ViewFor allows defining a view for the schema per dialect. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tViewFor: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"...\",\n\t//\t\t\tdialect.Postgres: \"...\",\n\t//\t\t},\n\t//\t}\n\tViewFor map[string]string `json:\"view_for,omitempty\"`\n\n\t// error occurs during annotation build. This field is not\n\t// serialized to JSON and used only by the codegen loader.\n\terr error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) aVColumns(et *Table, at *schema.View) error {\n\tfor _, c1 := range et.Columns {\n\t\tc2 := schema.NewColumn(c1.Name).\n\t\t\tSetNull(c1.Nullable)\n\t\tif c1.Collation != \"\" {\n\t\t\tc2.SetCollation(c1.Collation)\n\t\t}\n\t\tif c1.Comment != \"\" {\n\t\t\tc2.SetComment(c1.Comment)\n\t\t}\n\t\tif err := a.sqlDialect.atTypeC(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := a.atDefault(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tat.AddColumns(c2)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "TypeTable = \"ent_types\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) pkRange(et *Table) (int64, error) {\n\tidx := indexOf(a.types, et.Name)\n\t// If the table re-created, re-use its range from\n\t// the past. Otherwise, allocate a new id-range.\n\tif idx == -1 {\n\t\tif len(a.types) \u003e MaxTypes {\n\t\t\treturn 0, fmt.Errorf(\"max number of types exceeded: %d\", MaxTypes)\n\t\t}\n\t\tidx = len(a.types)\n\t\ta.types = append(a.types, et.Name)\n\t}\n\treturn int64(idx \u003c\u003c 32), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) aColumns(et *Table, at *schema.Table) error {\n\tfor _, c1 := range et.Columns {\n\t\tc2 := schema.NewColumn(c1.Name).\n\t\t\tSetNull(c1.Nullable)\n\t\tif c1.Collation != \"\" {\n\t\t\tc2.SetCollation(c1.Collation)\n\t\t}\n\t\tif c1.Comment != \"\" {\n\t\t\tc2.SetComment(c1.Comment)\n\t\t}\n\t\tif err := a.sqlDialect.atTypeC(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := a.atDefault(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif c1.Unique \u0026\u0026 (len(et.PrimaryKey) != 1 || et.PrimaryKey[0] != c1) {\n\t\t\ta.sqlDialect.atUniqueC(et, c1, at, c2)\n\t\t}\n\t\tif c1.Increment {\n\t\t\ta.sqlDialect.atIncrementC(at, c2)\n\t\t}\n\t\tat.AddColumns(c2)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) aIndexes(et *Table, at *schema.Table) error {\n\t// Primary-key index.\n\tpk := make([]*schema.Column, 0, len(et.PrimaryKey))\n\tfor _, c1 := range et.PrimaryKey {\n\t\tc2, ok := at.Column(c1.Name)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"unexpected primary-key column: %q\", c1.Name)\n\t\t}\n\t\tpk = append(pk, c2)\n\t}\n\t// CreateFunc might clear the primary keys.\n\tif len(pk) \u003e 0 {\n\t\tat.SetPrimaryKey(schema.NewPrimaryKey(pk...))\n\t}\n\t// Rest of indexes.\n\tfor _, idx1 := range et.Indexes {\n\t\tidx2 := schema.NewIndex(idx1.Name).\n\t\t\tSetUnique(idx1.Unique)\n\t\tif err := a.sqlDialect.atIndex(idx1, at, idx2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdesc := descIndexes(idx1)\n\t\tfor _, p := range idx2.Parts {\n\t\t\tp.Desc = desc[p.C.Name]\n\t\t}\n\t\tat.AddIndexes(idx2)\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "ForeignKey struct {\n\tSymbol     string          // foreign-key name. Generated if empty.\n\tColumns    []*Column       // table column\n\tRefTable   *Table          // referenced table.\n\tRefColumns []*Column       // referenced columns.\n\tOnUpdate   ReferenceOption // action on update.\n\tOnDelete   ReferenceOption // action on delete.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Realm struct {\n\t\tSchemas []*Schema\n\t\tAttrs   []Attr\n\t\tObjects []Object // Realm-level objects (e.g., users or extensions).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func New(name string) *Schema {\n\treturn \u0026Schema{Name: name}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewView(name, def string) *View {\n\treturn \u0026View{Name: name, Def: def}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (v *View) SetComment(c string) *View {\n\tReplaceOrAppend(\u0026v.Attrs, \u0026Comment{Text: c})\n\treturn v\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (s *Schema) AddViews(views ...*View) *Schema {\n\tfor _, v := range views {\n\t\tv.SetSchema(s)\n\t}\n\ts.Views = append(s.Views, views...)\n\treturn s\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewTable(name string) *Table {\n\treturn \u0026Table{Name: name}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) SetComment(v string) *Table {\n\tReplaceOrAppend(\u0026t.Attrs, \u0026Comment{Text: v})\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (s *Schema) AddTables(tables ...*Table) *Schema {\n\tfor _, t := range tables {\n\t\tt.SetSchema(s)\n\t}\n\ts.Tables = append(s.Tables, tables...)\n\treturn s\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (f *ForeignKey) SetOnDelete(o ReferenceOption) *ForeignKey {\n\tf.OnDelete = o\n\treturn f\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (f *ForeignKey) SetOnUpdate(o ReferenceOption) *ForeignKey {\n\tf.OnUpdate = o\n\treturn f\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (f *ForeignKey) SetTable(t *Table) *ForeignKey {\n\tf.Table = t\n\treturn f\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewForeignKey(symbol string) *ForeignKey {\n\treturn \u0026ForeignKey{Symbol: symbol}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "ReferenceOption string",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "func (t *Table) Column(name string) (*Column, bool) {\n\tfor _, c := range t.Columns {\n\t\tif c.Name == name {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (f *ForeignKey) AddColumns(columns ...*Column) *ForeignKey {\n\tfor _, c := range columns {\n\t\tif !c.hasForeignKey(f) {\n\t\t\tc.ForeignKeys = append(c.ForeignKeys, f)\n\t\t}\n\t}\n\tf.Columns = append(f.Columns, columns...)\n\treturn f\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (f *ForeignKey) SetRefTable(t *Table) *ForeignKey {\n\tf.RefTable = t\n\treturn f\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (f *ForeignKey) AddRefColumns(columns ...*Column) *ForeignKey {\n\tf.RefColumns = append(f.RefColumns, columns...)\n\treturn f\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddForeignKeys(fks ...*ForeignKey) *Table {\n\tfor _, fk := range fks {\n\t\tfk.Table = t\n\t}\n\tt.ForeignKeys = append(t.ForeignKeys, fks...)\n\treturn t\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/slices/iter.go",
          "code_snippet": "func SortedFunc[E any](seq iter.Seq[E], cmp func(E, E) int) []E {\n\ts := Collect(seq)\n\tSortFunc(s, cmp)\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/maps/iter.go",
          "code_snippet": "func Values[Map ~map[K]V, K comparable, V any](m Map) iter.Seq[V] {\n\treturn func(yield func(V) bool) {\n\t\tfor _, v := range m {\n\t\t\tif !yield(v) {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/compare.go",
          "code_snippet": "func Compare(a, b string) int {\n\treturn bytealg.CompareString(a, b)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        846,
        847,
        848,
        849,
        850,
        851,
        852,
        853,
        854,
        855,
        856,
        857,
        858,
        860,
        861,
        862,
        863,
        864,
        865,
        868,
        871,
        872,
        874,
        875,
        878,
        879,
        880,
        881,
        884,
        885,
        886,
        889,
        890,
        891,
        893,
        896,
        899,
        900,
        902,
        903,
        904,
        906,
        907,
        908,
        909,
        910,
        911,
        912,
        913,
        914,
        917,
        919,
        920,
        921,
        922,
        923,
        926,
        929,
        930,
        931,
        932,
        935,
        937,
        940,
        941,
        942,
        943
      ],
      "cover_details": {
        "line_cover_rate": 0.6767676767676768
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:aIndexes",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "aIndexes",
      "signature": "(a *Atlas) aIndexes (et *Table, at *schema.Table) error",
      "ground_truth": "func (a *Atlas) aIndexes(et *Table, at *schema.Table) error {\n\t// Primary-key index.\n\tpk := make([]*schema.Column, 0, len(et.PrimaryKey))\n\tfor _, c1 := range et.PrimaryKey {\n\t\tc2, ok := at.Column(c1.Name)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"unexpected primary-key column: %q\", c1.Name)\n\t\t}\n\t\tpk = append(pk, c2)\n\t}\n\t// CreateFunc might clear the primary keys.\n\tif len(pk) \u003e 0 {\n\t\tat.SetPrimaryKey(schema.NewPrimaryKey(pk...))\n\t}\n\t// Rest of indexes.\n\tfor _, idx1 := range et.Indexes {\n\t\tidx2 := schema.NewIndex(idx1.Name).\n\t\t\tSetUnique(idx1.Unique)\n\t\tif err := a.sqlDialect.atIndex(idx1, at, idx2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdesc := descIndexes(idx1)\n\t\tfor _, p := range idx2.Parts {\n\t\t\tp.Desc = desc[p.C.Name]\n\t\t}\n\t\tat.AddIndexes(idx2)\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1047,
      "end_line": 1075,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\tName       string                  // index name.\n\tUnique     bool                    // uniqueness.\n\tColumns    []*Column               // actual table columns.\n\tAnnotation *entsql.IndexAnnotation // index annotation.\n\tcolumns    []string                // columns loaded from query scan.\n\trealname   string                  // real name in the database (Postgres only).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func descIndexes(idx *Index) map[string]bool {\n\tdescs := make(map[string]bool)\n\tif idx.Annotation == nil {\n\t\treturn descs\n\t}\n\t// If DESC (without a column) was defined on the\n\t// annotation, map it to the single column index.\n\tif idx.Annotation.Desc \u0026\u0026 len(idx.Columns) == 1 {\n\t\tdescs[idx.Columns[0].Name] = idx.Annotation.Desc\n\t}\n\tfor column, desc := range idx.Annotation.DescColumns {\n\t\tdescs[column] = desc\n\t}\n\treturn descs\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "func (t *Table) Column(name string) (*Column, bool) {\n\tfor _, c := range t.Columns {\n\t\tif c.Name == name {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) SetPrimaryKey(pk *Index) *Table {\n\tpk.Table = t\n\tt.PrimaryKey = pk\n\tfor _, p := range pk.Parts {\n\t\tif p.C == nil {\n\t\t\tcontinue\n\t\t}\n\t\tif _, ok := t.Column(p.C.Name); !ok {\n\t\t\tt.AddColumns(p.C)\n\t\t}\n\t}\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewPrimaryKey(columns ...*Column) *Index {\n\treturn new(Index).SetUnique(true).AddColumns(columns...)\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) SetUnique(b bool) *Index {\n\ti.Unique = b\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewIndex(name string) *Index {\n\treturn \u0026Index{Name: name}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\t\tName   string\n\t\tUnique bool\n\t\t// Table or View that this index belongs to.\n\t\tTable *Table\n\t\tView  *View\n\t\tAttrs []Attr\n\t\tParts []*IndexPart\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IndexPart struct {\n\t\t// SeqNo represents the sequence number of the key part\n\t\t// in the index.\n\t\tSeqNo int\n\t\t// Desc indicates if the key part is stored in descending\n\t\t// order. All databases use ascending order as default.\n\t\tDesc  bool\n\t\tX     Expr\n\t\tC     *Column\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddIndexes(indexes ...*Index) *Table {\n\tfor _, idx := range indexes {\n\t\tidx.Table = t\n\t}\n\tt.Indexes = append(t.Indexes, indexes...)\n\treturn t\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1047,
        1048,
        1049,
        1050,
        1051,
        1052,
        1055,
        1058,
        1059,
        1060,
        1062,
        1063,
        1064,
        1065,
        1068,
        1069,
        1070,
        1071,
        1072,
        1074
      ],
      "cover_details": {
        "line_cover_rate": 0.6896551724137931
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/util.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        }
      ],
      "name": "Encode",
      "signature": "(enc typeEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc typeEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tstream.WriteObjectStart()\n\tstream.WriteObjectField(TypeKey)\n\tstream.WriteString(enc.Type.String())\n\tstream.WriteMore()\n\tstream.WriteObjectField(ValueKey)\n\tenc.ValEncoder.Encode(ptr, stream)\n\tstream.WriteObjectEnd()\n}",
      "function_comment": "// Encode belongs to jsoniter.ValEncoder interface.",
      "function_statement": "// Encode belongs to jsoniter.ValEncoder interface.",
      "start_line": 28,
      "end_line": 36,
      "file_path": "./dialect/gremlin/encoding/graphson/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (typ Type) String() string {\n\treturn string(typ)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "ValueKey = \"@value\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteObjectStart() {\n\tstream.indention += stream.cfg.indentionStep\n\tstream.writeByte('{')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteObjectField(field string) {\n\tstream.WriteString(field)\n\tif stream.indention \u003e 0 {\n\t\tstream.writeTwoBytes(':', ' ')\n\t} else {\n\t\tstream.writeByte(':')\n\t}\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_str.go",
          "code_snippet": "func (stream *Stream) WriteString(s string) {\n\tvalLen := len(s)\n\tstream.buf = append(stream.buf, '\"')\n\t// write string, the fast path, without utf8 and escape support\n\ti := 0\n\tfor ; i \u003c valLen; i++ {\n\t\tc := s[i]\n\t\tif c \u003e 31 \u0026\u0026 c != '\"' \u0026\u0026 c != '\\\\' {\n\t\t\tstream.buf = append(stream.buf, c)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tif i == valLen {\n\t\tstream.buf = append(stream.buf, '\"')\n\t\treturn\n\t}\n\twriteStringSlowPath(stream, i, s, valLen)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteMore() {\n\tstream.writeByte(',')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteObjectEnd() {\n\tstream.writeIndention(stream.cfg.indentionStep)\n\tstream.indention -= stream.cfg.indentionStep\n\tstream.writeByte('}')\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        }
      ],
      "name": "Encode",
      "signature": "(enc *mapEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc *mapEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\titer := enc.mapType.UnsafeIterate(ptr)\n\tif !iter.HasNext() {\n\t\tstream.WriteEmptyArray()\n\t\treturn\n\t}\n\n\tstream.WriteArrayStart()\n\tfor {\n\t\tkey, elem := iter.UnsafeNext()\n\t\tenc.keyEnc.Encode(key, stream)\n\t\tstream.WriteMore()\n\t\tenc.elemEnc.Encode(elem, stream)\n\t\tif !iter.HasNext() {\n\t\t\tbreak\n\t\t}\n\t\tstream.WriteMore()\n\t}\n\tstream.WriteArrayEnd()\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 35,
      "end_line": 54,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapEncoder struct {\n\tmapType reflect2.MapType\n\tkeyEnc  jsoniter.ValEncoder\n\telemEnc jsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapIterator interface {\n\tHasNext() bool\n\tNext() (key interface{}, elem interface{})\n\tUnsafeNext() (key unsafe.Pointer, elem unsafe.Pointer)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteEmptyArray() {\n\tstream.writeTwoBytes('[', ']')\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteArrayStart() {\n\tstream.indention += stream.cfg.indentionStep\n\tstream.writeByte('[')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteMore() {\n\tstream.writeByte(',')\n\tstream.writeIndention(0)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteArrayEnd() {\n\tstream.writeIndention(stream.cfg.indentionStep)\n\tstream.indention -= stream.cfg.indentionStep\n\tstream.writeByte(']')\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        53
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:DecoratorOfRegistered",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfRegistered",
      "signature": "(encodeExtension) DecoratorOfRegistered (enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) DecoratorOfRegistered(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif _, ok := enc.(registeredEncoder); ok {\n\t\treturn enc\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoratorOfRegistered decorates a value encoder of a registered type.",
      "function_statement": "// DecoratorOfRegistered decorates a value encoder of a registered type.",
      "start_line": 52,
      "end_line": 57,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "registeredEncoder struct{ jsoniter.ValEncoder }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        52,
        53,
        56
      ],
      "cover_details": {
        "line_cover_rate": 0.5
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:DecoratorOfUnmarshaler",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfUnmarshaler",
      "signature": "(decodeExtension) DecoratorOfUnmarshaler (typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) DecoratorOfUnmarshaler(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif reflect2.PtrTo(typ).Implements(unmarshalerType) {\n\t\treturn dec\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoratorOfUnmarshaler decorates a value encoder of an Unmarshaler interface.",
      "function_statement": "// DecoratorOfUnmarshaler decorates a value encoder of an Unmarshaler interface.",
      "start_line": 46,
      "end_line": 51,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "unmarshalerType = reflect2.TypeOfPtr((*Unmarshaler)(nil)).Elem()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        46,
        47,
        48,
        49,
        50
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:EncoderOfMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "EncoderOfMap",
      "signature": "(ext encodeExtension) EncoderOfMap (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) EncoderOfMap(typ reflect2.Type) jsoniter.ValEncoder {\n\tmapType := typ.(reflect2.MapType)\n\treturn \u0026mapEncoder{\n\t\tmapType: mapType,\n\t\tkeyEnc:  ext.LazyEncoderOf(mapType.Key()),\n\t\telemEnc: ext.LazyEncoderOf(mapType.Elem()),\n\t}\n}",
      "function_comment": "// EncoderOfMap returns a value encoder of a map type.",
      "function_statement": "// EncoderOfMap returns a value encoder of a map type.",
      "start_line": 15,
      "end_line": 22,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapEncoder struct {\n\tmapType reflect2.MapType\n\tkeyEnc  jsoniter.ValEncoder\n\telemEnc jsoniter.ValEncoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (encodeExtension) LazyEncoderOf(typ reflect2.Type) jsoniter.ValEncoder {\n\treturn \u0026lazyEncoder{resolve: func() jsoniter.ValEncoder {\n\t\treturn config.EncoderOf(typ)\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:DecorateEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecorateEncoder",
      "signature": "(ext encodeExtension) DecorateEncoder (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecorateEncoder(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif enc := ext.DecoratorOfRegistered(enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfMarshaler(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfTyper(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.DecoratorOfNative(typ, enc); enc != nil {\n\t\treturn enc\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Ptr, reflect.Interface, reflect.Struct:\n\t\treturn enc\n\tcase reflect.Array:\n\t\treturn ext.DecoratorOfArray(enc)\n\tcase reflect.Slice:\n\t\treturn ext.DecoratorOfSlice(typ, enc)\n\tcase reflect.Map:\n\t\treturn ext.DecoratorOfMap(enc)\n\tdefault:\n\t\treturn ext.EncoderOfError(\"graphson: unsupported type: %s\", typ.String())\n\t}\n}",
      "function_comment": "// DecorateEncoder decorates an passed in value encoder for type.",
      "function_statement": "// DecorateEncoder decorates an passed in value encoder for type.",
      "start_line": 73,
      "end_line": 98,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (encodeExtension) DecoratorOfRegistered(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif _, ok := enc.(registeredEncoder); ok {\n\t\treturn enc\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (ext encodeExtension) DecoratorOfMarshaler(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ == marshalerType {\n\t\tenc := marshalerEncoder{enc, typ}\n\t\treturn directMarshalerEncoder{enc}\n\t}\n\tif typ.Implements(marshalerType) {\n\t\treturn marshalerEncoder{enc, typ}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(marshalerType) {\n\t\tptrEnc := ext.LazyEncoderOf(ptrType)\n\t\tenc := marshalerEncoder{ptrEnc, ptrType}\n\t\treturn referenceEncoder{enc}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (ext encodeExtension) DecoratorOfTyper(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ.Kind() != reflect.Struct {\n\t\treturn nil\n\t}\n\tif typ.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\treturn typ.UnsafeIndirect(ptr).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (encodeExtension) DecoratorOfNative(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool, reflect.String:\n\t\treturn enc\n\tcase reflect.Int64, reflect.Int, reflect.Uint32:\n\t\treturn typeEncoder{enc, int64Type}\n\tcase reflect.Int32, reflect.Int8, reflect.Uint16:\n\t\treturn typeEncoder{enc, int32Type}\n\tcase reflect.Int16:\n\t\treturn typeEncoder{enc, int16Type}\n\tcase reflect.Uint64, reflect.Uint:\n\t\treturn typeEncoder{enc, bigIntegerType}\n\tcase reflect.Uint8:\n\t\treturn typeEncoder{enc, byteType}\n\tcase reflect.Float32:\n\t\treturn typeEncoder{enc, floatType}\n\tcase reflect.Float64:\n\t\treturn typeEncoder{enc, doubleType}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (encodeExtension) DecoratorOfArray(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (encodeExtension) DecoratorOfSlice(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tencoder := typeEncoder{ValEncoder: enc}\n\tsliceType := typ.(reflect2.SliceType)\n\tif sliceType.Elem().Kind() == reflect.Uint8 {\n\t\tencoder.Type = byteBufferType\n\t} else {\n\t\tencoder.Type = listType\n\t}\n\treturn sliceEncoder{sliceType, encoder}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (encodeExtension) DecoratorOfMap(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, mapType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func (encodeExtension) EncoderOfError(format string, args ...any) jsoniter.ValEncoder {\n\treturn decoratorOfError(format, args...)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96
      ],
      "cover_details": {
        "line_cover_rate": 0.9230769230769231
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:UnmarshalFromString",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "UnmarshalFromString",
      "signature": "UnmarshalFromString (str string, v any) error",
      "ground_truth": "func UnmarshalFromString(str string, v any) error {\n\treturn config.UnmarshalFromString(str, v)\n}",
      "function_comment": "// UnmarshalFromString parses the graphson encoded str and stores the result\n// in the value pointed to by v.",
      "function_statement": "// UnmarshalFromString parses the graphson encoded str and stores the result\n// in the value pointed to by v.",
      "start_line": 27,
      "end_line": 29,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        27,
        28,
        29
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:RegisterTypeEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/error_test.go",
          "func_name": "TestErrorCodec"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestParseTag"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestTagOptionsContains"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypeCheckType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypesString"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypesCheckType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeSyntaxError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "RegisterTypeEncoder",
      "signature": "RegisterTypeEncoder (typ string, enc jsoniter.ValEncoder)",
      "ground_truth": "func RegisterTypeEncoder(typ string, enc jsoniter.ValEncoder) {\n\ttypeEncoders[typ] = enc\n}",
      "function_comment": "// RegisterTypeEncoder register type encoder for typ.",
      "function_statement": "// RegisterTypeEncoder register type encoder for typ.",
      "start_line": 20,
      "end_line": 22,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "typeEncoders = map[string]jsoniter.ValEncoder{}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/postgres.go:atIndex",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "atIndex",
      "signature": "(d *Postgres) atIndex (idx1 *Index, t2 *schema.Table, idx2 *schema.Index) error",
      "ground_truth": "func (d *Postgres) atIndex(idx1 *Index, t2 *schema.Table, idx2 *schema.Index) error {\n\topc := indexOpClass(idx1)\n\tfor _, c1 := range idx1.Columns {\n\t\tc2, ok := t2.Column(c1.Name)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"unexpected index %q column: %q\", idx1.Name, c1.Name)\n\t\t}\n\t\tpart := \u0026schema.IndexPart{C: c2}\n\t\tif v, ok := opc[c1.Name]; ok {\n\t\t\tvar op postgres.IndexOpClass\n\t\t\tif err := op.UnmarshalText([]byte(v)); err != nil {\n\t\t\t\treturn fmt.Errorf(\"unmarshalling operator-class %q for column %q: %v\", v, c1.Name, err)\n\t\t\t}\n\t\t\tpart.Attrs = append(part.Attrs, \u0026op)\n\t\t}\n\t\tidx2.AddParts(part)\n\t}\n\tif t, ok := indexType(idx1, dialect.Postgres); ok {\n\t\tidx2.AddAttrs(\u0026postgres.IndexType{T: t})\n\t}\n\tif ant, supportsInclude := idx1.Annotation, compareVersions(d.version, \"11.0.0\") \u003e= 0; ant != nil \u0026\u0026 len(ant.IncludeColumns) \u003e 0 \u0026\u0026 supportsInclude {\n\t\tcolumns := make([]*schema.Column, len(ant.IncludeColumns))\n\t\tfor i, ic := range ant.IncludeColumns {\n\t\t\tc, ok := t2.Column(ic)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"include column %q was not found for index %q\", ic, idx1.Name)\n\t\t\t}\n\t\t\tcolumns[i] = c\n\t\t}\n\t\tidx2.AddAttrs(\u0026postgres.IndexInclude{Columns: columns})\n\t}\n\tif idx1.Annotation != nil \u0026\u0026 idx1.Annotation.Where != \"\" {\n\t\tidx2.AddAttrs(\u0026postgres.IndexPredicate{P: idx1.Annotation.Where})\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 216,
      "end_line": 251,
      "file_path": "./dialect/sql/schema/postgres.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/postgres.go",
          "code_snippet": "Postgres struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\tName       string                  // index name.\n\tUnique     bool                    // uniqueness.\n\tColumns    []*Column               // actual table columns.\n\tAnnotation *entsql.IndexAnnotation // index annotation.\n\tcolumns    []string                // columns loaded from query scan.\n\trealname   string                  // real name in the database (Postgres only).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/postgres.go",
          "code_snippet": "func indexOpClass(idx *Index) map[string]string {\n\topc := make(map[string]string)\n\tif idx.Annotation == nil {\n\t\treturn opc\n\t}\n\t// If operator-class (without a name) was defined on\n\t// the annotation, map it to the single column index.\n\tif idx.Annotation.OpClass != \"\" \u0026\u0026 len(idx.Columns) == 1 {\n\t\topc[idx.Columns[0].Name] = idx.Annotation.OpClass\n\t}\n\tfor column, op := range idx.Annotation.OpClassColumns {\n\t\topc[column] = op\n\t}\n\treturn opc\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func indexType(idx *Index, d string) (string, bool) {\n\tant := idx.Annotation\n\tif ant == nil {\n\t\treturn \"\", false\n\t}\n\tif ant.Types != nil \u0026\u0026 ant.Types[d] != \"\" {\n\t\treturn ant.Types[d], true\n\t}\n\tif ant.Type != \"\" {\n\t\treturn ant.Type, true\n\t}\n\treturn \"\", false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "Postgres = \"postgres\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func compareVersions(v1, v2 string) int {\n\tpv1, ok1 := parseVersion(v1)\n\tpv2, ok2 := parseVersion(v2)\n\tif !ok1 \u0026\u0026 !ok2 {\n\t\treturn 0\n\t}\n\tif !ok1 {\n\t\treturn -1\n\t}\n\tif !ok2 {\n\t\treturn 1\n\t}\n\tif v := compare(pv1.major, pv2.major); v != 0 {\n\t\treturn v\n\t}\n\tif v := compare(pv1.minor, pv2.minor); v != 0 {\n\t\treturn v\n\t}\n\treturn compare(pv1.patch, pv2.patch)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/entsql/annotation.go",
          "code_snippet": "IndexAnnotation struct {\n\t// Prefix defines a column prefix for a single string column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"column\").\n\t//\t\tAnnotation(entsql.Prefix(100))\n\t//\n\t//\tCREATE INDEX `table_column` ON `table`(`column`(100))\n\t//\n\tPrefix uint\n\n\t// PrefixColumns defines column prefixes for a multi-column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\", \"c2\", \"c3\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.PrefixColumn(\"c1\", 100),\n\t//\t\t\tentsql.PrefixColumn(\"c2\", 200),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX `table_c1_c2_c3` ON `table`(`c1`(100), `c2`(200), `c3`)\n\t//\n\tPrefixColumns map[string]uint\n\n\t// Desc defines the DESC clause for a single column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"column\").\n\t//\t\tAnnotation(entsql.Desc())\n\t//\n\t//\tCREATE INDEX `table_column` ON `table`(`column` DESC)\n\t//\n\tDesc bool\n\n\t// DescColumns defines the DESC clause for columns in multi-column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\", \"c2\", \"c3\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.DescColumns(\"c1\", \"c2\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX `table_c1_c2_c3` ON `table`(`c1` DESC, `c2` DESC, `c3`)\n\t//\n\tDescColumns map[string]bool\n\n\t// IncludeColumns defines the INCLUDE clause for the index.\n\t// Works only in Postgres and its definition is as follows:\n\t//\n\t//\tindex.Fields(\"c1\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IncludeColumns(\"c2\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX \"table_column\" ON \"table\"(\"c1\") INCLUDE (\"c2\")\n\t//\n\tIncludeColumns []string\n\n\t// Type defines the type of the index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexType(\"FULLTEXT\"),\n\t//\t\t)\n\t//\n\t//\tCREATE FULLTEXT INDEX `table_c1` ON `table`(`c1`)\n\t//\n\tType string\n\n\t// Types is like the Type option but allows mapping an index-type per dialect.\n\t//\n\t//\tindex.Fields(\"c1\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexTypes(map[string]string{\n\t//\t\t\t\tdialect.MySQL:\t\t\"FULLTEXT\",\n\t//\t\t\t\tdialect.Postgres:\t\"GIN\",\n\t//\t\t\t}),\n\t//\t\t)\n\t//\n\tTypes map[string]string\n\n\t// OpClass defines the operator class for a single string column index.\n\t// In PostgreSQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"column\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexType(\"BRIN\"),\n\t//\t\t\tentsql.OpClass(\"int8_bloom_ops\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX \"table_column\" ON \"table\" USING BRIN (\"column\" int8_bloom_ops)\n\t//\n\tOpClass string\n\n\t// OpClassColumns defines operator-classes for a multi-column index.\n\t// In PostgreSQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\", \"c2\", \"c3\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexType(\"BRIN\"),\n\t//\t\t\tentsql.OpClassColumn(\"c1\", \"int8_bloom_ops\"),\n\t//\t\t\tentsql.OpClassColumn(\"c2\", \"int8_minmax_multi_ops(values_per_range=8)\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX \"table_column\" ON \"table\" USING BRIN (\"c1\" int8_bloom_ops, \"c2\" int8_minmax_multi_ops(values_per_range=8), \"c3\")\n\t//\n\tOpClassColumns map[string]string\n\n\t// IndexWhere allows configuring partial indexes in SQLite and PostgreSQL.\n\t// Read more: https://postgresql.org/docs/current/indexes-partial.html.\n\t//\n\t// Note that the `WHERE` clause should be defined exactly like it is\n\t// stored in the database (i.e. normal form). Read more about this on\n\t// the Atlas website: https://atlasgo.io/concepts/dev-database#diffing.\n\t//\n\t//\tindex.Fields(\"a\").\n\t//\t\tAnnotations(\n\t//\t\t\tentsql.IndexWhere(\"b AND c \u003e 0\"),\n\t//\t\t)\n\t//\tCREATE INDEX \"table_a\" ON \"table\"(\"a\") WHERE (b AND c \u003e 0)\n\tWhere string\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\t\tName   string\n\t\tUnique bool\n\t\t// Table or View that this index belongs to.\n\t\tTable *Table\n\t\tView  *View\n\t\tAttrs []Attr\n\t\tParts []*IndexPart\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "func (t *Table) Column(name string) (*Column, bool) {\n\tfor _, c := range t.Columns {\n\t\tif c.Name == name {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IndexPart struct {\n\t\t// SeqNo represents the sequence number of the key part\n\t\t// in the index.\n\t\tSeqNo int\n\t\t// Desc indicates if the key part is stored in descending\n\t\t// order. All databases use ascending order as default.\n\t\tDesc  bool\n\t\tX     Expr\n\t\tC     *Column\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "IndexOpClass struct {\n\t\tschema.Attr\n\t\tName    string                  // Name of the operator class. Qualified if schema is not the default, and required.\n\t\tDefault bool                    // If it is the default operator class.\n\t\tParams  []struct{ N, V string } // Optional parameters.\n\t}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "func (o *IndexOpClass) UnmarshalText(text []byte) error {\n\ti := bytes.IndexByte(text, '(')\n\tif i == -1 {\n\t\to.Name = string(text)\n\t\treturn nil\n\t}\n\to.Name = string(text[:i])\n\treturn o.parseParams(string(text[i:]))\n}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddParts(parts ...*IndexPart) *Index {\n\tfor _, p := range parts {\n\t\tif p.C != nil \u0026\u0026 !p.C.hasIndex(i) {\n\t\t\tp.C.Indexes = append(p.C.Indexes, i)\n\t\t}\n\t\tp.SeqNo = len(i.Parts)\n\t\ti.Parts = append(i.Parts, p)\n\t}\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddAttrs(attrs ...Attr) *Index {\n\ti.Attrs = append(i.Attrs, attrs...)\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "IndexType struct {\n\t\tschema.Attr\n\t\tT string // BTREE, BRIN, HASH, GiST, SP-GiST, GIN.\n\t}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "IndexInclude struct {\n\t\tschema.Attr\n\t\tColumns []*schema.Column\n\t}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "IndexPredicate struct {\n\t\tschema.Attr\n\t\tP string\n\t}",
          "ref_module": "postgres"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        216,
        217,
        218,
        219,
        220,
        223,
        224,
        231,
        233,
        236,
        247,
        250
      ],
      "cover_details": {
        "line_cover_rate": 0.3333333333333333
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:RegisterTypeDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/error_test.go",
          "func_name": "TestErrorCodec"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestParseTag"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestTagOptionsContains"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypeCheckType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypesString"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypesCheckType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeSyntaxError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "RegisterTypeDecoder",
      "signature": "RegisterTypeDecoder (typ string, dec jsoniter.ValDecoder)",
      "ground_truth": "func RegisterTypeDecoder(typ string, dec jsoniter.ValDecoder) {\n\ttypeDecoders[typ] = dec\n}",
      "function_comment": "// RegisterTypeDecoder register type decoder for typ.",
      "function_statement": "// RegisterTypeDecoder register type decoder for typ.",
      "start_line": 25,
      "end_line": 27,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "typeDecoders = map[string]jsoniter.ValDecoder{}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        25,
        26,
        27
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:atDefault",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atDefault",
      "signature": "(a *Atlas) atDefault (c1 *Column, c2 *schema.Column) error",
      "ground_truth": "func (a *Atlas) atDefault(c1 *Column, c2 *schema.Column) error {\n\tif c1.Default == nil || !a.sqlDialect.supportsDefault(c1) {\n\t\treturn nil\n\t}\n\tswitch x := c1.Default.(type) {\n\tcase Expr:\n\t\tif len(x) \u003e 1 \u0026\u0026 (x[0] != '(' || x[len(x)-1] != ')') {\n\t\t\tx = \"(\" + x + \")\"\n\t\t}\n\t\tc2.SetDefault(\u0026schema.RawExpr{X: string(x)})\n\tcase map[string]Expr:\n\t\td, ok := x[a.sqlDialect.Dialect()]\n\t\tif !ok {\n\t\t\treturn nil\n\t\t}\n\t\tif len(d) \u003e 1 \u0026\u0026 (d[0] != '(' || d[len(d)-1] != ')') {\n\t\t\td = \"(\" + d + \")\"\n\t\t}\n\t\tc2.SetDefault(\u0026schema.RawExpr{X: string(d)})\n\tdefault:\n\t\tswitch {\n\t\tcase c1.Type == field.TypeJSON:\n\t\t\ts, ok := c1.Default.(string)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"invalid default value for JSON column %q: %v\", c1.Name, c1.Default)\n\t\t\t}\n\t\t\tc2.SetDefault(\u0026schema.Literal{V: strings.ReplaceAll(s, \"'\", \"''\")})\n\t\tdefault:\n\t\t\t// Keep backwards compatibility with the old default value format.\n\t\t\tx := fmt.Sprint(c1.Default)\n\t\t\tif v, ok := c1.Default.(string); ok \u0026\u0026 c1.Type != field.TypeUUID \u0026\u0026 c1.Type != field.TypeTime {\n\t\t\t\t// Escape single quote by replacing each with 2.\n\t\t\t\tx = fmt.Sprintf(\"'%s'\", strings.ReplaceAll(v, \"'\", \"''\"))\n\t\t\t}\n\t\t\tc2.SetDefault(\u0026schema.RawExpr{X: x})\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1007,
      "end_line": 1045,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Expr string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "Driver interface {\n\tExecQuerier\n\t// Tx starts and returns a new transaction.\n\t// The provided context is used until the transaction is committed or rolled back.\n\tTx(context.Context) (Tx, error)\n\t// Close closes the underlying connection.\n\tClose() error\n\t// Dialect returns the dialect name of the driver.\n\tDialect() string\n}",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeJSON",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeTime",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUUID",
          "ref_module": "field"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetDefault(x Expr) *Column {\n\tc.Default = x\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "RawExpr struct {\n\t\tX string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Literal struct {\n\t\tV string\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ReplaceAll(s, old, new string) string {\n\treturn Replace(s, old, new, -1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprint(a ...any) string {\n\tp := newPrinter()\n\tp.doPrint(a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1007,
        1008,
        1009,
        1010
      ],
      "cover_details": {
        "line_cover_rate": 0.10256410256410256
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:plural",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        }
      ],
      "name": "plural",
      "signature": "plural (name string) string",
      "ground_truth": "func plural(name string) string {\n\tp := rules.Pluralize(name)\n\tif p == name {\n\t\tp += \"Slice\"\n\t}\n\treturn p\n}",
      "function_comment": "// plural a name.",
      "function_statement": "// plural a name.",
      "start_line": 153,
      "end_line": 159,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Pluralize(word string) string {\n\tif len(word) == 0 {\n\t\treturn word\n\t}\n\tif rs.isUncountable(word) {\n\t\treturn word\n\t}\n\tfor _, rule := range rs.plurals {\n\t\tif rule.exact {\n\t\t\tif word == rule.suffix {\n\t\t\t\treturn rule.replacement\n\t\t\t}\n\t\t} else {\n\t\t\tif strings.HasSuffix(word, rule.suffix) {\n\t\t\t\treturn replaceLast(word, rule.suffix, rule.replacement)\n\t\t\t}\n\t\t}\n\t}\n\treturn word + \"s\"\n}",
          "ref_module": "inflect"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        153,
        154,
        155,
        158
      ],
      "cover_details": {
        "line_cover_rate": 0.5714285714285714
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:aVColumns",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "aVColumns",
      "signature": "(a *Atlas) aVColumns (et *Table, at *schema.View) error",
      "ground_truth": "func (a *Atlas) aVColumns(et *Table, at *schema.View) error {\n\tfor _, c1 := range et.Columns {\n\t\tc2 := schema.NewColumn(c1.Name).\n\t\t\tSetNull(c1.Nullable)\n\t\tif c1.Collation != \"\" {\n\t\t\tc2.SetCollation(c1.Collation)\n\t\t}\n\t\tif c1.Comment != \"\" {\n\t\t\tc2.SetComment(c1.Comment)\n\t\t}\n\t\tif err := a.sqlDialect.atTypeC(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := a.atDefault(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tat.AddColumns(c2)\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 986,
      "end_line": 1005,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) atDefault(c1 *Column, c2 *schema.Column) error {\n\tif c1.Default == nil || !a.sqlDialect.supportsDefault(c1) {\n\t\treturn nil\n\t}\n\tswitch x := c1.Default.(type) {\n\tcase Expr:\n\t\tif len(x) \u003e 1 \u0026\u0026 (x[0] != '(' || x[len(x)-1] != ')') {\n\t\t\tx = \"(\" + x + \")\"\n\t\t}\n\t\tc2.SetDefault(\u0026schema.RawExpr{X: string(x)})\n\tcase map[string]Expr:\n\t\td, ok := x[a.sqlDialect.Dialect()]\n\t\tif !ok {\n\t\t\treturn nil\n\t\t}\n\t\tif len(d) \u003e 1 \u0026\u0026 (d[0] != '(' || d[len(d)-1] != ')') {\n\t\t\td = \"(\" + d + \")\"\n\t\t}\n\t\tc2.SetDefault(\u0026schema.RawExpr{X: string(d)})\n\tdefault:\n\t\tswitch {\n\t\tcase c1.Type == field.TypeJSON:\n\t\t\ts, ok := c1.Default.(string)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"invalid default value for JSON column %q: %v\", c1.Name, c1.Default)\n\t\t\t}\n\t\t\tc2.SetDefault(\u0026schema.Literal{V: strings.ReplaceAll(s, \"'\", \"''\")})\n\t\tdefault:\n\t\t\t// Keep backwards compatibility with the old default value format.\n\t\t\tx := fmt.Sprint(c1.Default)\n\t\t\tif v, ok := c1.Default.(string); ok \u0026\u0026 c1.Type != field.TypeUUID \u0026\u0026 c1.Type != field.TypeTime {\n\t\t\t\t// Escape single quote by replacing each with 2.\n\t\t\t\tx = fmt.Sprintf(\"'%s'\", strings.ReplaceAll(v, \"'\", \"''\"))\n\t\t\t}\n\t\t\tc2.SetDefault(\u0026schema.RawExpr{X: x})\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "View struct {\n\t\tName     string\n\t\tDef      string\n\t\tSchema   *Schema\n\t\tColumns  []*Column\n\t\tAttrs    []Attr     // Attrs and options.\n\t\tIndexes  []*Index   // Indexes on materialized view.\n\t\tTriggers []*Trigger // Triggers on the view.\n\t\tDeps     []Object   // Objects this view depends on.\n\t\tRefs     []Object   // Objects that depends on this view.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetNull(b bool) *Column {\n\tif c.Type == nil {\n\t\tc.Type = \u0026ColumnType{}\n\t}\n\tc.Type.Null = b\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewColumn(name string) *Column {\n\treturn \u0026Column{Name: name}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetCollation(v string) *Column {\n\tReplaceOrAppend(\u0026c.Attrs, \u0026Collation{V: v})\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetComment(v string) *Column {\n\tReplaceOrAppend(\u0026c.Attrs, \u0026Comment{Text: v})\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (v *View) AddColumns(columns ...*Column) *View {\n\tv.Columns = append(v.Columns, columns...)\n\treturn v\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        986,
        987,
        988,
        989,
        990,
        993,
        996,
        999,
        1002,
        1004
      ],
      "cover_details": {
        "line_cover_rate": 0.5
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        }
      ],
      "name": "Encode",
      "signature": "(enc marshalerEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc marshalerEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tmarshaler := enc.Type.UnsafeIndirect(ptr).(Marshaler)\n\tenc.encode(marshaler, stream)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 63,
      "end_line": 66,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "Marshaler interface {\n\tMarshalGraphson() ([]byte, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (enc marshalerEncoder) encode(marshaler Marshaler, stream *jsoniter.Stream) {\n\tdata, err := marshaler.MarshalGraphson()\n\tif err != nil {\n\t\tstream.Error = fmt.Errorf(\"graphson: error calling MarshalGraphson for type %s: %w\", enc.Type, err)\n\t\treturn\n\t}\n\tif !config.Valid(data) {\n\t\tstream.Error = fmt.Errorf(\"graphson: syntax error when marshaling type %s\", enc.Type)\n\t\treturn\n\t}\n\t_, stream.Error = stream.Write(data)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        63,
        64,
        65,
        66
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/struct.go:DecoratorOfStructField",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfStructField",
      "signature": "(encodeExtension) DecoratorOfStructField (enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) DecoratorOfStructField(enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder {\n\ttyp, _ := parseTag(tag)\n\tif typ == \"\" {\n\t\treturn nil\n\t}\n\n\tencoder, ok := enc.(typeEncoder)\n\tif !ok {\n\t\tencoder = typeEncoder{ValEncoder: enc}\n\t}\n\tencoder.Type = Type(typ)\n\n\treturn encoder\n}",
      "function_comment": "// DecoratorOfStructField decorates a struct field value encoder.",
      "function_statement": "// DecoratorOfStructField decorates a struct field value encoder.",
      "start_line": 10,
      "end_line": 23,
      "file_path": "./dialect/gremlin/encoding/graphson/struct.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/tags.go",
          "code_snippet": "func parseTag(tag string) (string, tagOptions) {\n\tif idx := strings.Index(tag, \",\"); idx != -1 {\n\t\treturn tag[:idx], tagOptions(tag[idx+1:])\n\t}\n\treturn tag, \"\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        10,
        11,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/mysql.go:atTypeC",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "atTypeC",
      "signature": "(d *MySQL) atTypeC (c1 *Column, c2 *schema.Column) error",
      "ground_truth": "func (d *MySQL) atTypeC(c1 *Column, c2 *schema.Column) error {\n\tif c1.SchemaType != nil \u0026\u0026 c1.SchemaType[dialect.MySQL] != \"\" {\n\t\tt, err := mysql.ParseType(strings.ToLower(c1.SchemaType[dialect.MySQL]))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc2.Type.Type = t\n\t\treturn nil\n\t}\n\tvar t schema.Type\n\tswitch c1.Type {\n\tcase field.TypeBool:\n\t\tt = \u0026schema.BoolType{T: \"boolean\"}\n\tcase field.TypeInt8:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeTinyInt}\n\tcase field.TypeUint8:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeTinyInt, Unsigned: true}\n\tcase field.TypeInt16:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeSmallInt}\n\tcase field.TypeUint16:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeSmallInt, Unsigned: true}\n\tcase field.TypeInt32:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeInt}\n\tcase field.TypeUint32:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeInt, Unsigned: true}\n\tcase field.TypeInt, field.TypeInt64:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeBigInt}\n\tcase field.TypeUint, field.TypeUint64:\n\t\tt = \u0026schema.IntegerType{T: mysql.TypeBigInt, Unsigned: true}\n\tcase field.TypeBytes:\n\t\tsize := int64(math.MaxUint16)\n\t\tif c1.Size \u003e 0 {\n\t\t\tsize = c1.Size\n\t\t}\n\t\tswitch {\n\t\tcase size \u003c= math.MaxUint8:\n\t\t\tt = \u0026schema.BinaryType{T: mysql.TypeTinyBlob}\n\t\tcase size \u003c= math.MaxUint16:\n\t\t\tt = \u0026schema.BinaryType{T: mysql.TypeBlob}\n\t\tcase size \u003c 1\u003c\u003c24:\n\t\t\tt = \u0026schema.BinaryType{T: mysql.TypeMediumBlob}\n\t\tcase size \u003c= math.MaxUint32:\n\t\t\tt = \u0026schema.BinaryType{T: mysql.TypeLongBlob}\n\t\t}\n\tcase field.TypeJSON:\n\t\tt = \u0026schema.JSONType{T: mysql.TypeJSON}\n\t\tif compareVersions(d.version, \"5.7.8\") == -1 {\n\t\t\tt = \u0026schema.BinaryType{T: mysql.TypeLongBlob}\n\t\t}\n\tcase field.TypeString:\n\t\tsize := c1.Size\n\t\tif size == 0 {\n\t\t\tsize = d.defaultSize(c1)\n\t\t}\n\t\tswitch {\n\t\tcase c1.typ == \"tinytext\", c1.typ == \"text\":\n\t\t\tt = \u0026schema.StringType{T: c1.typ}\n\t\tcase size \u003c= math.MaxUint16:\n\t\t\tt = \u0026schema.StringType{T: mysql.TypeVarchar, Size: int(size)}\n\t\tcase size == 1\u003c\u003c24-1:\n\t\t\tt = \u0026schema.StringType{T: mysql.TypeMediumText}\n\t\tdefault:\n\t\t\tt = \u0026schema.StringType{T: mysql.TypeLongText}\n\t\t}\n\tcase field.TypeFloat32, field.TypeFloat64:\n\t\tt = \u0026schema.FloatType{T: c1.scanTypeOr(mysql.TypeDouble)}\n\tcase field.TypeTime:\n\t\tt = \u0026schema.TimeType{T: c1.scanTypeOr(mysql.TypeTimestamp)}\n\t\t// In MariaDB or in MySQL \u003c v8.0.2, the TIMESTAMP column has both `DEFAULT CURRENT_TIMESTAMP`\n\t\t// and `ON UPDATE CURRENT_TIMESTAMP` if neither is specified explicitly. this behavior is\n\t\t// suppressed if the column is defined with a `DEFAULT` clause or with the `NULL` attribute.\n\t\tif _, maria := d.mariadb(); maria || compareVersions(d.version, \"8.0.2\") == -1 \u0026\u0026 c1.Default == nil {\n\t\t\tc2.SetNull(c1.Attr == \"\")\n\t\t}\n\tcase field.TypeEnum:\n\t\tt = \u0026schema.EnumType{T: mysql.TypeEnum, Values: c1.Enums}\n\tcase field.TypeUUID:\n\t\tif d.supportsUUID() {\n\t\t\t// Native support for the uuid type\n\t\t\tt = \u0026schema.UUIDType{T: mysql.TypeUUID}\n\t\t} else {\n\t\t\t// \"CHAR(X) BINARY\" is treated as \"CHAR(X) COLLATE latin1_bin\", and in MySQL \u003c 8,\n\t\t\t// and \"COLLATE utf8mb4_bin\" in MySQL \u003e= 8. However we already set the table to\n\t\t\tt = \u0026schema.StringType{T: mysql.TypeChar, Size: 36}\n\t\t\tc2.SetCollation(\"utf8mb4_bin\")\n\t\t}\n\tdefault:\n\t\tt, err := mysql.ParseType(strings.ToLower(c1.typ))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc2.Type.Type = t\n\t}\n\tc2.Type.Type = t\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 125,
      "end_line": 220,
      "file_path": "./dialect/sql/schema/mysql.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "MySQL struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "MySQL    = \"mysql\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeBool",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt8",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint8",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt16",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint16",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeBytes",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeJSON",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func compareVersions(v1, v2 string) int {\n\tpv1, ok1 := parseVersion(v1)\n\tpv2, ok2 := parseVersion(v2)\n\tif !ok1 \u0026\u0026 !ok2 {\n\t\treturn 0\n\t}\n\tif !ok1 {\n\t\treturn -1\n\t}\n\tif !ok2 {\n\t\treturn 1\n\t}\n\tif v := compare(pv1.major, pv2.major); v != 0 {\n\t\treturn v\n\t}\n\tif v := compare(pv1.minor, pv2.minor); v != 0 {\n\t\treturn v\n\t}\n\treturn compare(pv1.patch, pv2.patch)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeString",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "func (d *MySQL) defaultSize(c *Column) int64 {\n\tsize := DefaultStringLen\n\tversion, checked := d.version, \"5.7.0\"\n\tif v, ok := d.mariadb(); ok {\n\t\tversion, checked = v, \"10.2.2\"\n\t}\n\tswitch {\n\t// Version is \u003e= 5.7 for MySQL, or \u003e= 10.2.2 for MariaDB.\n\tcase compareVersions(version, checked) != -1:\n\t// Column is non-unique, or not part of any index (reaching\n\t// the error 1071).\n\tcase !c.Unique \u0026\u0026 len(c.indexes) == 0 \u0026\u0026 !c.PrimaryKey():\n\tdefault:\n\t\tsize = 191\n\t}\n\treturn size\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeFloat64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeFloat32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func (c *Column) scanTypeOr(t string) string {\n\tif c.typ != \"\" {\n\t\treturn strings.ToLower(c.typ)\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeTime",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "func (d *MySQL) mariadb() (string, bool) {\n\tidx := strings.Index(d.version, \"MariaDB\")\n\tif idx == -1 {\n\t\treturn \"\", false\n\t}\n\treturn d.version[:idx-1], true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeEnum",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUUID",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "func (d *MySQL) supportsUUID() bool {\n\t_, maria := d.mariadb()\n\treturn maria \u0026\u0026 compareVersions(d.version, \"10.7.0\") \u003e= 0\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/convert.go",
          "code_snippet": "func ParseType(raw string) (schema.Type, error) {\n\tparts, size, unsigned, err := parseColumn(raw)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch t := parts[0]; t {\n\tcase TypeBit:\n\t\treturn \u0026BitType{\n\t\t\tT:    t,\n\t\t\tSize: size,\n\t\t}, nil\n\t// bool and booleans are synonyms for\n\t// tinyint with display-width set to 1.\n\tcase TypeBool, TypeBoolean:\n\t\treturn \u0026schema.BoolType{\n\t\t\tT: TypeBool,\n\t\t}, nil\n\tcase TypeTinyInt, TypeSmallInt, TypeMediumInt, TypeInt, TypeBigInt:\n\t\tif size == 1 {\n\t\t\treturn \u0026schema.BoolType{\n\t\t\t\tT: TypeBool,\n\t\t\t}, nil\n\t\t}\n\t\t// For integer types, the size represents the display width and does not\n\t\t// constrain the range of values that can be stored in the column.\n\t\t// The storage byte-size is inferred from the type name (i.e TINYINT takes\n\t\t// a single byte).\n\t\tft := \u0026schema.IntegerType{\n\t\t\tT:        t,\n\t\t\tUnsigned: unsigned,\n\t\t}\n\t\tif attr := parts[len(parts)-1]; attr == \"zerofill\" \u0026\u0026 size != 0 {\n\t\t\tft.Attrs = []schema.Attr{\n\t\t\t\t\u0026DisplayWidth{\n\t\t\t\t\tN: size,\n\t\t\t\t},\n\t\t\t\t\u0026ZeroFill{\n\t\t\t\t\tA: attr,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn ft, nil\n\tcase TypeNumeric, TypeDecimal:\n\t\tdt := \u0026schema.DecimalType{\n\t\t\tT:        t,\n\t\t\tUnsigned: unsigned,\n\t\t}\n\t\tif len(parts) \u003e 1 \u0026\u0026 parts[1] != \"unsigned\" {\n\t\t\tif dt.Precision, err = strconv.Atoi(parts[1]); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse decimal precision %q\", parts[1])\n\t\t\t}\n\t\t}\n\t\tif len(parts) \u003e 2 \u0026\u0026 parts[2] != \"unsigned\" {\n\t\t\tif dt.Scale, err = strconv.Atoi(parts[2]); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse scale %q\", parts[1])\n\t\t\t}\n\t\t}\n\t\treturn dt, nil\n\tcase TypeFloat, TypeDouble, TypeReal:\n\t\tft := \u0026schema.FloatType{\n\t\t\tT:        t,\n\t\t\tUnsigned: unsigned,\n\t\t}\n\t\tif len(parts) \u003e 1 \u0026\u0026 parts[1] != \"unsigned\" {\n\t\t\tif ft.Precision, err = strconv.Atoi(parts[1]); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse double precision %q\", parts[1])\n\t\t\t}\n\t\t}\n\t\treturn ft, nil\n\tcase TypeBinary, TypeVarBinary:\n\t\tbt := \u0026schema.BinaryType{T: t}\n\t\tif len(parts) \u003e 1 {\n\t\t\tbt.Size = \u0026size\n\t\t}\n\t\treturn bt, nil\n\tcase TypeTinyBlob, TypeMediumBlob, TypeBlob, TypeLongBlob:\n\t\treturn \u0026schema.BinaryType{\n\t\t\tT: t,\n\t\t}, nil\n\tcase TypeChar, TypeVarchar:\n\t\treturn \u0026schema.StringType{\n\t\t\tT:    t,\n\t\t\tSize: size,\n\t\t}, nil\n\tcase TypeTinyText, TypeMediumText, TypeText, TypeLongText:\n\t\treturn \u0026schema.StringType{\n\t\t\tT: t,\n\t\t}, nil\n\tcase TypeEnum, TypeSet:\n\t\t// Parse the enum values according to the MySQL format.\n\t\t// github.com/mysql/mysql-server/blob/8.0/sql/field.cc#Field_enum::sql_type\n\t\trv := strings.TrimSuffix(strings.TrimPrefix(raw, t+\"(\"), \")\")\n\t\tif rv == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"unexpected enum type: %q\", raw)\n\t\t}\n\t\tvalues := strings.Split(rv, \"','\")\n\t\tfor i := range values {\n\t\t\tvalues[i] = strings.Trim(values[i], \"'\")\n\t\t}\n\t\tif t == TypeEnum {\n\t\t\treturn \u0026schema.EnumType{\n\t\t\t\tT:      TypeEnum,\n\t\t\t\tValues: values,\n\t\t\t}, nil\n\t\t}\n\t\treturn \u0026SetType{\n\t\t\tValues: values,\n\t\t}, nil\n\tcase TypeDate, TypeDateTime, TypeTime, TypeTimestamp, TypeYear:\n\t\ttt := \u0026schema.TimeType{\n\t\t\tT: t,\n\t\t}\n\t\tif len(parts) \u003e 1 {\n\t\t\tp, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse timestamp precision %q\", parts[1])\n\t\t\t}\n\t\t\ttt.Precision = \u0026p\n\t\t}\n\t\treturn tt, nil\n\tcase TypeJSON:\n\t\treturn \u0026schema.JSONType{\n\t\t\tT: t,\n\t\t}, nil\n\tcase TypePoint, TypeMultiPoint, TypeLineString, TypeMultiLineString, TypePolygon, TypeMultiPolygon, TypeGeometry, TypeGeoCollection, TypeGeometryCollection:\n\t\treturn \u0026schema.SpatialType{\n\t\t\tT: t,\n\t\t}, nil\n\tcase TypeUUID:\n\t\treturn \u0026schema.UUIDType{\n\t\t\tT: t,\n\t\t}, nil\n\tcase TypeInet4, TypeInet6:\n\t\treturn \u0026NetworkType{\n\t\t\tT: t,\n\t\t}, nil\n\tdefault:\n\t\treturn \u0026schema.UnsupportedType{\n\t\t\tT: t,\n\t\t}, nil\n\t}\n}",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "ColumnType struct {\n\t\tType Type\n\t\tRaw  string\n\t\tNull bool\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Type interface {\n\t\ttyp()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "BoolType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IntegerType struct {\n\t\tT        string\n\t\tUnsigned bool\n\t\tAttrs    []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeTinyInt   = \"tinyint\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeSmallInt  = \"smallint\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeInt       = \"int\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeBigInt    = \"bigint\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "BinaryType struct {\n\t\tT    string\n\t\tSize *int\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeTinyBlob   = \"tinyblob\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeBlob       = \"blob\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeMediumBlob = \"mediumblob\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeLongBlob   = \"longblob\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "JSONType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeJSON = \"json\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "StringType struct {\n\t\tT     string\n\t\tSize  int\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeVarchar    = \"varchar\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeMediumText = \"mediumtext\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeLongText   = \"longtext\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "FloatType struct {\n\t\tT         string\n\t\tUnsigned  bool\n\t\tPrecision int\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeDouble  = \"double\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "TimeType struct {\n\t\tT         string\n\t\tPrecision *int\n\t\tScale     *int\n\t\tAttrs     []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeTimestamp = \"timestamp\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetNull(b bool) *Column {\n\tif c.Type == nil {\n\t\tc.Type = \u0026ColumnType{}\n\t}\n\tc.Type.Null = b\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "EnumType struct {\n\t\tT      string   // Optional type.\n\t\tValues []string // Enum values.\n\t\tSchema *Schema  // Optional schema.\n\t\tAttrs  []Attr   // Extra attributes.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeEnum = \"enum\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "UUIDType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeUUID = \"uuid\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/driver_oss.go",
          "code_snippet": "TypeChar       = \"char\"",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetCollation(v string) *Column {\n\tReplaceOrAppend(\u0026c.Attrs, \u0026Collation{V: v})\n\treturn c\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ToLower(s string) string {\n\tisASCII, hasUpper := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasUpper = hasUpper || ('A' \u003c= c \u0026\u0026 c \u003c= 'Z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasUpper {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'A' \u003c= c \u0026\u0026 c \u003c= 'Z' {\n\t\t\t\tc += 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToLower, s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/const.go",
          "code_snippet": "MaxUint16 = 1\u003c\u003c16 - 1",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/const.go",
          "code_snippet": "MaxUint8  = 1\u003c\u003c8 - 1",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/const.go",
          "code_snippet": "MaxUint32 = 1\u003c\u003c32 - 1",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        125,
        126,
        134,
        135,
        150,
        151,
        174,
        175,
        176,
        177,
        178,
        179,
        182,
        183,
        218,
        219
      ],
      "cover_details": {
        "line_cover_rate": 0.16666666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:NewDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "NewDecoder",
      "signature": "NewDecoder (r io.Reader) Decoder",
      "ground_truth": "func NewDecoder(r io.Reader) Decoder {\n\treturn config.NewDecoder(r)\n}",
      "function_comment": "// NewDecoder create a graphson decoder.",
      "function_statement": "// NewDecoder create a graphson decoder.",
      "start_line": 37,
      "end_line": 39,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "Decoder interface {\n\tDecode(any) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        37,
        38,
        39
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/cmd/internal/printer/printer.go:node",
      "testcases": [
        {
          "package": "entgo.io/ent/cmd/internal/printer",
          "rel_file_path": "cmd/internal/printer/printer_test.go",
          "func_name": "TestPrinter_Print"
        }
      ],
      "name": "node",
      "signature": "(p Config) node (t *gen.Type)",
      "ground_truth": "func (p Config) node(t *gen.Type) {\n\tvar (\n\t\tb      strings.Builder\n\t\tid     []*gen.Field\n\t\ttable  = tablewriter.NewWriter(\u0026b)\n\t\theader = []string{\"Field\", \"Type\", \"Unique\", \"Optional\", \"Nillable\", \"Default\", \"UpdateDefault\", \"Immutable\", \"StructTag\", \"Validators\", \"Comment\"}\n\t)\n\tb.WriteString(t.Name + \":\\n\")\n\ttable.Options(\n\t\ttablewriter.WithHeaderConfig(tw.CellConfig{\n\t\t\tPadding: tw.CellPadding{\n\t\t\t\tGlobal: tw.Padding{\n\t\t\t\t\tLeft:  tw.Space,\n\t\t\t\t\tRight: tw.Space,\n\t\t\t\t},\n\t\t\t},\n\t\t\tFormatting: tw.CellFormatting{\n\t\t\t\tAutoFormat: tw.Off,\n\t\t\t},\n\t\t}),\n\t\ttablewriter.WithRendition(tw.Rendition{\n\t\t\tSymbols: tw.NewSymbols(tw.StyleASCII),\n\t\t}),\n\t)\n\ttable.Header(header)\n\tvar alignment = make([]tw.Align, 0)\n\tif t.ID != nil {\n\t\tid = append(id, t.ID)\n\t}\n\tfor _, f := range append(id, t.Fields...) {\n\t\tv := reflect.ValueOf(*f)\n\t\trow := make([]string, len(header))\n\t\tfor i := 0; i \u003c len(row)-1; i++ {\n\t\t\tfield := v.FieldByNameFunc(func(name string) bool {\n\t\t\t\t// The first field is mapped from \"Name\" to \"Field\".\n\t\t\t\treturn name == \"Name\" \u0026\u0026 i == 0 || name == header[i]\n\t\t\t})\n\t\t\trow[i] = fmt.Sprint(field.Interface())\n\t\t\t_, err := strconv.Atoi(row[i])\n\t\t\tif err == nil {\n\t\t\t\talignment = append(alignment, tw.AlignRight)\n\t\t\t} else {\n\t\t\t\talignment = append(alignment, tw.AlignLeft)\n\t\t\t}\n\t\t}\n\t\trow[len(row)-1] = f.Comment()\n\t\t_ = table.Append(row)\n\t\ttable.Options(\n\t\t\ttablewriter.WithRowAlignmentConfig(\n\t\t\t\ttw.CellAlignment{PerColumn: alignment},\n\t\t\t),\n\t\t)\n\t}\n\terr := table.Render()\n\tif err != nil {\n\t\treturn\n\t}\n\t// Create new table for edges\n\ttable = tablewriter.NewWriter(\u0026b)\n\ttable.Options(\n\t\ttablewriter.WithHeaderConfig(tw.CellConfig{\n\t\t\tFormatting: tw.CellFormatting{AutoFormat: tw.Off},\n\t\t\tPadding: tw.CellPadding{\n\t\t\t\tGlobal: tw.Padding{\n\t\t\t\t\tLeft:  tw.Space,\n\t\t\t\t\tRight: tw.Space,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\ttablewriter.WithRendition(tw.Rendition{\n\t\t\tSymbols: tw.NewSymbols(tw.StyleASCII),\n\t\t}),\n\t)\n\ttable.Header([]string{\"Edge\", \"Type\", \"Inverse\", \"BackRef\", \"Relation\", \"Unique\", \"Optional\", \"Comment\"})\n\thasEdges := false\n\tfor _, e := range t.Edges {\n\t\thasEdges = true\n\t\terr := table.Append([]string{\n\t\t\te.Name,\n\t\t\te.Type.Name,\n\t\t\tstrconv.FormatBool(e.IsInverse()),\n\t\t\te.Inverse,\n\t\t\te.Rel.Type.String(),\n\t\t\tstrconv.FormatBool(e.Unique),\n\t\t\tstrconv.FormatBool(e.Optional),\n\t\t\te.Comment(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tif hasEdges {\n\t\terr := table.Render()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tio.WriteString(p, strings.ReplaceAll(b.String(), \"\\n\", \"\\n\\t\")+\"\\n\")\n}",
      "function_comment": "// node returns description of a type. The format of the description is:\n//\n//\tType:\n//\t\t\t\u003cFields Table\u003e\n//\n//\t\t\t\u003cEdges Table\u003e",
      "function_statement": "// node returns description of a type. The format of the description is:\n//\n//\tType:\n//\t\t\t\u003cFields Table\u003e\n//\n//\t\t\t\u003cEdges Table\u003e",
      "start_line": 43,
      "end_line": 141,
      "file_path": "./cmd/internal/printer/printer.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/cmd/internal/printer/printer.go",
          "code_snippet": "Config struct {\n\tio.Writer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Field struct {\n\t\tcfg *Config\n\t\tdef *load.Field\n\t\ttyp *Type\n\t\t// Name is the name of this field in the database schema.\n\t\tName string\n\t\t// Type holds the type information of the field.\n\t\tType *field.TypeInfo\n\t\t// Unique indicate if this field is a unique field.\n\t\tUnique bool\n\t\t// Optional indicates is this field is optional on create.\n\t\tOptional bool\n\t\t// Nillable indicates that this field can be null in the\n\t\t// database and pointer in the generated entities.\n\t\tNillable bool\n\t\t// Default indicates if this field has a default value for creation.\n\t\tDefault bool\n\t\t// Enums information for enum fields.\n\t\tEnums []Enum\n\t\t// UpdateDefault indicates if this field has a default value for update.\n\t\tUpdateDefault bool\n\t\t// Immutable indicates is this field cannot be updated.\n\t\tImmutable bool\n\t\t// StructTag of the field. default to \"json\".\n\t\tStructTag string\n\t\t// Validators holds the number of validators the field have.\n\t\tValidators int\n\t\t// Position info of the field.\n\t\tPosition *load.Position\n\t\t// UserDefined indicates that this field was defined explicitly by the user in\n\t\t// the schema. Unlike the default id field, which is defined by the generator.\n\t\tUserDefined bool\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// referenced foreign-key.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (f Field) Comment() string {\n\tif f.def != nil {\n\t\treturn f.def.Comment\n\t}\n\treturn \"\"\n}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) IsInverse() bool { return e.Inverse != \"\" }",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (r Rel) String() string {\n\ts := \"Unknown\"\n\tswitch r {\n\tcase O2O:\n\t\ts = \"O2O\"\n\tcase O2M:\n\t\ts = \"O2M\"\n\tcase M2O:\n\t\ts = \"M2O\"\n\tcase M2M:\n\t\ts = \"M2M\"\n\t}\n\treturn s\n}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Relation struct {\n\t\t// Type holds the relation type of the edge.\n\t\tType Rel\n\t\t// Table holds the relation table for this edge.\n\t\t// For O2O and O2M, it's the table name of the type we're this edge point to.\n\t\t// For M2O, this is the owner's type, and for M2M this is the join table.\n\t\tTable string\n\t\t// Columns holds the relation column(s) in the relation table above.\n\t\t// For O2M, M2O and O2O, it contains one element with the column name.\n\t\t// For M2M edges, it contains two columns defined in the join table with\n\t\t// the same order as defined in the schema: (owner_id, reference_id).\n\t\tColumns []string\n\t\t// foreign-key information for non-M2M edges.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": "gen"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) Comment() string {\n\tif e.def != nil {\n\t\treturn e.def.Comment\n\t}\n\treturn \"\"\n}",
          "ref_module": "gen"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func NewWriter(w io.Writer) *Table {\n\tt := NewTable(w)\n\tif t.logger != nil {\n\t\tt.logger.Debug(\"NewWriter created buffered Table\")\n\t}\n\treturn t\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Options(opts ...Option) *Table {\n\n\t// add logger\n\tif t.logger == nil {\n\t\tt.logger = ll.New(\"table\").Handler(lh.NewTextHandler(t.trace))\n\t}\n\n\t// loop through options\n\tfor _, opt := range opts {\n\t\topt(t)\n\t}\n\n\t// force debugging mode if set\n\t// This should  be move away form WithDebug\n\tif t.config.Debug == true {\n\t\tt.logger.Enable()\n\t\tt.logger.Resume()\n\t} else {\n\t\tt.logger.Disable()\n\t\tt.logger.Suspend()\n\t}\n\n\t// Get additional system information for debugging\n\tgoVersion := runtime.Version()\n\tgoOS := runtime.GOOS\n\tgoArch := runtime.GOARCH\n\tnumCPU := runtime.NumCPU()\n\n\tt.logger.Infof(\"Environment: LC_CTYPE=%s, LANG=%s, TERM=%s\", os.Getenv(\"LC_CTYPE\"), os.Getenv(\"LANG\"), os.Getenv(\"TERM\"))\n\tt.logger.Infof(\"Go Runtime: Version=%s, OS=%s, Arch=%s, CPUs=%d\", goVersion, goOS, goArch, numCPU)\n\n\t// send logger to renderer\n\t// this will overwrite the default logger\n\tt.renderer.Logger(t.logger)\n\treturn t\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithHeaderConfig(config tw.CellConfig) Option {\n\treturn func(target *Table) {\n\t\ttarget.config.Header = config\n\t\tif target.logger != nil {\n\t\t\ttarget.logger.Debug(\"Option: WithHeaderConfig applied to Table.\")\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellConfig struct {\n\tFormatting   CellFormatting // Cell formatting options\n\tPadding      CellPadding    // Padding configuration\n\tCallbacks    CellCallbacks  // Callback functions (unused)\n\tFilter       CellFilter     // Function to filter cell content (renamed from Filter Filter)\n\tAlignment    CellAlignment  // Alignment configuration for cells\n\tColMaxWidths CellWidth      // Per-column maximum width overrides\n\n\t// Deprecated: use Alignment.PerColumn instead. Will be removed in a future version.\n\t// will be removed soon\n\tColumnAligns []Align // Per-column alignment overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellPadding struct {\n\tGlobal    Padding   // Default padding applied to all cells\n\tPerColumn []Padding // Column-specific padding overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/types.go",
          "code_snippet": "Padding struct {\n\tLeft   string\n\tRight  string\n\tTop    string\n\tBottom string\n\n\t// Overwrite forces tablewriter to use this padding configuration exactly as specified,\n\t// even when empty. When false (default), empty Padding fields will inherit defaults.\n\t//\n\t// For explicit no-padding, use the PaddingNone constant instead of setting Overwrite.\n\tOverwrite bool\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "Space   = \" \"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellFormatting struct {\n\tAutoWrap  int // Wrapping behavior (e.g., WrapTruncate, WrapNormal)\n\tMergeMode int // Bitmask for merge behavior (e.g., MergeHorizontal, MergeVertical)\n\n\t// Changed form bool to State\n\t// See https://github.com/olekukonko/tablewriter/issues/261\n\tAutoFormat State // Enables automatic formatting (e.g., title case for headers)\n\n\t// Deprecated: kept for compatibility\n\t// will be removed soon\n\tAlignment Align // Text alignment within the cell (e.g., Left, Right, Center)\n\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "Off     State = Fail",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithRendition(rendition tw.Rendition) Option {\n\treturn func(target *Table) {\n\t\tif target.renderer == nil {\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Warn(\"Option: WithRendition: No renderer set on table.\")\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif ru, ok := target.renderer.(tw.Renditioning); ok {\n\t\t\tru.Rendition(rendition)\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Debugf(\"Option: WithRendition: Applied to renderer via Renditioning.SetRendition(): %+v\", rendition)\n\t\t\t}\n\t\t} else {\n\t\t\tif target.logger != nil {\n\t\t\t\ttarget.logger.Warnf(\"Option: WithRendition: Current renderer type %T does not implement tw.Renditioning. Rendition may not be applied as expected.\", target.renderer)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/renderer.go",
          "code_snippet": "Rendition struct {\n\tBorders   Border   // Border visibility settings\n\tSymbols   Symbols  // Symbols used for table drawing\n\tSettings  Settings // Rendering behavior settings\n\tStreaming bool\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/symbols.go",
          "code_snippet": "func NewSymbols(style BorderStyle) Symbols {\n\tswitch style {\n\tcase StyleASCII:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameASCII,\n\t\t\trow:    \"-\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t\t\"+\", \"+\", \"+\",\n\t\t\t},\n\t\t\theaderLeft:  \"+\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \"+\",\n\t\t}\n\tcase StyleLight, StyleDefault:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLight,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┼\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌\", \"┬\", \"┐\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"└\", \"┴\", \"┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"┼\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleHeavy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHeavy,\n\t\t\trow:    \"━\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╋\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┏\", \"┳\", \"┓\",\n\t\t\t\t\"┣\", \"╋\", \"┫\",\n\t\t\t\t\"┗\", \"┻\", \"┛\",\n\t\t\t},\n\t\t\theaderLeft:  \"┣\",\n\t\t\theaderMid:   \"╋\",\n\t\t\theaderRight: \"┫\",\n\t\t}\n\tcase StyleDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDouble,\n\t\t\trow:    \"═\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╬\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔\", \"╦\", \"╗\",\n\t\t\t\t\"╠\", \"╬\", \"╣\",\n\t\t\t\t\"╚\", \"╩\", \"╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╠\",\n\t\t\theaderMid:   \"╬\",\n\t\t\theaderRight: \"╣\",\n\t\t}\n\tcase StyleDoubleLong:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDoubleLong,\n\t\t\trow:    \"═╡═\",\n\t\t\tcolumn: \"╞\",\n\t\t\tcenter: \"╪\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔═╡\", \"═╤═\", \"╡═╗\",\n\t\t\t\t\"╟ \", \"╪ \", \" ╢\",\n\t\t\t\t\"╚═╡\", \"═╧═\", \"╡═╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╟═╡\",\n\t\t\theaderMid:   \"╪═╡\",\n\t\t\theaderRight: \"╡═╢\",\n\t\t}\n\tcase StyleLightHeavy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLightHeavy,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╂\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┍\", \"┯\", \"┑\",\n\t\t\t\t\"┝\", \"╂\", \"┥\",\n\t\t\t\t\"┕\", \"┷\", \"┙\",\n\t\t\t},\n\t\t\theaderLeft:  \"┝\",\n\t\t\theaderMid:   \"╂\",\n\t\t\theaderRight: \"┥\",\n\t\t}\n\tcase StyleHeavyLight:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHeavyLight,\n\t\t\trow:    \"━\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┎\", \"┰\", \"┒\",\n\t\t\t\t\"┠\", \"┿\", \"┨\",\n\t\t\t\t\"┖\", \"┸\", \"┚\",\n\t\t\t},\n\t\t\theaderLeft:  \"┠\",\n\t\t\theaderMid:   \"┿\",\n\t\t\theaderRight: \"┨\",\n\t\t}\n\tcase StyleLightDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameLightDouble,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╫\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╓\", \"╥\", \"╖\",\n\t\t\t\t\"╟\", \"╫\", \"╢\",\n\t\t\t\t\"╙\", \"╨\", \"╜\",\n\t\t\t},\n\t\t\theaderLeft:  \"╟\",\n\t\t\theaderMid:   \"╫\",\n\t\t\theaderRight: \"╢\",\n\t\t}\n\tcase StyleDoubleLight:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDoubleLight,\n\t\t\trow:    \"═\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"╪\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╒\", \"╤\", \"╕\",\n\t\t\t\t\"╞\", \"╪\", \"╡\",\n\t\t\t\t\"╘\", \"╧\", \"╛\",\n\t\t\t},\n\t\t\theaderLeft:  \"╞\",\n\t\t\theaderMid:   \"╪\",\n\t\t\theaderRight: \"╡\",\n\t\t}\n\tcase StyleRounded:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameRounded,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"┼\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╭\", \"┬\", \"╮\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"╰\", \"┴\", \"╯\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"┼\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleMarkdown:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMarkdown,\n\t\t\trow:    \"-\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"|\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"|\", \"|\", \"|\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t},\n\t\t\theaderLeft:  \"|\",\n\t\t\theaderMid:   \"|\",\n\t\t\theaderRight: \"|\",\n\t\t}\n\tcase StyleGraphical:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameGraphical,\n\t\t\trow:    \"┄┄\",\n\t\t\tcolumn: \"┆\",\n\t\t\tcenter: \"╂\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌┄\", \"┄┄\", \"┄┐\",\n\t\t\t\t\"┆ \", \"╂ \", \" ┆\",\n\t\t\t\t\"└┄\", \"┄┄\", \"┄┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├┄\",\n\t\t\theaderMid:   \"╂┄\",\n\t\t\theaderRight: \"┄┤\",\n\t\t}\n\tcase StyleMerger:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMerger,\n\t\t\trow:    \"─\",\n\t\t\tcolumn: \"│\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┌\", \"┬\", \"┐\",\n\t\t\t\t\"├\", \"┼\", \"┤\",\n\t\t\t\t\"└\", \"┴\", \"┘\",\n\t\t\t},\n\t\t\theaderLeft:  \"├\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \"┤\",\n\t\t}\n\tcase StyleDotted:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDotted,\n\t\t\trow:    \"·\",\n\t\t\tcolumn: \":\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\".\", \"·\", \".\",\n\t\t\t\t\":\", \"+\", \":\",\n\t\t\t\t\"'\", \"·\", \"'\",\n\t\t\t},\n\t\t\theaderLeft:  \":\",\n\t\t\theaderMid:   \"+\",\n\t\t\theaderRight: \":\",\n\t\t}\n\tcase StyleArrow:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArrow,\n\t\t\trow:    \"→\",\n\t\t\tcolumn: \"↓\",\n\t\t\tcenter: \"↔\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"↗\", \"↑\", \"↖\",\n\t\t\t\t\"→\", \"↔\", \"←\",\n\t\t\t\t\"↘\", \"↓\", \"↙\",\n\t\t\t},\n\t\t\theaderLeft:  \"→\",\n\t\t\theaderMid:   \"↔\",\n\t\t\theaderRight: \"←\",\n\t\t}\n\tcase StyleStarry:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameStarry,\n\t\t\trow:    \"★\",\n\t\t\tcolumn: \"☆\",\n\t\t\tcenter: \"✶\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"✧\", \"✯\", \"✧\",\n\t\t\t\t\"✦\", \"✶\", \"✦\",\n\t\t\t\t\"✧\", \"✯\", \"✧\",\n\t\t\t},\n\t\t\theaderLeft:  \"✦\",\n\t\t\theaderMid:   \"✶\",\n\t\t\theaderRight: \"✦\",\n\t\t}\n\tcase StyleHearts:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHearts,\n\t\t\trow:    \"♥\",\n\t\t\tcolumn: \"❤\",\n\t\t\tcenter: \"✚\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"❥\", \"♡\", \"❥\",\n\t\t\t\t\"❣\", \"✚\", \"❣\",\n\t\t\t\t\"❦\", \"♡\", \"❦\",\n\t\t\t},\n\t\t\theaderLeft:  \"❣\",\n\t\t\theaderMid:   \"✚\",\n\t\t\theaderRight: \"❣\",\n\t\t}\n\tcase StyleCircuit:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCircuit,\n\t\t\trow:    \"=\",\n\t\t\tcolumn: \"||\",\n\t\t\tcenter: \"\u003c\u003e\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"/*\", \"##\", \"*/\",\n\t\t\t\t\"//\", \"\u003c\u003e\", \"\\\\\",\n\t\t\t\t\"\\\\*\", \"##\", \"*/\",\n\t\t\t},\n\t\t\theaderLeft:  \"//\",\n\t\t\theaderMid:   \"\u003c\u003e\",\n\t\t\theaderRight: \"\\\\\",\n\t\t}\n\tcase StyleNature:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameNature,\n\t\t\trow:    \"~\",\n\t\t\tcolumn: \"|\",\n\t\t\tcenter: \"❀\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🌱\", \"🌿\", \"🌱\",\n\t\t\t\t\"🍃\", \"❀\", \"🍃\",\n\t\t\t\t\"🌻\", \"🌾\", \"🌻\",\n\t\t\t},\n\t\t\theaderLeft:  \"🍃\",\n\t\t\theaderMid:   \"❀\",\n\t\t\theaderRight: \"🍃\",\n\t\t}\n\tcase StyleArtistic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArtistic,\n\t\t\trow:    \"▬\",\n\t\t\tcolumn: \"▐\",\n\t\t\tcenter: \"⬔\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◈\", \"◊\", \"◈\",\n\t\t\t\t\"◀\", \"⬔\", \"▶\",\n\t\t\t\t\"◭\", \"▣\", \"◮\",\n\t\t\t},\n\t\t\theaderLeft:  \"◀\",\n\t\t\theaderMid:   \"⬔\",\n\t\t\theaderRight: \"▶\",\n\t\t}\n\tcase Style8Bit:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleName8Bit,\n\t\t\trow:    \"■\",\n\t\t\tcolumn: \"█\",\n\t\t\tcenter: \"♦\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔\", \"▲\", \"╗\",\n\t\t\t\t\"◄\", \"♦\", \"►\",\n\t\t\t\t\"╚\", \"▼\", \"╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"◄\",\n\t\t\theaderMid:   \"♦\",\n\t\t\theaderRight: \"►\",\n\t\t}\n\tcase StyleChaos:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameChaos,\n\t\t\trow:    \"≈\",\n\t\t\tcolumn: \"§\",\n\t\t\tcenter: \"☯\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌘\", \"∞\", \"⌥\",\n\t\t\t\t\"⚡\", \"☯\", \"♞\",\n\t\t\t\t\"⌂\", \"∆\", \"◊\",\n\t\t\t},\n\t\t\theaderLeft:  \"⚡\",\n\t\t\theaderMid:   \"☯\",\n\t\t\theaderRight: \"♞\",\n\t\t}\n\tcase StyleDots:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameDots,\n\t\t\trow:    \"·\",\n\t\t\tcolumn: \" \",\n\t\t\tcenter: \"·\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"·\", \"·\", \"·\",\n\t\t\t\t\" \", \"·\", \" \",\n\t\t\t\t\"·\", \"·\", \"·\",\n\t\t\t},\n\t\t\theaderLeft:  \" \",\n\t\t\theaderMid:   \"·\",\n\t\t\theaderRight: \" \",\n\t\t}\n\tcase StyleBlocks:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameBlocks,\n\t\t\trow:    \"▀\",\n\t\t\tcolumn: \"█\",\n\t\t\tcenter: \"█\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"▛\", \"▀\", \"▜\",\n\t\t\t\t\"▌\", \"█\", \"▐\",\n\t\t\t\t\"▙\", \"▄\", \"▟\",\n\t\t\t},\n\t\t\theaderLeft:  \"▌\",\n\t\t\theaderMid:   \"█\",\n\t\t\theaderRight: \"▐\",\n\t\t}\n\tcase StyleZen:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameZen,\n\t\t\trow:    \"~\",\n\t\t\tcolumn: \" \",\n\t\t\tcenter: \"☯\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\" \", \"♨\", \" \",\n\t\t\t\t\" \", \"☯\", \" \",\n\t\t\t\t\" \", \"♨\", \" \",\n\t\t\t},\n\t\t\theaderLeft:  \" \",\n\t\t\theaderMid:   \"☯\",\n\t\t\theaderRight: \" \",\n\t\t}\n\tcase StyleVintage:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameVintage,\n\t\t\trow:    \"────\",\n\t\t\tcolumn: \" ⁜ \",\n\t\t\tcenter: \" ✠ \",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔══\", \"══╤\", \"══╗\",\n\t\t\t\t\" ⁜ \", \" ✠ \", \" ⁜ \",\n\t\t\t\t\"╚══\", \"══╧\", \"══╝\",\n\t\t\t},\n\t\t\theaderLeft:  \" ├─\",\n\t\t\theaderMid:   \"─✠─\",\n\t\t\theaderRight: \"─┤ \",\n\t\t}\n\tcase StyleSketch:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameSketch,\n\t\t\trow:    \"~~\",\n\t\t\tcolumn: \"/\",\n\t\t\tcenter: \"+\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\" .\", \"~~\", \". \",\n\t\t\t\t\"/ \", \"+ \", \" \\\\\",\n\t\t\t\t\" '\", \"~~\", \"` \",\n\t\t\t},\n\t\t\theaderLeft:  \"/~\",\n\t\t\theaderMid:   \"+~\",\n\t\t\theaderRight: \"~\\\\\",\n\t\t}\n\tcase StyleArrowDouble:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArrowDouble,\n\t\t\trow:    \"»»\",\n\t\t\tcolumn: \"⫸\",\n\t\t\tcenter: \"✿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌜»\", \"»»\", \"»⌝\",\n\t\t\t\t\"⫸ \", \"✿ \", \" ⫷\",\n\t\t\t\t\"⌞»\", \"»»\", \"»⌟\",\n\t\t\t},\n\t\t\theaderLeft:  \"⫸»\",\n\t\t\theaderMid:   \"✿»\",\n\t\t\theaderRight: \"»⫷\",\n\t\t}\n\tcase StyleCelestial:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCelestial,\n\t\t\trow:    \"✦✧\",\n\t\t\tcolumn: \"☽\",\n\t\t\tcenter: \"☀\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"✧✦\", \"✦✧\", \"✦✧\",\n\t\t\t\t\"☽ \", \"☀ \", \" ☾\",\n\t\t\t\t\"✧✦\", \"✦✧\", \"✦✧\",\n\t\t\t},\n\t\t\theaderLeft:  \"☽✦\",\n\t\t\theaderMid:   \"☀✧\",\n\t\t\theaderRight: \"✦☾\",\n\t\t}\n\tcase StyleCyber:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameCyber,\n\t\t\trow:    \"═╦═\",\n\t\t\tcolumn: \"║\",\n\t\t\tcenter: \"╬\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"╔╦═\", \"╦═╦\", \"═╦╗\",\n\t\t\t\t\"║ \", \"╬ \", \" ║\",\n\t\t\t\t\"╚╩═\", \"╩═╩\", \"═╩╝\",\n\t\t\t},\n\t\t\theaderLeft:  \"╠╦═\",\n\t\t\theaderMid:   \"╬═╦\",\n\t\t\theaderRight: \"═╦╣\",\n\t\t}\n\tcase StyleRunic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameRunic,\n\t\t\trow:    \"ᛖᛖᛖ\",\n\t\t\tcolumn: \"ᛟ\",\n\t\t\tcenter: \"ᛞ\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"ᛏᛖᛖ\", \"ᛖᛖᛖ\", \"ᛖᛖᛏ\",\n\t\t\t\t\"ᛟ \", \"ᛞ \", \" ᛟ\",\n\t\t\t\t\"ᛗᛖᛖ\", \"ᛖᛖᛖ\", \"ᛖᛖᛗ\",\n\t\t\t},\n\t\t\theaderLeft:  \"ᛟᛖᛖ\",\n\t\t\theaderMid:   \"ᛞᛖᛖ\",\n\t\t\theaderRight: \"ᛖᛖᛟ\",\n\t\t}\n\tcase StyleIndustrial:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameIndustrial,\n\t\t\trow:    \"━╋━\",\n\t\t\tcolumn: \"┃\",\n\t\t\tcenter: \"╋\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"┏╋━\", \"╋━╋\", \"━╋┓\",\n\t\t\t\t\"┃ \", \"╋ \", \" ┃\",\n\t\t\t\t\"┗╋━\", \"╋━╋\", \"━╋┛\",\n\t\t\t},\n\t\t\theaderLeft:  \"┣╋━\",\n\t\t\theaderMid:   \"╋━╋\",\n\t\t\theaderRight: \"━╋┫\",\n\t\t}\n\tcase StyleInk:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameInk,\n\t\t\trow:    \"﹌\",\n\t\t\tcolumn: \"︱\",\n\t\t\tcenter: \"✒\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"﹏\", \"﹌\", \"﹏\",\n\t\t\t\t\"︱ \", \"✒ \", \" ︱\",\n\t\t\t\t\"﹋\", \"﹌\", \"﹋\",\n\t\t\t},\n\t\t\theaderLeft:  \"︱﹌\",\n\t\t\theaderMid:   \"✒﹌\",\n\t\t\theaderRight: \"﹌︱\",\n\t\t}\n\tcase StyleArcade:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameArcade,\n\t\t\trow:    \"■□\",\n\t\t\tcolumn: \"▐\",\n\t\t\tcenter: \"◉\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"▞■\", \"■□\", \"□▚\",\n\t\t\t\t\"▐ \", \"◉ \", \" ▐\",\n\t\t\t\t\"▚■\", \"■□\", \"□▞\",\n\t\t\t},\n\t\t\theaderLeft:  \"▐■\",\n\t\t\theaderMid:   \"◉□\",\n\t\t\theaderRight: \"■▐\",\n\t\t}\n\tcase StyleBlossom:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameBlossom,\n\t\t\trow:    \"🌸\",\n\t\t\tcolumn: \"🌿\",\n\t\t\tcenter: \"✿\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🌷\", \"🌸\", \"🌷\",\n\t\t\t\t\"🌿\", \"✿\", \"🌿\",\n\t\t\t\t\"🌱\", \"🌸\", \"🌱\",\n\t\t\t},\n\t\t\theaderLeft:  \"🌿🌸\",\n\t\t\theaderMid:   \"✿🌸\",\n\t\t\theaderRight: \"🌸🌿\",\n\t\t}\n\tcase StyleFrosted:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameFrosted,\n\t\t\trow:    \"░▒░\",\n\t\t\tcolumn: \"▓\",\n\t\t\tcenter: \"◍\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◌░▒\", \"░▒░\", \"▒░◌\",\n\t\t\t\t\"▓ \", \"◍ \", \" ▓\",\n\t\t\t\t\"◌░▒\", \"░▒░\", \"▒░◌\",\n\t\t\t},\n\t\t\theaderLeft:  \"▓░▒\",\n\t\t\theaderMid:   \"◍▒░\",\n\t\t\theaderRight: \"░▒▓\",\n\t\t}\n\tcase StyleMosaic:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameMosaic,\n\t\t\trow:    \"▰▱\",\n\t\t\tcolumn: \"⧉\",\n\t\t\tcenter: \"⬖\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⧠▰\", \"▰▱\", \"▱⧠\",\n\t\t\t\t\"⧉ \", \"⬖ \", \" ⧉\",\n\t\t\t\t\"⧅▰\", \"▰▱\", \"▱⧅\",\n\t\t\t},\n\t\t\theaderLeft:  \"⧉▰\",\n\t\t\theaderMid:   \"⬖▱\",\n\t\t\theaderRight: \"▰⧉\",\n\t\t}\n\tcase StyleUFO:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameUFO,\n\t\t\trow:    \"⊚⊚\",\n\t\t\tcolumn: \"☽\",\n\t\t\tcenter: \"☢\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌖⊚\", \"⊚⊚\", \"⊚⌖\",\n\t\t\t\t\"☽ \", \"☢ \", \" ☽\",\n\t\t\t\t\"⌗⊚\", \"⊚⊚\", \"⊚⌗\",\n\t\t\t},\n\t\t\theaderLeft:  \"☽⊚\",\n\t\t\theaderMid:   \"☢⊚\",\n\t\t\theaderRight: \"⊚☽\",\n\t\t}\n\tcase StyleSteampunk:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameSteampunk,\n\t\t\trow:    \"═⚙═\",\n\t\t\tcolumn: \"⛓️\",\n\t\t\tcenter: \"⚔️\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"🜂⚙═\", \"═⚙═\", \"═⚙🜂\",\n\t\t\t\t\"⛓️ \", \"⚔️ \", \" ⛓️\",\n\t\t\t\t\"🜄⚙═\", \"═⚙═\", \"═⚙🜄\",\n\t\t\t},\n\t\t\theaderLeft:  \"⛓️⚙═\",\n\t\t\theaderMid:   \"⚔️═⚙\",\n\t\t\theaderRight: \"═⚙⛓️\",\n\t\t}\n\tcase StyleGalaxy:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameGalaxy,\n\t\t\trow:    \"≋≋\",\n\t\t\tcolumn: \"♆\",\n\t\t\tcenter: \"☄️\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"⌇≋\", \"≋≋\", \"≋⌇\",\n\t\t\t\t\"♆ \", \"☄️ \", \" ♆\",\n\t\t\t\t\"⌇≋\", \"≋≋\", \"≋⌇\",\n\t\t\t},\n\t\t\theaderLeft:  \"♆≋\",\n\t\t\theaderMid:   \"☄️≋\",\n\t\t\theaderRight: \"≋♆\",\n\t\t}\n\tcase StyleJazz:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameJazz,\n\t\t\trow:    \"♬♬\",\n\t\t\tcolumn: \"▷\",\n\t\t\tcenter: \"★\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"♔♬\", \"♬♬\", \"♬♔\",\n\t\t\t\t\"▷ \", \"★ \", \" ◁\",\n\t\t\t\t\"♕♬\", \"♬♬\", \"♬♕\",\n\t\t\t},\n\t\t\theaderLeft:  \"▷♬\",\n\t\t\theaderMid:   \"★♬\",\n\t\t\theaderRight: \"♬◁\",\n\t\t}\n\tcase StylePuzzle:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNamePuzzle,\n\t\t\trow:    \"▣▣\",\n\t\t\tcolumn: \"◫\",\n\t\t\tcenter: \"✚\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◩▣\", \"▣▣\", \"▣◪\",\n\t\t\t\t\"◫ \", \"✚ \", \" ◫\",\n\t\t\t\t\"◧▣\", \"▣▣\", \"▣◨\",\n\t\t\t},\n\t\t\theaderLeft:  \"◫▣\",\n\t\t\theaderMid:   \"✚▣\",\n\t\t\theaderRight: \"▣◫\",\n\t\t}\n\tcase StyleHypno:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameHypno,\n\t\t\trow:    \"◜◝\",\n\t\t\tcolumn: \"꩜\",\n\t\t\tcenter: \"⃰\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"◟◜\", \"◜◝\", \"◝◞\",\n\t\t\t\t\"꩜ \", \"⃰ \", \" ꩜\",\n\t\t\t\t\"◟◜\", \"◜◝\", \"◝◞\",\n\t\t\t},\n\t\t\theaderLeft:  \"꩜◜\",\n\t\t\theaderMid:   \"⃰◝\",\n\t\t\theaderRight: \"◜꩜\",\n\t\t}\n\tdefault:\n\t\treturn \u0026Glyphs{\n\t\t\tname:   StyleNameNothing,\n\t\t\trow:    \"\",\n\t\t\tcolumn: \"\",\n\t\t\tcenter: \"\",\n\t\t\tcorners: [9]string{\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\",\n\t\t\t},\n\t\t\theaderLeft:  \"\",\n\t\t\theaderMid:   \"\",\n\t\t\theaderRight: \"\",\n\t\t}\n\t}\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/symbols.go",
          "code_snippet": "StyleASCII",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Header(elements ...any) {\n\tt.ensureInitialized()\n\tt.logger.Debugf(\"Header() method called with raw variadic elements: %v (len %d). Streaming: %v, Started: %v\", elements, len(elements), t.config.Stream.Enable, t.hasPrinted)\n\n\t// just forget\n\tif t.config.Behavior.Header.Hide.Enabled() {\n\t\treturn\n\t}\n\n\t// add come common default\n\tif t.config.Header.Formatting.AutoFormat == tw.Unknown {\n\t\tt.config.Header.Formatting.AutoFormat = tw.On\n\t}\n\n\tif t.config.Stream.Enable \u0026\u0026 t.hasPrinted {\n\t\t//  Streaming Path\n\t\tactualCellsToProcess := t.processVariadic(elements)\n\t\theadersAsStrings, err := t.convertCellsToStrings(actualCellsToProcess, t.config.Header)\n\t\tif err != nil {\n\t\t\tt.logger.Errorf(\"Header(): Failed to convert header elements to strings for streaming: %v\", err)\n\t\t\theadersAsStrings = []string{} // Use empty on error\n\t\t}\n\t\terrStream := t.streamRenderHeader(headersAsStrings) // streamRenderHeader handles padding to streamNumCols internally\n\t\tif errStream != nil {\n\t\t\tt.logger.Errorf(\"Error rendering streaming header: %v\", errStream)\n\t\t}\n\t\treturn\n\t}\n\n\t//  Batch Path\n\tprocessedElements := t.processVariadic(elements)\n\tt.logger.Debugf(\"Header() (Batch): Effective cells to process: %v\", processedElements)\n\n\theadersAsStrings, err := t.convertCellsToStrings(processedElements, t.config.Header)\n\tif err != nil {\n\t\tt.logger.Errorf(\"Header() (Batch): Failed to convert to strings: %v\", err)\n\t\tt.headers = [][]string{} // Set to empty on error\n\t\treturn\n\t}\n\n\t// prepareContent uses t.config.Header for AutoFormat and MaxWidth constraints.\n\t// It processes based on the number of columns in headersAsStrings.\n\tpreparedHeaderLines := t.prepareContent(headersAsStrings, t.config.Header)\n\tt.headers = preparedHeaderLines // Store directly. Padding to t.maxColumns() will happen in prepareContexts.\n\n\tt.logger.Debugf(\"Header set (batch mode), lines stored: %d. First line if exists: %v\", len(t.headers), func() []string {\n\t\tif len(t.headers) \u003e 0 {\n\t\t\treturn t.headers[0]\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}())\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/types.go",
          "code_snippet": "Align string",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "AlignRight   Align = \"right\"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/tw.go",
          "code_snippet": "AlignLeft    Align = \"left\"",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Append(rows ...interface{}) error { // rows is already []interface{}\n\tt.ensureInitialized()\n\n\tif t.config.Stream.Enable \u0026\u0026 t.hasPrinted {\n\t\tt.logger.Debugf(\"Append() called in streaming mode with %d items for a single row\", len(rows))\n\t\tvar rowItemForStream interface{}\n\t\tif len(rows) == 1 {\n\t\t\trowItemForStream = rows[0]\n\t\t} else {\n\t\t\trowItemForStream = rows // Pass the slice of items if multiple args\n\t\t}\n\t\tif err := t.streamAppendRow(rowItemForStream); err != nil {\n\t\t\tt.logger.Errorf(\"Error rendering streaming row: %v\", err)\n\t\t\treturn fmt.Errorf(\"failed to stream append row: %w\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\t//Batch Mode Logic\n\tt.logger.Debugf(\"Append (Batch) received %d arguments: %v\", len(rows), rows)\n\n\tvar cellsSource interface{}\n\tif len(rows) == 1 {\n\t\tcellsSource = rows[0]\n\t\tt.logger.Debug(\"Append (Batch): Single argument provided. Treating it as the source for row cells.\")\n\t} else {\n\t\tcellsSource = rows // 'rows' is []interface{} containing all arguments\n\t\tt.logger.Debug(\"Append (Batch): Multiple arguments provided. Treating them directly as cells for one row.\")\n\t}\n\n\tif err := t.appendSingle(cellsSource); err != nil {\n\t\tt.logger.Errorf(\"Append (Batch) failed for cellsSource %v: %v\", cellsSource, err)\n\t\treturn err\n\t}\n\n\tt.logger.Debugf(\"Append (Batch) completed for one row, total rows in table: %d\", len(t.rows))\n\treturn nil\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/option.go",
          "code_snippet": "func WithRowAlignmentConfig(alignment tw.CellAlignment) Option {\n\treturn func(target *Table) {\n\t\ttarget.config.Row.Alignment = alignment\n\t\tif target.logger != nil {\n\t\t\ttarget.logger.Debugf(\"Option: WithRowAlignmentConfig applied to Table: %+v\", alignment)\n\t\t}\n\t}\n}",
          "ref_module": "tablewriter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tw/cell.go",
          "code_snippet": "CellAlignment struct {\n\tGlobal    Align   // Default alignment applied to all cells\n\tPerColumn []Align // Column-specific alignment overrides\n}",
          "ref_module": "tw"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/olekukonko/tablewriter@v1.0.8/tablewriter.go",
          "code_snippet": "func (t *Table) Render() error {\n\treturn t.render()\n}",
          "ref_module": "tablewriter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/builder.go",
          "code_snippet": "Builder struct {\n\taddr *Builder // of receiver, to detect copies by value\n\n\t// External users should never get direct access to this buffer, since\n\t// the slice at some point will be converted to a string using unsafe, also\n\t// data between len(buf) and cap(buf) might be uninitialized.\n\tbuf []byte\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) WriteString(s string) (int, error) {\n\tb.copyCheck()\n\tb.buf = append(b.buf, s...)\n\treturn len(s), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) FieldByNameFunc(match func(string) bool) Value {\n\tif f, ok := toRType(v.typ()).FieldByNameFunc(match); ok {\n\t\treturn v.FieldByIndex(f.Index)\n\t}\n\treturn Value{}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprint(a ...any) string {\n\tp := newPrinter()\n\tp.doPrint(a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strconv/atoi.go",
          "code_snippet": "func Atoi(s string) (int, error) {\n\tconst fnAtoi = \"Atoi\"\n\n\tsLen := len(s)\n\tif intSize == 32 \u0026\u0026 (0 \u003c sLen \u0026\u0026 sLen \u003c 10) ||\n\t\tintSize == 64 \u0026\u0026 (0 \u003c sLen \u0026\u0026 sLen \u003c 19) {\n\t\t// Fast path for small integers that fit int type.\n\t\ts0 := s\n\t\tif s[0] == '-' || s[0] == '+' {\n\t\t\ts = s[1:]\n\t\t\tif len(s) \u003c 1 {\n\t\t\t\treturn 0, syntaxError(fnAtoi, s0)\n\t\t\t}\n\t\t}\n\n\t\tn := 0\n\t\tfor _, ch := range []byte(s) {\n\t\t\tch -= '0'\n\t\t\tif ch \u003e 9 {\n\t\t\t\treturn 0, syntaxError(fnAtoi, s0)\n\t\t\t}\n\t\t\tn = n*10 + int(ch)\n\t\t}\n\t\tif s0[0] == '-' {\n\t\t\tn = -n\n\t\t}\n\t\treturn n, nil\n\t}\n\n\t// Slow path for invalid, big, or underscored integers.\n\ti64, err := ParseInt(s, 10, 0)\n\tif nerr, ok := err.(*NumError); ok {\n\t\tnerr.Func = fnAtoi\n\t}\n\treturn int(i64), err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strconv/atob.go",
          "code_snippet": "func FormatBool(b bool) string {\n\tif b {\n\t\treturn \"true\"\n\t}\n\treturn \"false\"\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func WriteString(w Writer, s string) (n int, err error) {\n\tif sw, ok := w.(StringWriter); ok {\n\t\treturn sw.WriteString(s)\n\t}\n\treturn w.Write([]byte(s))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ReplaceAll(s, old, new string) string {\n\treturn Replace(s, old, new, -1)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/builder.go",
          "code_snippet": "func (b *Builder) String() string {\n\treturn unsafe.String(unsafe.SliceData(b.buf), len(b.buf))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        134,
        135,
        136,
        140
      ],
      "cover_details": {
        "line_cover_rate": 0.8787878787878788
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "Decode",
      "signature": "(dec sliceDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec sliceDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdec.decode(ptr, iter)\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\titer.Error = fmt.Errorf(\"decoding slice %s: %w\", dec.sliceType, iter.Error)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 87,
      "end_line": 92,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "sliceDecoder struct {\n\tsliceType reflect2.SliceType\n\telemDec   jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (dec sliceDecoder) decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tsliceType := dec.sliceType\n\tif iter.ReadNil() {\n\t\tsliceType.UnsafeSetNil(ptr)\n\t\treturn\n\t}\n\n\tsliceType.UnsafeSet(ptr, sliceType.UnsafeMakeSlice(0, 0))\n\tvar length int\n\n\titer.ReadArrayCB(func(iter *jsoniter.Iterator) bool {\n\t\tidx := length\n\t\tlength++\n\t\tsliceType.UnsafeGrow(ptr, length)\n\t\telem := sliceType.UnsafeGetIndex(ptr, idx)\n\t\tdec.elemDec.Decode(elem, iter)\n\t\treturn iter.Error == nil\n\t})\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        87,
        88,
        89,
        90,
        91
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/internal/ws/conn.go:sender",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectClosure"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestSimpleQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestQueryCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestBadResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestAuthentication"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestPartialResponse"
        }
      ],
      "name": "sender",
      "signature": "(c *Conn) sender () error",
      "ground_truth": "func (c *Conn) sender() error {\n\tpinger := time.NewTicker(pingPeriod)\n\tdefer pinger.Stop()\n\n\t// closing connection terminates receiver\n\tdefer c.conn.Close()\n\n\tfor {\n\t\tselect {\n\t\tcase r := \u003c-c.send:\n\t\t\t// ensure write completes within a window\n\t\t\tc.conn.SetWriteDeadline(time.Now().Add(writeWait))\n\n\t\t\t// fetch next message writer\n\t\t\tw, err := c.conn.NextWriter(websocket.BinaryMessage)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"getting message writer: %w\", err)\n\t\t\t}\n\n\t\t\t// write mime header\n\t\t\tif _, err := w.Write(encoding.GraphSON3Mime); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing mime header: %w\", err)\n\t\t\t}\n\n\t\t\t// write request body\n\t\t\tif _, err := io.Copy(w, r); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing request: %w\", err)\n\t\t\t}\n\n\t\t\t// finish message write\n\t\t\tif err := w.Close(); err != nil {\n\t\t\t\treturn fmt.Errorf(\"closing message writer: %w\", err)\n\t\t\t}\n\t\tcase \u003c-c.ctx.Done():\n\t\t\t// connection closing\n\t\t\treturn c.conn.WriteControl(\n\t\t\t\twebsocket.CloseMessage,\n\t\t\t\twebsocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"),\n\t\t\t\ttime.Time{},\n\t\t\t)\n\t\tcase \u003c-pinger.C:\n\t\t\t// periodic connection keepalive\n\t\t\tif err := c.conn.WriteControl(websocket.PingMessage, nil, time.Now().Add(writeWait)); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 177,
      "end_line": 224,
      "file_path": "./dialect/gremlin/internal/ws/conn.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Conn struct {\n\t\t// Underlying websocket connection.\n\t\tconn *websocket.Conn\n\n\t\t// Credentials for basic authentication.\n\t\tuser, pass string\n\n\t\t// Goroutine tracking.\n\t\tctx context.Context\n\t\tgrp *errgroup.Group\n\n\t\t// Channel of outbound requests.\n\t\tsend chan io.Reader\n\n\t\t// Map of in flight requests.\n\t\tinflight sync.Map\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "pingPeriod = (pongWait * 9) / 10",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "writeWait = 5 * time.Second",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/mime.go",
          "code_snippet": "GraphSON3Mime = NewMime(\"application/vnd.gremlin-v3.0+json\")",
          "ref_module": "encoding"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) Close() error {\n\treturn c.conn.Close()\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) SetWriteDeadline(t time.Time) error {\n\tc.writeDeadline = t\n\treturn nil\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) NextWriter(messageType int) (io.WriteCloser, error) {\n\tvar mw messageWriter\n\tif err := c.beginMessage(\u0026mw, messageType); err != nil {\n\t\treturn nil, err\n\t}\n\tc.writer = \u0026mw\n\tif c.newCompressionWriter != nil \u0026\u0026 c.enableWriteCompression \u0026\u0026 isData(messageType) {\n\t\tw := c.newCompressionWriter(c.writer, c.compressionLevel)\n\t\tmw.compress = true\n\t\tc.writer = w\n\t}\n\treturn c.writer, nil\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "BinaryMessage = 2",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) WriteControl(messageType int, data []byte, deadline time.Time) error {\n\tif !isControl(messageType) {\n\t\treturn errBadWriteOpCode\n\t}\n\tif len(data) \u003e maxControlFramePayloadSize {\n\t\treturn errInvalidControlFrame\n\t}\n\n\tb0 := byte(messageType) | finalBit\n\tb1 := byte(len(data))\n\tif !c.isServer {\n\t\tb1 |= maskBit\n\t}\n\n\tbuf := make([]byte, 0, maxFrameHeaderSize+maxControlFramePayloadSize)\n\tbuf = append(buf, b0, b1)\n\n\tif c.isServer {\n\t\tbuf = append(buf, data...)\n\t} else {\n\t\tkey := newMaskKey()\n\t\tbuf = append(buf, key[:]...)\n\t\tbuf = append(buf, data...)\n\t\tmaskBytes(key, 0, buf[6:])\n\t}\n\n\td := 1000 * time.Hour\n\tif !deadline.IsZero() {\n\t\td = deadline.Sub(time.Now())\n\t\tif d \u003c 0 {\n\t\t\treturn errWriteTimeout\n\t\t}\n\t}\n\n\ttimer := time.NewTimer(d)\n\tselect {\n\tcase \u003c-c.mu:\n\t\ttimer.Stop()\n\tcase \u003c-timer.C:\n\t\treturn errWriteTimeout\n\t}\n\tdefer func() { c.mu \u003c- struct{}{} }()\n\n\tc.writeErrMu.Lock()\n\terr := c.writeErr\n\tc.writeErrMu.Unlock()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.conn.SetWriteDeadline(deadline)\n\t_, err = c.conn.Write(buf)\n\tif err != nil {\n\t\treturn c.writeFatal(err)\n\t}\n\tif messageType == CloseMessage {\n\t\tc.writeFatal(ErrCloseSent)\n\t}\n\treturn err\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "CloseMessage = 8",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func FormatCloseMessage(closeCode int, text string) []byte {\n\tif closeCode == CloseNoStatusReceived {\n\t\t// Return empty message because it's illegal to send\n\t\t// CloseNoStatusReceived. Return non-nil value in case application\n\t\t// checks for nil.\n\t\treturn []byte{}\n\t}\n\tbuf := make([]byte, 2+len(text))\n\tbinary.BigEndian.PutUint16(buf, uint16(closeCode))\n\tcopy(buf[2:], text)\n\treturn buf\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "CloseNormalClosure           = 1000",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "PingMessage = 9",
          "ref_module": "websocket"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/tick.go",
          "code_snippet": "func NewTicker(d Duration) *Ticker {\n\tif d \u003c= 0 {\n\t\tpanic(\"non-positive interval for NewTicker\")\n\t}\n\t// Give the channel a 1-element time buffer.\n\t// If the client falls behind while reading, we drop ticks\n\t// on the floor until the client catches up.\n\tc := make(chan Time, 1)\n\tt := (*Ticker)(unsafe.Pointer(newTimer(when(d), int64(d), sendTime, c, syncTimer(c))))\n\tt.C = c\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/tick.go",
          "code_snippet": "func (t *Ticker) Stop() {\n\tif !t.initTicker {\n\t\t// This is misuse, and the same for time.Timer would panic,\n\t\t// but this didn't always panic, and we keep it not panicking\n\t\t// to avoid breaking old programs. See issue 21874.\n\t\treturn\n\t}\n\tstopTimer((*Timer)(unsafe.Pointer(t)))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Add(d Duration) Time {\n\tdsec := int64(d / 1e9)\n\tnsec := t.nsec() + int32(d%1e9)\n\tif nsec \u003e= 1e9 {\n\t\tdsec++\n\t\tnsec -= 1e9\n\t} else if nsec \u003c 0 {\n\t\tdsec--\n\t\tnsec += 1e9\n\t}\n\tt.wall = t.wall\u0026^nsecMask | uint64(nsec) // update nsec\n\tt.addSec(dsec)\n\tif t.wall\u0026hasMonotonic != 0 {\n\t\tte := t.ext + int64(d)\n\t\tif d \u003c 0 \u0026\u0026 te \u003e t.ext || d \u003e 0 \u0026\u0026 te \u003c t.ext {\n\t\t\t// Monotonic clock reading now out of range; degrade to wall-only.\n\t\t\tt.stripMono()\n\t\t} else {\n\t\t\tt.ext = te\n\t\t}\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := runtimeNow()\n\tif mono == 0 {\n\t\treturn Time{uint64(nsec), sec + unixToInternal, Local}\n\t}\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func Copy(dst Writer, src Reader) (written int64, err error) {\n\treturn copyBuffer(dst, src, nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/tick.go",
          "code_snippet": "Ticker struct {\n\tC          \u003c-chan Time // The channel on which the ticks are delivered.\n\tinitTicker bool\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        197,
        202,
        207,
        210,
        211,
        212,
        213,
        214,
        215,
        216
      ],
      "cover_details": {
        "line_cover_rate": 0.5416666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/type.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        }
      ],
      "name": "Decode",
      "signature": "(dec typerDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec typerDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdec.typeDecoder.typeChecker = dec.typerOf(ptr).GraphsonType()\n\tdec.typeDecoder.Decode(ptr, iter)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 152,
      "end_line": 155,
      "file_path": "./dialect/gremlin/encoding/graphson/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "typerDecoder struct {\n\ttypeDecoder\n\ttyperOf func(unsafe.Pointer) Typer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Typer interface {\n\tGraphsonType() Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "func (dec typeDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tif iter.WhatIsNext() != jsoniter.ObjectValue {\n\t\tdec.ValDecoder.Decode(ptr, iter)\n\t\treturn\n\t}\n\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tvar tv typeValue\n\tif err := jsoniter.Unmarshal(data, \u0026tv); err != nil {\n\t\titer.ReportError(\"unmarshal type value\", err.Error())\n\t\treturn\n\t}\n\n\tif err := dec.CheckType(tv.Type); err != nil {\n\t\titer.ReportError(\"check type\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(tv.Value)\n\tdefer config.ReturnIterator(it)\n\n\tdec.ValDecoder.Decode(ptr, it)\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode value\", it.Error.Error())\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        152,
        153,
        154,
        155
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:planInspect",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "planInspect",
      "signature": "(a *Atlas) planInspect (ctx context.Context, conn dialect.ExecQuerier, name string, tables []*Table) (*migrate.Plan, error)",
      "ground_truth": "func (a *Atlas) planInspect(ctx context.Context, conn dialect.ExecQuerier, name string, tables []*Table) (*migrate.Plan, error) {\n\tcurrent, err := a.atDriver.InspectSchema(ctx, a.schema, \u0026schema.InspectOptions{\n\t\tTables: func() (t []string) {\n\t\t\tfor i := range tables {\n\t\t\t\tt = append(t, tables[i].Name)\n\t\t\t}\n\t\t\treturn t\n\t\t}(),\n\t\t// Ent supports table-level inspection only.\n\t\tMode: schema.InspectSchemas | schema.InspectTables,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar types []string\n\tif a.universalID {\n\t\ttypes, err = a.loadTypes(ctx, conn)\n\t\tif err != nil \u0026\u0026 !errors.Is(err, errTypeTableNotFound) {\n\t\t\treturn nil, err\n\t\t}\n\t\ta.types = types\n\t}\n\trealm, err := a.StateReader(tables...).ReadState(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar desired *schema.Schema\n\tswitch {\n\tcase realm != nil \u0026\u0026 len(realm.Schemas) \u003e 0:\n\t\tdesired = realm.Schemas[0]\n\tdefault:\n\t\tdesired = \u0026schema.Schema{}\n\t}\n\tdesired.Name, desired.Attrs = current.Name, current.Attrs\n\treturn a.diff(ctx, name, current, desired, a.types[len(types):], noQualifierOpt)\n}",
      "function_comment": "// planInspect creates the current state by inspecting the connected database, computing the current state of the Ent schema\n// and proceeds to diff the changes to create a migration plan.",
      "function_statement": "// planInspect creates the current state by inspecting the connected database, computing the current state of the Ent schema\n// and proceeds to diff the changes to create a migration plan.",
      "start_line": 670,
      "end_line": 705,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "ExecQuerier interface {\n\t// Exec executes a query that does not return records. For example, in SQL, INSERT or UPDATE.\n\t// It scans the result into the pointer v. For SQL drivers, it is dialect/sql.Result.\n\tExec(ctx context.Context, query string, args, v any) error\n\t// Query executes a query that returns rows, typically a SELECT in SQL.\n\t// It scans the result into the pointer v. For SQL drivers, it is *dialect/sql.Rows.\n\tQuery(ctx context.Context, query string, args, v any) error\n}",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) loadTypes(ctx context.Context, conn dialect.ExecQuerier) ([]string, error) {\n\t// Fetch pre-existing type allocations.\n\texists, err := a.sqlDialect.tableExist(ctx, conn, TypeTable)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif !exists {\n\t\treturn nil, errTypeTableNotFound\n\t}\n\trows := \u0026entsql.Rows{}\n\tquery, args := entsql.Dialect(a.dialect).\n\t\tSelect(\"type\").From(entsql.Table(TypeTable)).OrderBy(entsql.Asc(\"id\")).Query()\n\tif err := conn.Query(ctx, query, args, rows); err != nil {\n\t\treturn nil, fmt.Errorf(\"query types table: %w\", err)\n\t}\n\tdefer rows.Close()\n\tvar types []string\n\tif err := entsql.ScanSlice(rows, \u0026types); err != nil {\n\t\treturn nil, err\n\t}\n\treturn types, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "errTypeTableNotFound = errors.New(\"ent_type table not found\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) StateReader(tables ...*Table) migrate.StateReaderFunc {\n\treturn func(ctx context.Context) (*schema.Realm, error) {\n\t\tif a.sqlDialect == nil {\n\t\t\tdrv, err := a.entDialect(ctx, a.driver)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ta.sqlDialect = drv\n\t\t}\n\t\tif a.hashSymbols {\n\t\t\ta.setupTables(tables)\n\t\t}\n\t\treturn a.realm(tables)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) diff(ctx context.Context, name string, current, desired *schema.Schema, newTypes []string, opts ...migrate.PlanOption) (*migrate.Plan, error) {\n\tchanges, err := (\u0026diffDriver{a.atDriver, a.diffHooks}).SchemaDiff(current, desired, a.diffOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfiltered := make([]schema.Change, 0, len(changes))\n\tfor _, c := range changes {\n\t\tswitch c.(type) {\n\t\t// Select only table creation and modification. The reason we may encounter this, even though specific tables\n\t\t// are passed to Inspect, is if the MySQL system variable 'lower_case_table_names' is set to 1. In such a case,\n\t\t// the given tables will be returned from inspection because MySQL compares case-insensitive, but they won't\n\t\t// match when compare them in code.\n\t\tcase *schema.AddTable, *schema.ModifyTable:\n\t\t\tfiltered = append(filtered, c)\n\t\t}\n\t}\n\tif a.indent != \"\" {\n\t\topts = append(opts, func(opts *migrate.PlanOptions) {\n\t\t\topts.Indent = a.indent\n\t\t})\n\t}\n\tplan, err := a.atDriver.PlanChanges(ctx, name, filtered, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(newTypes) \u003e 0 {\n\t\tplan.Changes = append(plan.Changes, \u0026migrate.Change{\n\t\t\tCmd:     a.sqlDialect.atTypeRangeSQL(newTypes...),\n\t\t\tComment: fmt.Sprintf(\"add pk ranges for %s tables\", strings.Join(newTypes, \",\")),\n\t\t})\n\t}\n\treturn plan, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "noQualifierOpt = func(opts *migrate.PlanOptions) {\n\tvar noQualifier string\n\topts.SchemaQualifier = \u0026noQualifier\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Plan struct {\n\t\t// Version and Name of the plan. Provided by the user or auto-generated.\n\t\tVersion, Name string\n\n\t\t// Reversible describes if the changeset is reversible.\n\t\tReversible bool\n\n\t\t// Transactional describes if the changeset is transactional.\n\t\tTransactional bool\n\n\t\t// Changes defines the list of changeset in the plan.\n\t\tChanges []*Change\n\n\t\t// Delimiter to use for separating statements.\n\t\tDelimiter string\n\n\t\t// Directives to add to the file (not associated with any statements) besides the delimiter.\n\t\t// For example, atlas:txtar, atlas:txmode, etc.\n\t\tDirectives []string\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/inspect.go",
          "code_snippet": "Inspector interface {\n\t\t// InspectSchema returns the schema description by its name. An empty name means the\n\t\t// \"attached schema\" (e.g. SCHEMA() in MySQL or CURRENT_SCHEMA() in PostgreSQL).\n\t\t// A NotExistError error is returned if the schema does not exist in the database.\n\t\tInspectSchema(ctx context.Context, name string, opts *InspectOptions) (*Schema, error)\n\n\t\t// InspectRealm returns the description of the connected database.\n\t\tInspectRealm(ctx context.Context, opts *InspectRealmOption) (*Realm, error)\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/inspect.go",
          "code_snippet": "InspectOptions struct {\n\t\t// Mode defines the amount of information returned by InspectSchema.\n\t\t// If zero, InspectSchema inspects whole resources in the schema.\n\t\tMode InspectMode\n\n\t\t// Tables to inspect. Empty means all tables in the schema.\n\t\tTables []string\n\n\t\t// Include defines a list of glob patterns used to filter resources for inspection.\n\t\t// If non-empty, only resources matching at least one of the patterns are considered.\n\t\t// After applying inclusion, the Exclude list is used to filter out resources.\n\t\t// The syntax used by the different drivers is implemented as follows:\n\t\t//\n\t\t//\tt   // include objects named 't'.\n\t\t//\t*   // include all schema objects (tables, views, etc.).\n\t\t//\tt.c // include column, index and foreign-key named 'c' in table 't'.\n\t\t//\tt.* // the last item defines the filtering; all resources under 't' are included.\n\t\t//\t*.c // the last item defines the filtering; all resources named 'c' are included in all tables.\n\t\t//\t*.* // the last item defines the filtering; all resources under all tables are included.\n\t\t//\n\t\t// If Include is empty, all resources are considered unless excluded.\n\t\tInclude []string\n\n\t\t// Exclude defines a list of glob patterns used to filter resources from inspection.\n\t\t// The syntax used by the different drivers is implemented as follows:\n\t\t//\n\t\t//\tt   // exclude table 't'.\n\t\t//\t*   // exclude all tables.\n\t\t//\tt.c // exclude column, index and foreign-key named 'c' in table 't'.\n\t\t//\tt.* // the last item defines the filtering; all resources under 't' are excluded.\n\t\t//\t*.c // the last item defines the filtering; all resourced named 'c' are excluded in all tables.\n\t\t//\t*.* // the last item defines the filtering; all resourced under all tables are excluded.\n\t\t//\n\t\tExclude []string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/inspect.go",
          "code_snippet": "InspectTables",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/inspect.go",
          "code_snippet": "InspectSchemas InspectMode = 1 \u003c\u003c iota",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func (f StateReaderFunc) ReadState(ctx context.Context) (*schema.Realm, error) {\n\treturn f(ctx)\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Realm struct {\n\t\tSchemas []*Schema\n\t\tAttrs   []Attr\n\t\tObjects []Object // Realm-level objects (e.g., users or extensions).\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/wrap.go",
          "code_snippet": "func Is(err, target error) bool {\n\tif err == nil || target == nil {\n\t\treturn err == target\n\t}\n\n\tisComparable := reflectlite.TypeOf(target).Comparable()\n\treturn is(err, target, isComparable)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        681,
        684,
        685,
        686,
        687,
        690,
        692,
        693,
        696,
        697,
        698,
        699,
        700,
        701,
        703,
        704
      ],
      "cover_details": {
        "line_cover_rate": 0.6388888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "reflectMap",
      "signature": "(efaceDecoder) reflectMap (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (efaceDecoder) reflectMap(data []byte) (reflect2.Type, error) {\n\tvar key, elem any\n\tif err := Unmarshal(\n\t\tbytes.Replace(data, []byte(mapType), []byte(listType), 1),\n\t\t\u0026[...]*any{\u0026key, \u0026elem},\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot unmarshal first map item: %w\", err)\n\t}\n\n\tif key == nil {\n\t\treturn reflect2.TypeOf(map[any]any{}), nil\n\t} else if elem == nil {\n\t\treturn nil, errors.New(\"expect map element, but found only key\")\n\t}\n\n\tmapType := reflect.MapOf(reflect.TypeOf(key), reflect.TypeOf(elem))\n\treturn reflect2.Type2(mapType), nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 136,
      "end_line": 153,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "func Unmarshal(data []byte, v any) error {\n\treturn config.Unmarshal(data, v)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func Type2(type1 reflect.Type) Type {\n\tif type1 == nil {\n\t\treturn nil\n\t}\n\treturn ConfigUnsafe.Type2(type1)\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/bytes/bytes.go",
          "code_snippet": "func Replace(s, old, new []byte, n int) []byte {\n\tm := 0\n\tif n != 0 {\n\t\t// Compute number of replacements.\n\t\tm = Count(s, old)\n\t}\n\tif m == 0 {\n\t\t// Just return a copy.\n\t\treturn append([]byte(nil), s...)\n\t}\n\tif n \u003c 0 || m \u003c n {\n\t\tn = m\n\t}\n\n\t// Apply replacements to buffer.\n\tt := make([]byte, len(s)+n*(len(new)-len(old)))\n\tw := 0\n\tstart := 0\n\tfor i := 0; i \u003c n; i++ {\n\t\tj := start\n\t\tif len(old) == 0 {\n\t\t\tif i \u003e 0 {\n\t\t\t\t_, wid := utf8.DecodeRune(s[start:])\n\t\t\t\tj += wid\n\t\t\t}\n\t\t} else {\n\t\t\tj += Index(s[start:], old)\n\t\t}\n\t\tw += copy(t[w:], s[start:j])\n\t\tw += copy(t[w:], new)\n\t\tstart = j + len(old)\n\t}\n\tw += copy(t[w:], s[start:])\n\treturn t[0:w]\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/map_swiss.go",
          "code_snippet": "func MapOf(key, elem Type) Type {\n\tktyp := key.common()\n\tetyp := elem.common()\n\n\tif ktyp.Equal == nil {\n\t\tpanic(\"reflect.MapOf: invalid key type \" + stringFor(ktyp))\n\t}\n\n\t// Look in cache.\n\tckey := cacheKey{Map, ktyp, etyp, 0}\n\tif mt, ok := lookupCache.Load(ckey); ok {\n\t\treturn mt.(Type)\n\t}\n\n\t// Look in known types.\n\ts := \"map[\" + stringFor(ktyp) + \"]\" + stringFor(etyp)\n\tfor _, tt := range typesByString(s) {\n\t\tmt := (*mapType)(unsafe.Pointer(tt))\n\t\tif mt.Key == ktyp \u0026\u0026 mt.Elem == etyp {\n\t\t\tti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))\n\t\t\treturn ti.(Type)\n\t\t}\n\t}\n\n\tgroup, slot := groupAndSlotOf(key, elem)\n\n\t// Make a map type.\n\t// Note: flag values must match those used in the TMAP case\n\t// in ../cmd/compile/internal/reflectdata/reflect.go:writeType.\n\tvar imap any = (map[unsafe.Pointer]unsafe.Pointer)(nil)\n\tmt := **(**mapType)(unsafe.Pointer(\u0026imap))\n\tmt.Str = resolveReflectName(newName(s, \"\", false, false))\n\tmt.TFlag = 0\n\tmt.Hash = fnv1(etyp.Hash, 'm', byte(ktyp.Hash\u003e\u003e24), byte(ktyp.Hash\u003e\u003e16), byte(ktyp.Hash\u003e\u003e8), byte(ktyp.Hash))\n\tmt.Key = ktyp\n\tmt.Elem = etyp\n\tmt.Group = group.common()\n\tmt.Hasher = func(p unsafe.Pointer, seed uintptr) uintptr {\n\t\treturn typehash(ktyp, p, seed)\n\t}\n\tmt.GroupSize = mt.Group.Size()\n\tmt.SlotSize = slot.Size()\n\tmt.ElemOff = slot.Field(1).Offset\n\tmt.Flags = 0\n\tif needKeyUpdate(ktyp) {\n\t\tmt.Flags |= abi.SwissMapNeedKeyUpdate\n\t}\n\tif hashMightPanic(ktyp) {\n\t\tmt.Flags |= abi.SwissMapHashMightPanic\n\t}\n\tif ktyp.Size_ \u003e abi.SwissMapMaxKeyBytes {\n\t\tmt.Flags |= abi.SwissMapIndirectKey\n\t}\n\tif etyp.Size_ \u003e abi.SwissMapMaxKeyBytes {\n\t\tmt.Flags |= abi.SwissMapIndirectElem\n\t}\n\tmt.PtrToThis = 0\n\n\tti, _ := lookupCache.LoadOrStore(ckey, toRType(\u0026mt.Type))\n\treturn ti.(Type)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        151,
        152
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:withoutForeignKeys",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrateWithoutForeignKeys"
        }
      ],
      "name": "withoutForeignKeys",
      "signature": "withoutForeignKeys (next Differ) Differ",
      "ground_truth": "func withoutForeignKeys(next Differ) Differ {\n\treturn DiffFunc(func(current, desired *schema.Schema) ([]schema.Change, error) {\n\t\tchanges, err := next.Diff(current, desired)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor _, c := range changes {\n\t\t\tswitch c := c.(type) {\n\t\t\tcase *schema.AddTable:\n\t\t\t\tc.T.ForeignKeys = nil\n\t\t\tcase *schema.ModifyTable:\n\t\t\t\tc.T.ForeignKeys = nil\n\t\t\t\tfiltered := make([]schema.Change, 0, len(c.Changes))\n\t\t\t\tfor _, change := range c.Changes {\n\t\t\t\t\tswitch change.(type) {\n\t\t\t\t\tcase *schema.AddForeignKey, *schema.DropForeignKey, *schema.ModifyForeignKey:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfiltered = append(filtered, change)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.Changes = filtered\n\t\t\t}\n\t\t}\n\t\treturn changes, nil\n\t})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 412,
      "end_line": 438,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Differ interface {\n\t\t// Diff returns a list of changes that construct a migration plan.\n\t\tDiff(current, desired *schema.Schema) ([]schema.Change, error)\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DiffFunc func(current, desired *schema.Schema) ([]schema.Change, error)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Change interface {\n\t\tchange()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddTable struct {\n\t\tT     *Table\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyTable struct {\n\t\tT       *Table\n\t\tChanges []Change\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddForeignKey struct {\n\t\tF     *ForeignKey\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropForeignKey struct {\n\t\tF     *ForeignKey\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyForeignKey struct {\n\t\tFrom, To *ForeignKey\n\t\tChange   ChangeKind\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        412,
        413,
        414,
        415,
        418,
        419,
        420,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        433,
        436
      ],
      "cover_details": {
        "line_cover_rate": 0.7037037037037037
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:setAtChecks",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "setAtChecks",
      "signature": "setAtChecks (et *Table, at *schema.Table)",
      "ground_truth": "func setAtChecks(et *Table, at *schema.Table) {\n\tif check := et.Annotation.Check; check != \"\" {\n\t\tat.AddChecks(\u0026schema.Check{\n\t\t\tExpr: check,\n\t\t})\n\t}\n\tif checks := et.Annotation.Checks; len(et.Annotation.Checks) \u003e 0 {\n\t\tnames := make([]string, 0, len(checks))\n\t\tfor name := range checks {\n\t\t\tnames = append(names, name)\n\t\t}\n\t\tsort.Strings(names)\n\t\tfor _, name := range names {\n\t\t\tat.AddChecks(\u0026schema.Check{\n\t\t\t\tName: name,\n\t\t\t\tExpr: checks[name],\n\t\t\t})\n\t\t}\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 1152,
      "end_line": 1171,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/entsql/annotation.go",
          "code_snippet": "Annotation struct {\n\t// The Schema option allows setting the schema which the table belongs to.\n\t// Note, this option is no-op for Ent default migration engine. However, schema\n\t// extensions (like Atlas) can accept this option and implement it accordingly.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSchema: \"public\",\n\t//\t}\n\t//\n\tSchema string `json:\"schema,omitempty\"`\n\n\t// The Table option allows overriding the default table\n\t// name that is generated by ent. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tTable: \"Users\",\n\t//\t}\n\t//\n\tTable string `json:\"table,omitempty\"`\n\n\t// Charset defines the character-set of the table. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCharset: \"utf8mb4\",\n\t//\t}\n\t//\n\tCharset string `json:\"charset,omitempty\"`\n\n\t// Collation defines the collation of the table (a set of rules for comparing\n\t// characters in a character set). For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCollation: \"utf8mb4_bin\",\n\t//\t}\n\t//\n\tCollation string `json:\"collation,omitempty\"`\n\n\t// Default specifies a literal default value of a column. Note that using\n\t// this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefault: `{\"key\":\"value\"}`,\n\t//\t}\n\t//\n\tDefault string `json:\"default,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column. Using this option,\n\t// users can define custom expressions to be set as database default values. Note that\n\t// using this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"CURRENT_TIMESTAMP\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"uuid_generate_v4()\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"(a + b)\",\n\t//\t}\n\t//\n\tDefaultExpr string `json:\"default_expr,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column per dialect.\n\t// See, DefaultExpr for full doc.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExprs: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"uuid()\",\n\t//\t\t\tdialect.Postgres: \"uuid_generate_v4\",\n\t//\t\t}\n\t//\n\tDefaultExprs map[string]string `json:\"default_exprs,omitempty\"`\n\n\t// Options defines the additional table options. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOptions: \"ENGINE = INNODB\",\n\t//\t}\n\t//\n\tOptions string `json:\"options,omitempty\"`\n\n\t// Size defines the column size in the generated schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSize: 128,\n\t//\t}\n\t//\n\tSize int64 `json:\"size,omitempty\"`\n\n\t// WithComments specifies whether fields' comments should\n\t// be stored in the database schema as column comments.\n\t//\n\t//  withCommentsEnabled := true\n\t//\tentsql.WithComments{\n\t//\t\tWithComments: \u0026withCommentsEnabled,\n\t//\t}\n\t//\n\tWithComments *bool `json:\"with_comments,omitempty\"`\n\n\t// Incremental defines the auto-incremental behavior of a column. For example:\n\t//\n\t//  incrementalEnabled := true\n\t//  entsql.Annotation{\n\t//      Incremental: \u0026incrementalEnabled,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever best fits each scenario.\n\t//\n\tIncremental *bool `json:\"incremental,omitempty\"`\n\n\t// IncrementStart defines the auto-incremental start value of a column. For example:\n\t//\n\t//  incrementStart := 100\n\t//  entsql.Annotation{\n\t//      IncrementStart: \u0026incrementStart,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever the database settings are.\n\t//\n\tIncrementStart *int `json:\"increment_start,omitempty\"`\n\n\t// OnDelete specifies a custom referential action for DELETE operations on parent\n\t// table that has matching rows in the child table.\n\t//\n\t// For example, in order to delete rows from the parent table and automatically delete\n\t// their matching rows in the child table, pass the following annotation:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOnDelete: entsql.Cascade,\n\t//\t}\n\t//\n\tOnDelete ReferenceOption `json:\"on_delete,omitempty\"`\n\n\t// Check allows injecting custom \"DDL\" for setting an unnamed \"CHECK\" clause in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCheck: \"age \u003c 10\",\n\t//\t}\n\t//\n\tCheck string `json:\"check,omitempty\"`\n\n\t// Checks allows injecting custom \"DDL\" for setting named \"CHECK\" clauses in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tChecks: map[string]string{\n\t//\t\t\t\"valid_discount\": \"price \u003e discount_price\",\n\t//\t\t},\n\t//\t}\n\t//\n\tChecks map[string]string `json:\"checks,omitempty\"`\n\n\t// Skip indicates that the field or the schema is skipped/ignored during\n\t// migration (e.g., defined externally).\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSkip: true,\n\t//\t}\n\t//\n\tSkip bool `json:\"skip,omitempty\"`\n\n\t// ViewAs allows defining a view for the schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tView: \"SELECT name FROM users\",\n\t//\t}\n\tViewAs string `json:\"view_as,omitempty\"`\n\n\t// ViewFor allows defining a view for the schema per dialect. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tViewFor: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"...\",\n\t//\t\t\tdialect.Postgres: \"...\",\n\t//\t\t},\n\t//\t}\n\tViewFor map[string]string `json:\"view_for,omitempty\"`\n\n\t// error occurs during annotation build. This field is not\n\t// serialized to JSON and used only by the codegen loader.\n\terr error\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddChecks(checks ...*Check) *Table {\n\tfor _, c := range checks {\n\t\tt.Attrs = append(t.Attrs, c)\n\t}\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Check struct {\n\t\tName  string // Optional constraint name.\n\t\tExpr  string // Actual CHECK.\n\t\tAttrs []Attr // Additional attributes (e.g. ENFORCED).\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "func Strings(x []string) { slices.Sort(x) }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1152,
        1153,
        1158
      ],
      "cover_details": {
        "line_cover_rate": 0.15
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        }
      ],
      "name": "Decode",
      "signature": "(dec unmarshalerDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec unmarshalerDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tbytes := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tunmarshaler := dec.UnsafeIndirect(ptr).(Unmarshaler)\n\tif err := unmarshaler.UnmarshalGraphson(bytes); err != nil {\n\t\titer.ReportError(\n\t\t\t\"unmarshal graphson\",\n\t\t\tfmt.Sprintf(\n\t\t\t\t\"graphson: error calling UnmarshalGraphson for type %s: %s\",\n\t\t\t\tdec.Type, err,\n\t\t\t),\n\t\t)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 108,
      "end_line": 124,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "unmarshalerDecoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "Unmarshaler interface {\n\tUnmarshalGraphson([]byte) error\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        108,
        109,
        110,
        111,
        112,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "cover_details": {
        "line_cover_rate": 0.8823529411764706
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:responseAttrs",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestResponseAttributes"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "responseAttrs",
      "signature": "responseAttrs (rsp *gremlin.Response) []trace.Attribute",
      "ground_truth": "func responseAttrs(rsp *gremlin.Response) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.Int64Attribute(CodeAttribute, int64(rsp.Status.Code)),\n\t}\n\tif rsp.Status.Message != \"\" {\n\t\tattrs = append(attrs, trace.StringAttribute(MessageAttribute, rsp.Status.Message))\n\t}\n\treturn attrs\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 98,
      "end_line": 106,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "CodeAttribute      = \"gremlin.code\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "MessageAttribute   = \"gremlin.message\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Int64Attribute(key string, value int64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atIncrementT",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atIncrementT",
      "signature": "(d *SQLite) atIncrementT (t *schema.Table, v int64)",
      "ground_truth": "func (d *SQLite) atIncrementT(t *schema.Table, v int64) {\n\tt.AddAttrs(\u0026sqlite.AutoIncrement{Seq: v})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 182,
      "end_line": 184,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddAttrs(attrs ...Attr) *Table {\n\tt.Attrs = append(t.Attrs, attrs...)\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/inspect.go",
          "code_snippet": "AutoIncrement struct {\n\t\tschema.Attr\n\t\t// Seq represents the value in sqlite_sequence table.\n\t\t// i.e. https://www.sqlite.org/fileformat2.html#seqtab.\n\t\t//\n\t\t// Setting this value manually to \u003e 0 indicates that\n\t\t// a custom value is necessary and should be handled\n\t\t// on migrate.\n\t\tSeq int64\n\t}",
          "ref_module": "sqlite"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        182,
        183,
        184
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectBytes",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "reflectBytes",
      "signature": "(dec efaceDecoder) reflectBytes (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (dec efaceDecoder) reflectBytes(data []byte) (reflect2.Type, error) {\n\ttyp := Type(jsoniter.Get(data, TypeKey).ToString())\n\trtype := dec.reflectType(typ)\n\tif rtype != nil {\n\t\treturn rtype, nil\n\t}\n\n\tswitch typ {\n\tcase listType:\n\t\treturn dec.reflectSlice(data)\n\tcase mapType:\n\t\treturn dec.reflectMap(data)\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 84,
      "end_line": 99,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectType(typ Type) reflect2.Type {\n\tswitch typ {\n\tcase doubleType:\n\t\treturn reflect2.TypeOf(float64(0))\n\tcase floatType:\n\t\treturn reflect2.TypeOf(float32(0))\n\tcase byteType:\n\t\treturn reflect2.TypeOf(uint8(0))\n\tcase int16Type:\n\t\treturn reflect2.TypeOf(int16(0))\n\tcase int32Type:\n\t\treturn reflect2.TypeOf(int32(0))\n\tcase int64Type, bigIntegerType:\n\t\treturn reflect2.TypeOf(int64(0))\n\tcase byteBufferType:\n\t\treturn reflect2.TypeOf([]byte{})\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectSlice(data []byte) (reflect2.Type, error) {\n\tvar elem any\n\tif err := Unmarshal(data, \u0026[...]*any{\u0026elem}); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot read first list element: %w\", err)\n\t}\n\n\tif elem == nil {\n\t\treturn reflect2.TypeOf([]any{}), nil\n\t}\n\n\tsliceType := reflect.SliceOf(reflect.TypeOf(elem))\n\treturn reflect2.Type2(sliceType), nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (efaceDecoder) reflectMap(data []byte) (reflect2.Type, error) {\n\tvar key, elem any\n\tif err := Unmarshal(\n\t\tbytes.Replace(data, []byte(mapType), []byte(listType), 1),\n\t\t\u0026[...]*any{\u0026key, \u0026elem},\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot unmarshal first map item: %w\", err)\n\t}\n\n\tif key == nil {\n\t\treturn reflect2.TypeOf(map[any]any{}), nil\n\t} else if elem == nil {\n\t\treturn nil, errors.New(\"expect map element, but found only key\")\n\t}\n\n\tmapType := reflect.MapOf(reflect.TypeOf(key), reflect.TypeOf(elem))\n\treturn reflect2.Type2(mapType), nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/any.go",
          "code_snippet": "Any interface {\n\tLastError() error\n\tValueType() ValueType\n\tMustBeValid() Any\n\tToBool() bool\n\tToInt() int\n\tToInt32() int32\n\tToInt64() int64\n\tToUint() uint\n\tToUint32() uint32\n\tToUint64() uint64\n\tToFloat32() float32\n\tToFloat64() float64\n\tToString() string\n\tToVal(val interface{})\n\tGet(path ...interface{}) Any\n\tSize() int\n\tKeys() []string\n\tGetInterface() interface{}\n\tWriteTo(stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Get(data []byte, path ...interface{}) Any {\n\treturn ConfigDefault.Get(data, path...)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        92,
        93,
        94,
        95,
        96,
        97
      ],
      "cover_details": {
        "line_cover_rate": 0.8125
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:init",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Formatter"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "init",
      "signature": "(a *Atlas) init () error",
      "ground_truth": "func (a *Atlas) init() error {\n\tskip := DropIndex | DropColumn\n\tif a.skip != NoChange {\n\t\tskip = a.skip\n\t}\n\tif a.dropIndexes {\n\t\tskip \u0026= ^DropIndex\n\t}\n\tif a.dropColumns {\n\t\tskip \u0026= ^DropColumn\n\t}\n\tif skip != NoChange {\n\t\ta.diffHooks = append(a.diffHooks, filterChanges(skip))\n\t}\n\tif !a.withForeignKeys {\n\t\ta.diffHooks = append(a.diffHooks, withoutForeignKeys)\n\t}\n\tif a.dir != nil \u0026\u0026 a.fmt == nil {\n\t\tswitch a.dir.(type) {\n\t\tcase *sqltool.GooseDir:\n\t\t\ta.fmt = sqltool.GooseFormatter\n\t\tcase *sqltool.DBMateDir:\n\t\t\ta.fmt = sqltool.DBMateFormatter\n\t\tcase *sqltool.FlywayDir:\n\t\t\ta.fmt = sqltool.FlywayFormatter\n\t\tcase *sqltool.LiquibaseDir:\n\t\t\ta.fmt = sqltool.LiquibaseFormatter\n\t\tdefault: // migrate.LocalDir, sqltool.GolangMigrateDir and custom ones\n\t\t\ta.fmt = sqltool.GolangMigrateFormatter\n\t\t}\n\t}\n\t// ModeReplay requires a migration directory.\n\tif a.mode == ModeReplay \u0026\u0026 a.dir == nil {\n\t\treturn errors.New(\"sql/schema: WithMigrationMode(ModeReplay) requires versioned migrations: WithDir()\")\n\t}\n\treturn nil\n}",
      "function_comment": "// init initializes the configuration object based on the options passed in.",
      "function_statement": "// init initializes the configuration object based on the options passed in.",
      "start_line": 554,
      "end_line": 590,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropColumn",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropIndex",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "NoChange  ChangeKind = 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func filterChanges(skip ChangeKind) DiffHook {\n\treturn func(next Differ) Differ {\n\t\treturn DiffFunc(func(current, desired *schema.Schema) ([]schema.Change, error) {\n\t\t\tvar f func([]schema.Change) []schema.Change\n\t\t\tf = func(changes []schema.Change) (keep []schema.Change) {\n\t\t\t\tvar k ChangeKind\n\t\t\t\tfor _, c := range changes {\n\t\t\t\t\tswitch c := c.(type) {\n\t\t\t\t\tcase *schema.AddSchema:\n\t\t\t\t\t\tk = AddSchema\n\t\t\t\t\tcase *schema.ModifySchema:\n\t\t\t\t\t\tk = ModifySchema\n\t\t\t\t\t\tif !skip.Is(k) {\n\t\t\t\t\t\t\tc.Changes = f(c.Changes)\n\t\t\t\t\t\t}\n\t\t\t\t\tcase *schema.DropSchema:\n\t\t\t\t\t\tk = DropSchema\n\t\t\t\t\tcase *schema.AddTable:\n\t\t\t\t\t\tk = AddTable\n\t\t\t\t\tcase *schema.ModifyTable:\n\t\t\t\t\t\tk = ModifyTable\n\t\t\t\t\t\tif !skip.Is(k) {\n\t\t\t\t\t\t\tc.Changes = f(c.Changes)\n\t\t\t\t\t\t}\n\t\t\t\t\tcase *schema.DropTable:\n\t\t\t\t\t\tk = DropTable\n\t\t\t\t\tcase *schema.AddColumn:\n\t\t\t\t\t\tk = AddColumn\n\t\t\t\t\tcase *schema.ModifyColumn:\n\t\t\t\t\t\tk = ModifyColumn\n\t\t\t\t\tcase *schema.DropColumn:\n\t\t\t\t\t\tk = DropColumn\n\t\t\t\t\tcase *schema.AddIndex:\n\t\t\t\t\t\tk = AddIndex\n\t\t\t\t\tcase *schema.ModifyIndex:\n\t\t\t\t\t\tk = ModifyIndex\n\t\t\t\t\tcase *schema.DropIndex:\n\t\t\t\t\t\tk = DropIndex\n\t\t\t\t\tcase *schema.AddForeignKey:\n\t\t\t\t\t\tk = AddIndex\n\t\t\t\t\tcase *schema.ModifyForeignKey:\n\t\t\t\t\t\tk = ModifyForeignKey\n\t\t\t\t\tcase *schema.DropForeignKey:\n\t\t\t\t\t\tk = DropForeignKey\n\t\t\t\t\tcase *schema.AddCheck:\n\t\t\t\t\t\tk = AddCheck\n\t\t\t\t\tcase *schema.ModifyCheck:\n\t\t\t\t\t\tk = ModifyCheck\n\t\t\t\t\tcase *schema.DropCheck:\n\t\t\t\t\t\tk = DropCheck\n\t\t\t\t\t}\n\t\t\t\t\tif !skip.Is(k) {\n\t\t\t\t\t\tkeep = append(keep, c)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tchanges, err := next.Diff(current, desired)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn f(changes), nil\n\t\t})\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func withoutForeignKeys(next Differ) Differ {\n\treturn DiffFunc(func(current, desired *schema.Schema) ([]schema.Change, error) {\n\t\tchanges, err := next.Diff(current, desired)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor _, c := range changes {\n\t\t\tswitch c := c.(type) {\n\t\t\tcase *schema.AddTable:\n\t\t\t\tc.T.ForeignKeys = nil\n\t\t\tcase *schema.ModifyTable:\n\t\t\t\tc.T.ForeignKeys = nil\n\t\t\t\tfiltered := make([]schema.Change, 0, len(c.Changes))\n\t\t\t\tfor _, change := range c.Changes {\n\t\t\t\t\tswitch change.(type) {\n\t\t\t\t\tcase *schema.AddForeignKey, *schema.DropForeignKey, *schema.ModifyForeignKey:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfiltered = append(filtered, change)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.Changes = filtered\n\t\t\t}\n\t\t}\n\t\treturn changes, nil\n\t})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModeReplay = iota",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "GooseDir struct{ *migrate.LocalDir }",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "GooseFormatter = templateFormatter(\n\t\t\"{{ now }}{{ with .Name }}_{{ . }}{{ end }}.sql\",\n\t\t`-- +goose Up\n{{ range .Changes }}{{ with .Comment }}-- {{ println . }}{{ end }}{{ printf \"%s;\\n\" .Cmd }}{{ end }}\n-- +goose Down\n{{ range $c := rev .Changes }}{{ with $stmts := .ReverseStmts }}{{ with $c.Comment }}-- reverse: {{ println . }}{{ end }}{{ range $stmts }}{{ printf \"%s;\\n\" . }}{{ end }}{{ end }}{{ end }}`,\n\t)",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "DBMateDir struct{ *migrate.LocalDir }",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "DBMateFormatter = templateFormatter(\n\t\t\"{{ now }}{{ with .Name }}_{{ . }}{{ end }}.sql\",\n\t\t`-- migrate:up\n{{ range .Changes }}{{ with .Comment }}-- {{ println . }}{{ end }}{{ printf \"%s;\\n\" .Cmd }}{{ end }}\n-- migrate:down\n{{ range $c := rev .Changes }}{{ with $stmts := .ReverseStmts }}{{ with $c.Comment }}-- reverse: {{ println . }}{{ end }}{{ range $stmts }}{{ printf \"%s;\\n\" . }}{{ end }}{{ end }}{{ end }}`,\n\t)",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "FlywayDir struct{ fs.FS }",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "FlywayFormatter = templateFormatter(\n\t\t\"V{{ now }}{{ with .Name }}__{{ . }}{{ end }}.sql\",\n\t\t`{{ range .Changes }}{{ with .Comment }}-- {{ println . }}{{ end }}{{ printf \"%s;\\n\" .Cmd }}{{ end }}`,\n\t\t\"U{{ now }}{{ with .Name }}__{{ . }}{{ end }}.sql\",\n\t\t`{{ range $c := rev .Changes }}{{ with $stmts := .ReverseStmts }}{{ with $c.Comment }}-- reverse: {{ println . }}{{ end }}{{ range $stmts }}{{ printf \"%s;\\n\" . }}{{ end }}{{ end }}{{ end }}`,\n\t)",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "LiquibaseDir struct{ *migrate.LocalDir }",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "LiquibaseFormatter = templateFormatter(\n\t\t\"{{ now }}{{ with .Name }}_{{ . }}{{ end }}.sql\",\n\t\t`{{- $now := now -}}\n--liquibase formatted sql\n\n{{- range $index, $change := .Changes }}\n--changeset atlas:{{ $now }}-{{ inc $index }}\n{{ with $change.Comment }}--comment: {{ . }}{{ end }}\n{{ $change.Cmd }};\n{{ with $stmts := .ReverseStmts }}{{ range $stmts }}{{ printf \"--rollback: %s;\\n\" . }}{{ end }}{{ end }}\n{{- end }}`,\n\t)",
          "ref_module": "sqltool"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqltool/tool.go",
          "code_snippet": "GolangMigrateFormatter = templateFormatter(\n\t\t\"{{ now }}{{ with .Name }}_{{ . }}{{ end }}.up.sql\",\n\t\t`{{ range .Changes }}{{ with .Comment }}-- {{ println . }}{{ end }}{{ printf \"%s;\\n\" .Cmd }}{{ end }}`,\n\t\t\"{{ now }}{{ with .Name }}_{{ . }}{{ end }}.down.sql\",\n\t\t`{{ range $c := rev .Changes }}{{ with $stmts := .ReverseStmts }}{{ with $c.Comment }}-- reverse: {{ println . }}{{ end }}{{ range $stmts }}{{ printf \"%s;\\n\" . }}{{ end }}{{ end }}{{ end }}`,\n\t)",
          "ref_module": "sqltool"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        554,
        555,
        556,
        559,
        562,
        565,
        566,
        567,
        568,
        571,
        572,
        573,
        574,
        575,
        576,
        577,
        578,
        579,
        580,
        581,
        582,
        586,
        589
      ],
      "cover_details": {
        "line_cover_rate": 0.6216216216216216
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/http.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadRequest"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseBody"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseStatus"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportRoundTripper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t *httpTransport) RoundTrip (ctx context.Context, req *Request) (*Response, error)",
      "ground_truth": "func (t *httpTransport) RoundTrip(ctx context.Context, req *Request) (*Response, error) {\n\tif req.Operation != OpsEval {\n\t\treturn nil, fmt.Errorf(\"gremlin/http: unsupported operation: %q\", req.Operation)\n\t}\n\tif _, ok := req.Arguments[ArgsGremlin]; !ok {\n\t\treturn nil, errors.New(\"gremlin/http: missing query expression\")\n\t}\n\n\tpr, pw := io.Pipe()\n\tdefer pr.Close()\n\tgo func() {\n\t\terr := jsoniter.NewEncoder(pw).Encode(req.Arguments)\n\t\tif err != nil {\n\t\t\terr = fmt.Errorf(\"gremlin/http: encoding request: %w\", err)\n\t\t}\n\t\t_ = pw.CloseWithError(err)\n\t}()\n\n\tvar br io.Reader\n\t{\n\t\treq, err := http.NewRequest(http.MethodPost, t.url, pr)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"gremlin/http: creating http request: %w\", err)\n\t\t}\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\t\trsp, err := t.client.Do(req.WithContext(ctx))\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"gremlin/http: posting http request: %w\", err)\n\t\t}\n\t\tdefer rsp.Body.Close()\n\n\t\tif rsp.StatusCode \u003c http.StatusOK || rsp.StatusCode \u003e http.StatusPartialContent {\n\t\t\tbody, _ := io.ReadAll(rsp.Body)\n\t\t\treturn nil, fmt.Errorf(\"gremlin/http: status=%q, body=%q\", rsp.Status, body)\n\t\t}\n\t\tif rsp.ContentLength \u003e MaxResponseSize {\n\t\t\treturn nil, errors.New(\"gremlin/http: context length exceeds limit\")\n\t\t}\n\t\tbr = rsp.Body\n\t}\n\n\tvar rsp Response\n\tif err := graphson.NewDecoder(io.LimitReader(br, MaxResponseSize)).Decode(\u0026rsp); err != nil {\n\t\treturn nil, fmt.Errorf(\"gremlin/http: decoding response: %w\", err)\n\t}\n\treturn \u0026rsp, nil\n}",
      "function_comment": "// RoundTrip implements RouterTripper interface.",
      "function_statement": "// RoundTrip implements RouterTripper interface.",
      "start_line": 38,
      "end_line": 85,
      "file_path": "./dialect/gremlin/http.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/http.go",
          "code_snippet": "httpTransport struct {\n\tclient *http.Client\n\turl    string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "OpsEval = \"eval\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "MaxResponseSize = 2 \u003c\u003c 20",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "Decoder interface {\n\tDecode(any) error\n}",
          "ref_module": "graphson"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "func NewDecoder(r io.Reader) Decoder {\n\treturn config.NewDecoder(r)\n}",
          "ref_module": "graphson"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func (adapter *Encoder) Encode(val interface{}) error {\n\tadapter.stream.WriteVal(val)\n\tadapter.stream.WriteRaw(\"\\n\")\n\tadapter.stream.Flush()\n\treturn adapter.stream.Error\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func NewEncoder(writer io.Writer) *Encoder {\n\treturn ConfigDefault.NewEncoder(writer)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/pipe.go",
          "code_snippet": "func Pipe() (*PipeReader, *PipeWriter) {\n\tpw := \u0026PipeWriter{r: PipeReader{pipe: pipe{\n\t\twrCh: make(chan []byte),\n\t\trdCh: make(chan int),\n\t\tdone: make(chan struct{}),\n\t}}}\n\treturn \u0026pw.r, pw\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/pipe.go",
          "code_snippet": "func (r *PipeReader) Close() error {\n\treturn r.CloseWithError(nil)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/pipe.go",
          "code_snippet": "func (w *PipeWriter) CloseWithError(err error) error {\n\treturn w.r.pipe.closeWrite(err)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func NewRequest(method, url string, body io.Reader) (*Request, error) {\n\treturn NewRequestWithContext(context.Background(), method, url, body)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/method.go",
          "code_snippet": "MethodPost    = \"POST\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/header.go",
          "code_snippet": "func (h Header) Set(key, value string) {\n\ttextproto.MIMEHeader(h).Set(key, value)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "Request struct {\n\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n\t// For client requests, an empty string means GET.\n\tMethod string\n\n\t// URL specifies either the URI being requested (for server\n\t// requests) or the URL to access (for client requests).\n\t//\n\t// For server requests, the URL is parsed from the URI\n\t// supplied on the Request-Line as stored in RequestURI.  For\n\t// most requests, fields other than Path and RawQuery will be\n\t// empty. (See RFC 7230, Section 5.3)\n\t//\n\t// For client requests, the URL's Host specifies the server to\n\t// connect to, while the Request's Host field optionally\n\t// specifies the Host header value to send in the HTTP\n\t// request.\n\tURL *url.URL\n\n\t// The protocol version for incoming server requests.\n\t//\n\t// For client requests, these fields are ignored. The HTTP\n\t// client code always uses either HTTP/1.1 or HTTP/2.\n\t// See the docs on Transport for details.\n\tProto      string // \"HTTP/1.0\"\n\tProtoMajor int    // 1\n\tProtoMinor int    // 0\n\n\t// Header contains the request header fields either received\n\t// by the server or to be sent by the client.\n\t//\n\t// If a server received a request with header lines,\n\t//\n\t//\tHost: example.com\n\t//\taccept-encoding: gzip, deflate\n\t//\tAccept-Language: en-us\n\t//\tfOO: Bar\n\t//\tfoo: two\n\t//\n\t// then\n\t//\n\t//\tHeader = map[string][]string{\n\t//\t\t\"Accept-Encoding\": {\"gzip, deflate\"},\n\t//\t\t\"Accept-Language\": {\"en-us\"},\n\t//\t\t\"Foo\": {\"Bar\", \"two\"},\n\t//\t}\n\t//\n\t// For incoming requests, the Host header is promoted to the\n\t// Request.Host field and removed from the Header map.\n\t//\n\t// HTTP defines that header names are case-insensitive. The\n\t// request parser implements this by using CanonicalHeaderKey,\n\t// making the first character and any characters following a\n\t// hyphen uppercase and the rest lowercase.\n\t//\n\t// For client requests, certain headers such as Content-Length\n\t// and Connection are automatically written when needed and\n\t// values in Header may be ignored. See the documentation\n\t// for the Request.Write method.\n\tHeader Header\n\n\t// Body is the request's body.\n\t//\n\t// For client requests, a nil body means the request has no\n\t// body, such as a GET request. The HTTP Client's Transport\n\t// is responsible for calling the Close method.\n\t//\n\t// For server requests, the Request Body is always non-nil\n\t// but will return EOF immediately when no body is present.\n\t// The Server will close the request body. The ServeHTTP\n\t// Handler does not need to.\n\t//\n\t// Body must allow Read to be called concurrently with Close.\n\t// In particular, calling Close should unblock a Read waiting\n\t// for input.\n\tBody io.ReadCloser\n\n\t// GetBody defines an optional func to return a new copy of\n\t// Body. It is used for client requests when a redirect requires\n\t// reading the body more than once. Use of GetBody still\n\t// requires setting Body.\n\t//\n\t// For server requests, it is unused.\n\tGetBody func() (io.ReadCloser, error)\n\n\t// ContentLength records the length of the associated content.\n\t// The value -1 indicates that the length is unknown.\n\t// Values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\t//\n\t// For client requests, a value of 0 with a non-nil Body is\n\t// also treated as unknown.\n\tContentLength int64\n\n\t// TransferEncoding lists the transfer encodings from outermost to\n\t// innermost. An empty list denotes the \"identity\" encoding.\n\t// TransferEncoding can usually be ignored; chunked encoding is\n\t// automatically added and removed as necessary when sending and\n\t// receiving requests.\n\tTransferEncoding []string\n\n\t// Close indicates whether to close the connection after\n\t// replying to this request (for servers) or after sending this\n\t// request and reading its response (for clients).\n\t//\n\t// For server requests, the HTTP server handles this automatically\n\t// and this field is not needed by Handlers.\n\t//\n\t// For client requests, setting this field prevents re-use of\n\t// TCP connections between requests to the same hosts, as if\n\t// Transport.DisableKeepAlives were set.\n\tClose bool\n\n\t// For server requests, Host specifies the host on which the\n\t// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this\n\t// is either the value of the \"Host\" header or the host name\n\t// given in the URL itself. For HTTP/2, it is the value of the\n\t// \":authority\" pseudo-header field.\n\t// It may be of the form \"host:port\". For international domain\n\t// names, Host may be in Punycode or Unicode form. Use\n\t// golang.org/x/net/idna to convert it to either format if\n\t// needed.\n\t// To prevent DNS rebinding attacks, server Handlers should\n\t// validate that the Host header has a value for which the\n\t// Handler considers itself authoritative. The included\n\t// ServeMux supports patterns registered to particular host\n\t// names and thus protects its registered Handlers.\n\t//\n\t// For client requests, Host optionally overrides the Host\n\t// header to send. If empty, the Request.Write method uses\n\t// the value of URL.Host. Host may contain an international\n\t// domain name.\n\tHost string\n\n\t// Form contains the parsed form data, including both the URL\n\t// field's query parameters and the PATCH, POST, or PUT form data.\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores Form and uses Body instead.\n\tForm url.Values\n\n\t// PostForm contains the parsed form data from PATCH, POST\n\t// or PUT body parameters.\n\t//\n\t// This field is only available after ParseForm is called.\n\t// The HTTP client ignores PostForm and uses Body instead.\n\tPostForm url.Values\n\n\t// MultipartForm is the parsed multipart form, including file uploads.\n\t// This field is only available after ParseMultipartForm is called.\n\t// The HTTP client ignores MultipartForm and uses Body instead.\n\tMultipartForm *multipart.Form\n\n\t// Trailer specifies additional headers that are sent after the request\n\t// body.\n\t//\n\t// For server requests, the Trailer map initially contains only the\n\t// trailer keys, with nil values. (The client declares which trailers it\n\t// will later send.)  While the handler is reading from Body, it must\n\t// not reference Trailer. After reading from Body returns EOF, Trailer\n\t// can be read again and will contain non-nil values, if they were sent\n\t// by the client.\n\t//\n\t// For client requests, Trailer must be initialized to a map containing\n\t// the trailer keys to later send. The values may be nil or their final\n\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n\t// After the HTTP request is sent the map values can be updated while\n\t// the request body is read. Once the body returns EOF, the caller must\n\t// not mutate Trailer.\n\t//\n\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n\tTrailer Header\n\n\t// RemoteAddr allows HTTP servers and other software to record\n\t// the network address that sent the request, usually for\n\t// logging. This field is not filled in by ReadRequest and\n\t// has no defined format. The HTTP server in this package\n\t// sets RemoteAddr to an \"IP:port\" address before invoking a\n\t// handler.\n\t// This field is ignored by the HTTP client.\n\tRemoteAddr string\n\n\t// RequestURI is the unmodified request-target of the\n\t// Request-Line (RFC 7230, Section 3.1.1) as sent by the client\n\t// to a server. Usually the URL field should be used instead.\n\t// It is an error to set this field in an HTTP client request.\n\tRequestURI string\n\n\t// TLS allows HTTP servers and other software to record\n\t// information about the TLS connection on which the request\n\t// was received. This field is not filled in by ReadRequest.\n\t// The HTTP server in this package sets the field for\n\t// TLS-enabled connections before invoking a handler;\n\t// otherwise it leaves the field nil.\n\t// This field is ignored by the HTTP client.\n\tTLS *tls.ConnectionState\n\n\t// Cancel is an optional channel whose closure indicates that the client\n\t// request should be regarded as canceled. Not all implementations of\n\t// RoundTripper may support Cancel.\n\t//\n\t// For server requests, this field is not applicable.\n\t//\n\t// Deprecated: Set the Request's context with NewRequestWithContext\n\t// instead. If a Request's Cancel field and context are both\n\t// set, it is undefined whether Cancel is respected.\n\tCancel \u003c-chan struct{}\n\n\t// Response is the redirect response which caused this request\n\t// to be created. This field is only populated during client\n\t// redirects.\n\tResponse *Response\n\n\t// Pattern is the [ServeMux] pattern that matched the request.\n\t// It is empty if the request was not matched against a pattern.\n\tPattern string\n\n\t// ctx is either the client or server context. It should only\n\t// be modified via copying the whole Request using Clone or WithContext.\n\t// It is unexported to prevent people from using Context wrong\n\t// and mutating the contexts held by callers of the same request.\n\tctx context.Context\n\n\t// The following fields are for requests matched by ServeMux.\n\tpat         *pattern          // the pattern that matched\n\tmatches     []string          // values for the matching wildcards in pat\n\totherValues map[string]string // for calls to SetPathValue that don't match a wildcard\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/client.go",
          "code_snippet": "func (c *Client) Do(req *Request) (*Response, error) {\n\treturn c.do(req)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/request.go",
          "code_snippet": "func (r *Request) WithContext(ctx context.Context) *Request {\n\tif ctx == nil {\n\t\tpanic(\"nil context\")\n\t}\n\tr2 := new(Request)\n\t*r2 = *r\n\tr2.ctx = ctx\n\treturn r2\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/response.go",
          "code_snippet": "Response struct {\n\tStatus     string // e.g. \"200 OK\"\n\tStatusCode int    // e.g. 200\n\tProto      string // e.g. \"HTTP/1.0\"\n\tProtoMajor int    // e.g. 1\n\tProtoMinor int    // e.g. 0\n\n\t// Header maps header keys to values. If the response had multiple\n\t// headers with the same key, they may be concatenated, with comma\n\t// delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers\n\t// be semantically equivalent to a comma-delimited sequence.) When\n\t// Header values are duplicated by other fields in this struct (e.g.,\n\t// ContentLength, TransferEncoding, Trailer), the field values are\n\t// authoritative.\n\t//\n\t// Keys in the map are canonicalized (see CanonicalHeaderKey).\n\tHeader Header\n\n\t// Body represents the response body.\n\t//\n\t// The response body is streamed on demand as the Body field\n\t// is read. If the network connection fails or the server\n\t// terminates the response, Body.Read calls return an error.\n\t//\n\t// The http Client and Transport guarantee that Body is always\n\t// non-nil, even on responses without a body or responses with\n\t// a zero-length body. It is the caller's responsibility to\n\t// close Body. The default HTTP client's Transport may not\n\t// reuse HTTP/1.x \"keep-alive\" TCP connections if the Body is\n\t// not read to completion and closed.\n\t//\n\t// The Body is automatically dechunked if the server replied\n\t// with a \"chunked\" Transfer-Encoding.\n\t//\n\t// As of Go 1.12, the Body will also implement io.Writer\n\t// on a successful \"101 Switching Protocols\" response,\n\t// as used by WebSockets and HTTP/2's \"h2c\" mode.\n\tBody io.ReadCloser\n\n\t// ContentLength records the length of the associated content. The\n\t// value -1 indicates that the length is unknown. Unless Request.Method\n\t// is \"HEAD\", values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\tContentLength int64\n\n\t// Contains transfer encodings from outer-most to inner-most. Value is\n\t// nil, means that \"identity\" encoding is used.\n\tTransferEncoding []string\n\n\t// Close records whether the header directed that the connection be\n\t// closed after reading Body. The value is advice for clients: neither\n\t// ReadResponse nor Response.Write ever closes a connection.\n\tClose bool\n\n\t// Uncompressed reports whether the response was sent compressed but\n\t// was decompressed by the http package. When true, reading from\n\t// Body yields the uncompressed content instead of the compressed\n\t// content actually set from the server, ContentLength is set to -1,\n\t// and the \"Content-Length\" and \"Content-Encoding\" fields are deleted\n\t// from the responseHeader. To get the original response from\n\t// the server, set Transport.DisableCompression to true.\n\tUncompressed bool\n\n\t// Trailer maps trailer keys to values in the same\n\t// format as Header.\n\t//\n\t// The Trailer initially contains only nil values, one for\n\t// each key specified in the server's \"Trailer\" header\n\t// value. Those values are not added to Header.\n\t//\n\t// Trailer must not be accessed concurrently with Read calls\n\t// on the Body.\n\t//\n\t// After Body.Read has returned io.EOF, Trailer will contain\n\t// any trailer values sent by the server.\n\tTrailer Header\n\n\t// Request is the request that was sent to obtain this Response.\n\t// Request's Body is nil (having already been consumed).\n\t// This is only populated for Client requests.\n\tRequest *Request\n\n\t// TLS contains information about the TLS connection on which the\n\t// response was received. It is nil for unencrypted responses.\n\t// The pointer is shared between responses and should not be\n\t// modified.\n\tTLS *tls.ConnectionState\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusPartialContent       = 206",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/status.go",
          "code_snippet": "StatusOK                   = 200",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func ReadAll(r Reader) ([]byte, error) {\n\tb := make([]byte, 0, 512)\n\tfor {\n\t\tn, err := r.Read(b[len(b):cap(b)])\n\t\tb = b[:len(b)+n]\n\t\tif err != nil {\n\t\t\tif err == EOF {\n\t\t\t\terr = nil\n\t\t\t}\n\t\t\treturn b, err\n\t\t}\n\n\t\tif len(b) == cap(b) {\n\t\t\t// Add more capacity (let append pick how much).\n\t\t\tb = append(b, 0)[:len(b)]\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "func LimitReader(r Reader, n int64) Reader { return \u0026LimitedReader{r, n} }",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        56,
        57,
        58,
        59,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        77,
        80,
        81,
        82,
        83,
        84
      ],
      "cover_details": {
        "line_cover_rate": 0.7916666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:DecoratorOfSlice",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "DecoratorOfSlice",
      "signature": "(ext decodeExtension) DecoratorOfSlice (typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoratorOfSlice(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif typ.(reflect2.SliceType).Elem().Kind() == reflect.Uint8 {\n\t\treturn typeDecoder{dec, byteBufferType}\n\t}\n\treturn typeDecoder{dec, listType}\n}",
      "function_comment": "// DecoratorOfSlice decorates a value decoder of a slice type.",
      "function_statement": "// DecoratorOfSlice decorates a value decoder of a slice type.",
      "start_line": 57,
      "end_line": 62,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteBufferType Type = \"gx:ByteBuffer\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ListType interface {\n\tType\n\tElem() Type\n\tSetIndex(obj interface{}, index int, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, index int, elem unsafe.Pointer)\n\tGetIndex(obj interface{}, index int) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, index int) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "SliceType interface {\n\tListType\n\tMakeSlice(length int, cap int) interface{}\n\tUnsafeMakeSlice(length int, cap int) unsafe.Pointer\n\tGrow(obj interface{}, newLength int)\n\tUnsafeGrow(ptr unsafe.Pointer, newLength int)\n\tAppend(obj interface{}, elem interface{})\n\tUnsafeAppend(obj unsafe.Pointer, elem unsafe.Pointer)\n\tLengthOf(obj interface{}) int\n\tUnsafeLengthOf(ptr unsafe.Pointer) int\n\tSetNil(obj interface{})\n\tUnsafeSetNil(ptr unsafe.Pointer)\n\tCap(obj interface{}) int\n\tUnsafeCap(ptr unsafe.Pointer) int\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59,
        60,
        61
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/lazy.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "Decode",
      "signature": "(dec *lazyDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec *lazyDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdec.once.Do(func() { dec.ValDecoder = dec.resolve() })\n\tdec.ValDecoder.Decode(ptr, iter)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 57,
      "end_line": 60,
      "file_path": "./dialect/gremlin/encoding/graphson/lazy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "lazyDecoder struct {\n\tjsoniter.ValDecoder\n\tresolve func() jsoniter.ValDecoder\n\tonce    sync.Once\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sync/once.go",
          "code_snippet": "func (o *Once) Do(f func()) {\n\t// Note: Here is an incorrect implementation of Do:\n\t//\n\t//\tif o.done.CompareAndSwap(0, 1) {\n\t//\t\tf()\n\t//\t}\n\t//\n\t// Do guarantees that when it returns, f has finished.\n\t// This implementation would not implement that guarantee:\n\t// given two simultaneous calls, the winner of the cas would\n\t// call f, and the second would return immediately, without\n\t// waiting for the first's call to f to complete.\n\t// This is why the slow path falls back to a mutex, and why\n\t// the o.done.Store must be delayed until after f returns.\n\n\tif o.done.Load() == 0 {\n\t\t// Outlined slow-path to allow inlining of the fast-path.\n\t\to.doSlow(f)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:EncoderOfRegistered",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "EncoderOfRegistered",
      "signature": "(encodeExtension) EncoderOfRegistered (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) EncoderOfRegistered(typ reflect2.Type) jsoniter.ValEncoder {\n\tenc := typeEncoders[typ.String()]\n\tif enc != nil {\n\t\treturn registeredEncoder{enc}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tenc := typeEncoders[ptrType.Elem().String()]\n\t\tif enc != nil {\n\t\t\treturn registeredEncoder{\n\t\t\t\tValEncoder: \u0026jsoniter.OptionalEncoder{\n\t\t\t\t\tValueEncoder: enc,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// EncoderOfRegistered returns a value encoder of a registered type.",
      "function_statement": "// EncoderOfRegistered returns a value encoder of a registered type.",
      "start_line": 32,
      "end_line": 49,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "typeEncoders = map[string]jsoniter.ValEncoder{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "registeredEncoder struct{ jsoniter.ValEncoder }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "PtrType interface {\n\tType\n\tElem() Type\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_optional.go",
          "code_snippet": "OptionalEncoder struct {\n\tValueEncoder ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/lazy.go:LazyEncoderOf",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "LazyEncoderOf",
      "signature": "(encodeExtension) LazyEncoderOf (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) LazyEncoderOf(typ reflect2.Type) jsoniter.ValEncoder {\n\treturn \u0026lazyEncoder{resolve: func() jsoniter.ValEncoder {\n\t\treturn config.EncoderOf(typ)\n\t}}\n}",
      "function_comment": "// LazyEncoderOf returns a lazy encoder for type.",
      "function_statement": "// LazyEncoderOf returns a lazy encoder for type.",
      "start_line": 17,
      "end_line": 21,
      "file_path": "./dialect/gremlin/encoding/graphson/lazy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "lazyEncoder struct {\n\tjsoniter.ValEncoder\n\tresolve func() jsoniter.ValEncoder\n\tonce    sync.Once\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:create",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "create",
      "signature": "(a *Atlas) create (ctx context.Context, tables ...*Table) (err error)",
      "ground_truth": "func (a *Atlas) create(ctx context.Context, tables ...*Table) (err error) {\n\tif a.universalID {\n\t\ttables = append(tables, NewTypesTable())\n\t}\n\tif a.driver != nil {\n\t\ta.sqlDialect, err = a.entDialect(ctx, a.driver)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tc, err := sqlclient.OpenURL(ctx, a.url)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer c.Close()\n\t\ta.sqlDialect, err = a.entDialect(ctx, entsql.OpenDB(a.dialect, c.DB))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tdefer func() { a.sqlDialect = nil }()\n\tif err := a.sqlDialect.init(ctx); err != nil {\n\t\treturn err\n\t}\n\ta.atDriver, err = a.sqlDialect.atOpen(a.sqlDialect)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() { a.atDriver = nil }()\n\tplan, err := a.planInspect(ctx, a.sqlDialect, \"changes\", tables)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"sql/schema: %w\", err)\n\t}\n\tif len(plan.Changes) == 0 {\n\t\treturn nil\n\t}\n\t// Open a transaction for backwards compatibility,\n\t// even if the migration is not transactional.\n\ttx, err := a.sqlDialect.Tx(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\ta.atDriver, err = a.sqlDialect.atOpen(tx)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Apply plan (changes).\n\tvar applier Applier = ApplyFunc(func(ctx context.Context, tx dialect.ExecQuerier, plan *migrate.Plan) error {\n\t\tfor _, c := range plan.Changes {\n\t\t\tif err := tx.Exec(ctx, c.Cmd, c.Args, nil); err != nil {\n\t\t\t\tif c.Comment != \"\" {\n\t\t\t\t\terr = fmt.Errorf(\"%s: %w\", c.Comment, err)\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\tfor i := len(a.applyHook) - 1; i \u003e= 0; i-- {\n\t\tapplier = a.applyHook[i](applier)\n\t}\n\tif err = applier.Apply(ctx, tx, plan); err != nil {\n\t\treturn errors.Join(fmt.Errorf(\"sql/schema: %w\", err), tx.Rollback())\n\t}\n\treturn tx.Commit()\n}",
      "function_comment": "// create is the Atlas engine based online migration.",
      "function_statement": "// create is the Atlas engine based online migration.",
      "start_line": 593,
      "end_line": 658,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "func NewTypesTable() *Table {\n\treturn NewTable(TypeTable).\n\t\tAddPrimary(\u0026Column{Name: \"id\", Type: field.TypeUint, Increment: true}).\n\t\tAddColumn(\u0026Column{Name: \"type\", Type: field.TypeString, Unique: true})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) entDialect(ctx context.Context, drv dialect.Driver) (sqlDialect, error) {\n\tvar d sqlDialect\n\tswitch a.dialect {\n\tcase dialect.MySQL:\n\t\td = \u0026MySQL{Driver: drv}\n\tcase dialect.SQLite:\n\t\td = \u0026SQLite{Driver: drv, WithForeignKeys: a.withForeignKeys}\n\tcase dialect.Postgres:\n\t\td = \u0026Postgres{Driver: drv}\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"sql/schema: unsupported dialect %q\", a.dialect)\n\t}\n\tif err := d.init(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\treturn d, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/driver.go",
          "code_snippet": "func OpenDB(dialect string, db *sql.DB) *Driver {\n\treturn NewDriver(dialect, Conn{db, dialect})\n}",
          "ref_module": "entsql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "sqlDialect interface {\n\tatBuilder\n\tdialect.Driver\n\tinit(context.Context) error\n\ttableExist(context.Context, dialect.ExecQuerier, string) (bool, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) planInspect(ctx context.Context, conn dialect.ExecQuerier, name string, tables []*Table) (*migrate.Plan, error) {\n\tcurrent, err := a.atDriver.InspectSchema(ctx, a.schema, \u0026schema.InspectOptions{\n\t\tTables: func() (t []string) {\n\t\t\tfor i := range tables {\n\t\t\t\tt = append(t, tables[i].Name)\n\t\t\t}\n\t\t\treturn t\n\t\t}(),\n\t\t// Ent supports table-level inspection only.\n\t\tMode: schema.InspectSchemas | schema.InspectTables,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar types []string\n\tif a.universalID {\n\t\ttypes, err = a.loadTypes(ctx, conn)\n\t\tif err != nil \u0026\u0026 !errors.Is(err, errTypeTableNotFound) {\n\t\t\treturn nil, err\n\t\t}\n\t\ta.types = types\n\t}\n\trealm, err := a.StateReader(tables...).ReadState(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar desired *schema.Schema\n\tswitch {\n\tcase realm != nil \u0026\u0026 len(realm.Schemas) \u003e 0:\n\t\tdesired = realm.Schemas[0]\n\tdefault:\n\t\tdesired = \u0026schema.Schema{}\n\t}\n\tdesired.Name, desired.Attrs = current.Name, current.Attrs\n\treturn a.diff(ctx, name, current, desired, a.types[len(types):], noQualifierOpt)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "Driver interface {\n\tExecQuerier\n\t// Tx starts and returns a new transaction.\n\t// The provided context is used until the transaction is committed or rolled back.\n\tTx(context.Context) (Tx, error)\n\t// Close closes the underlying connection.\n\tClose() error\n\t// Dialect returns the dialect name of the driver.\n\tDialect() string\n}",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Applier interface {\n\t\t// Apply applies the given migrate.Plan on the database.\n\t\tApply(context.Context, dialect.ExecQuerier, *migrate.Plan) error\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ApplyFunc func(context.Context, dialect.ExecQuerier, *migrate.Plan) error",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "ExecQuerier interface {\n\t// Exec executes a query that does not return records. For example, in SQL, INSERT or UPDATE.\n\t// It scans the result into the pointer v. For SQL drivers, it is dialect/sql.Result.\n\tExec(ctx context.Context, query string, args, v any) error\n\t// Query executes a query that returns rows, typically a SELECT in SQL.\n\t// It scans the result into the pointer v. For SQL drivers, it is *dialect/sql.Rows.\n\tQuery(ctx context.Context, query string, args, v any) error\n}",
          "ref_module": "dialect"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlclient/client.go",
          "code_snippet": "func OpenURL(ctx context.Context, u *url.URL, opts ...OpenOption) (*Client, error) {\n\tcfg := \u0026openOptions{}\n\tfor _, opt := range opts {\n\t\tif err := opt(cfg); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif u.Scheme == \"\" {\n\t\treturn nil, errors.New(\"sql/sqlclient: missing driver. See: https://atlasgo.io/url\")\n\t}\n\tv, ok := drivers.Load(u.Scheme)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"sql/sqlclient: unknown driver %q. See: https://atlasgo.io/url\", u.Scheme)\n\t}\n\tdrv := v.(*driver)\n\t// If there is a schema given and the driver allows to change the schema for the url, do it.\n\tif cfg.schema != nil {\n\t\tsc, ok := drv.parser.(SchemaChanger)\n\t\tif !ok {\n\t\t\treturn nil, ErrUnsupported\n\t\t}\n\t\tu = sc.ChangeSchema(u, *cfg.schema)\n\t}\n\tclient, err := drv.Open(ctx, u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif client.URL == nil {\n\t\tclient.URL = drv.parser.ParseURL(u)\n\t}\n\tif client.openTx == nil \u0026\u0026 drv.txOpener != nil {\n\t\tclient.openTx = drv.txOpener\n\t}\n\tif len(cfg.hooks) \u003e 0 {\n\t\tclient.hooks = cfg.hooks\n\t\tif err := client.afterOpen(ctx); err != nil {\n\t\t\treturn nil, errors.Join(err, client.DB.Close())\n\t\t}\n\t}\n\treturn client, nil\n}",
          "ref_module": "sqlclient"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlclient/client.go",
          "code_snippet": "func (c *Client) Close() error {\n\terr := c.beforeClose()\n\tfor _, closer := range append(c.closers, c.DB) {\n\t\terr = errors.Join(err, closer.Close())\n\t}\n\treturn err\n}",
          "ref_module": "sqlclient"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlclient/client.go",
          "code_snippet": "Client struct {\n\t\t// Name used when creating the client.\n\t\tName string\n\n\t\t// DB used for creating the client.\n\t\tDB *sql.DB\n\t\t// URL holds an enriched url.URL.\n\t\tURL *URL\n\n\t\t// A migration driver for the attached dialect.\n\t\tmigrate.Driver\n\t\t// Additional closers that can be closed at the\n\t\t// end of the client lifetime.\n\t\tclosers []io.Closer\n\n\t\t// Marshal and Evaluator functions for decoding\n\t\t// and encoding the schema documents.\n\t\tschemahcl.Marshaler\n\t\tschemahcl.Evaluator\n\n\t\t// Ephemeral indicates that the database we connect to is \"ephemeral\"\n\t\t// (e.g., a temporary running container). This can be set by the driver\n\t\t// that opens the client to signal to its consumers that there is no need\n\t\t// to guard against race conditions with other Atlas clients.\n\t\tEphemeral bool\n\n\t\t// Functions registered by the drivers and used for opening transactions and their clients.\n\t\topenDriver func(schema.ExecQuerier) (migrate.Driver, error)\n\t\topenTx     TxOpener\n\t\thooks      []*Hook\n\t}",
          "ref_module": "sqlclient"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Plan struct {\n\t\t// Version and Name of the plan. Provided by the user or auto-generated.\n\t\tVersion, Name string\n\n\t\t// Reversible describes if the changeset is reversible.\n\t\tReversible bool\n\n\t\t// Transactional describes if the changeset is transactional.\n\t\tTransactional bool\n\n\t\t// Changes defines the list of changeset in the plan.\n\t\tChanges []*Change\n\n\t\t// Delimiter to use for separating statements.\n\t\tDelimiter string\n\n\t\t// Directives to add to the file (not associated with any statements) besides the delimiter.\n\t\t// For example, atlas:txtar, atlas:txmode, etc.\n\t\tDirectives []string\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Change struct {\n\t\t// Cmd or statement to execute.\n\t\tCmd string\n\n\t\t// Args for placeholder parameters in the statement above.\n\t\tArgs []any\n\n\t\t// A Comment describes the change.\n\t\tComment string\n\n\t\t// Reverse contains the \"reversed\" statement(s) if\n\t\t// the command is reversible.\n\t\tReverse any // string | []string\n\n\t\t// The Source that caused this change, or nil.\n\t\tSource schema.Change\n\t}",
          "ref_module": "migrate"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/join.go",
          "code_snippet": "func Join(errs ...error) error {\n\tn := 0\n\tfor _, err := range errs {\n\t\tif err != nil {\n\t\t\tn++\n\t\t}\n\t}\n\tif n == 0 {\n\t\treturn nil\n\t}\n\te := \u0026joinError{\n\t\terrs: make([]error, 0, n),\n\t}\n\tfor _, err := range errs {\n\t\tif err != nil {\n\t\t\te.errs = append(e.errs, err)\n\t\t}\n\t}\n\treturn e\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/database/sql/driver/driver.go",
          "code_snippet": "Tx interface {\n\tCommit() error\n\tRollback() error\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        613,
        614,
        617,
        618,
        621,
        622,
        623,
        626,
        627,
        628
      ],
      "cover_details": {
        "line_cover_rate": 0.25757575757575757
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/internal/ws/conn.go:receiver",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectClosure"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestSimpleQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestQueryCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestBadResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestAuthentication"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestPartialResponse"
        }
      ],
      "name": "receiver",
      "signature": "(c *Conn) receiver () error",
      "ground_truth": "func (c *Conn) receiver() error {\n\t// handle keepalive responses\n\tc.conn.SetReadDeadline(time.Now().Add(pongWait))\n\tc.conn.SetPongHandler(func(string) error {\n\t\treturn c.conn.SetReadDeadline(time.Now().Add(pongWait))\n\t})\n\n\t// complete all in flight requests on termination\n\tdefer c.inflight.Range(func(id, ifr any) bool {\n\t\tifr.(*inflight).result \u003c- result{err: ErrConnClosed}\n\t\tc.inflight.Delete(id)\n\t\treturn true\n\t})\n\n\tfor {\n\t\t// rely on sender connection close during termination\n\t\t_, r, err := c.conn.NextReader()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t}\n\n\t\t// decode received response\n\t\tvar rsp gremlin.Response\n\t\tif err := graphson.NewDecoder(r).Decode(\u0026rsp); err != nil {\n\t\t\treturn fmt.Errorf(\"reading response: %w\", err)\n\t\t}\n\n\t\tifr, ok := c.inflight.Load(rsp.RequestID)\n\t\tif !ok {\n\t\t\t// context cancellation aborts inflight requests\n\t\t\tcontinue\n\t\t}\n\n\t\t// handle incoming response\n\t\tif done := c.receive(ifr.(*inflight), \u0026rsp); done {\n\t\t\t// stop tracking finished requests\n\t\t\tc.inflight.Delete(rsp.RequestID)\n\t\t}\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 226,
      "end_line": 265,
      "file_path": "./dialect/gremlin/internal/ws/conn.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Conn struct {\n\t\t// Underlying websocket connection.\n\t\tconn *websocket.Conn\n\n\t\t// Credentials for basic authentication.\n\t\tuser, pass string\n\n\t\t// Goroutine tracking.\n\t\tctx context.Context\n\t\tgrp *errgroup.Group\n\n\t\t// Channel of outbound requests.\n\t\tsend chan io.Reader\n\n\t\t// Map of in flight requests.\n\t\tinflight sync.Map\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "pongWait = 10 * time.Second",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "inflight struct {\n\t\t// partially received data\n\t\tfrags []graphson.RawMessage\n\n\t\t// response channel\n\t\tresult chan\u003c- result\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "result struct {\n\t\trsp *gremlin.Response\n\t\terr error\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "ErrConnClosed = errors.New(\"gremlin: server connection closed\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "Decoder interface {\n\tDecode(any) error\n}",
          "ref_module": "graphson"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "func NewDecoder(r io.Reader) Decoder {\n\treturn config.NewDecoder(r)\n}",
          "ref_module": "graphson"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) receive(ifr *inflight, rsp *gremlin.Response) bool {\n\tresult := result{rsp: rsp}\n\tswitch rsp.Status.Code {\n\tcase gremlin.StatusSuccess:\n\t\t// quickly handle non fragmented responses\n\t\tif ifr.frags == nil {\n\t\t\tbreak\n\t\t}\n\t\t// handle fragment\n\t\tfallthrough\n\tcase gremlin.StatusPartialContent:\n\t\t// append received fragment\n\t\tvar frag []graphson.RawMessage\n\t\tif err := graphson.Unmarshal(rsp.Result.Data, \u0026frag); err != nil {\n\t\t\tresult.err = fmt.Errorf(\"decoding response fragment: %w\", err)\n\t\t\tbreak\n\t\t}\n\t\tifr.frags = append(ifr.frags, frag...)\n\n\t\t// partial response requires additional fragments\n\t\tif rsp.Status.Code == gremlin.StatusPartialContent {\n\t\t\treturn false\n\t\t}\n\n\t\t// reassemble fragmented response\n\t\tif rsp.Result.Data, result.err = graphson.Marshal(ifr.frags); result.err != nil {\n\t\t\tresult.err = fmt.Errorf(\"assembling fragmented response: %w\", result.err)\n\t\t}\n\tcase gremlin.StatusAuthenticate:\n\t\t// receiver should never block\n\t\tc.grp.Go(func() error {\n\t\t\tvar buf bytes.Buffer\n\t\t\tif err := graphson.NewEncoder(\u0026buf).Encode(\n\t\t\t\tgremlin.NewAuthRequest(rsp.RequestID, c.user, c.pass),\n\t\t\t); err != nil {\n\t\t\t\treturn fmt.Errorf(\"encoding auth request: %w\", err)\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase c.send \u003c- \u0026buf:\n\t\t\tcase \u003c-c.ctx.Done():\n\t\t\t}\n\t\t\treturn c.ctx.Err()\n\t\t})\n\t\treturn false\n\t}\n\n\tifr.result \u003c- result\n\treturn true\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) SetReadDeadline(t time.Time) error {\n\treturn c.conn.SetReadDeadline(t)\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) SetPongHandler(h func(appData string) error) {\n\tif h == nil {\n\t\th = func(string) error { return nil }\n\t}\n\tc.handlePong = h\n}",
          "ref_module": "websocket"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/conn.go",
          "code_snippet": "func (c *Conn) NextReader() (messageType int, r io.Reader, err error) {\n\t// Close previous reader, only relevant for decompression.\n\tif c.reader != nil {\n\t\tc.reader.Close()\n\t\tc.reader = nil\n\t}\n\n\tc.messageReader = nil\n\tc.readLength = 0\n\n\tfor c.readErr == nil {\n\t\tframeType, err := c.advanceFrame()\n\t\tif err != nil {\n\t\t\tc.readErr = hideTempErr(err)\n\t\t\tbreak\n\t\t}\n\n\t\tif frameType == TextMessage || frameType == BinaryMessage {\n\t\t\tc.messageReader = \u0026messageReader{c}\n\t\t\tc.reader = c.messageReader\n\t\t\tif c.readDecompress {\n\t\t\t\tc.reader = c.newDecompressionReader(c.reader)\n\t\t\t}\n\t\t\treturn frameType, c.reader, nil\n\t\t}\n\t}\n\n\t// Applications that do handle the error returned from this method spin in\n\t// tight loop on connection failure. To help application developers detect\n\t// this error, panic on repeated reads to the failed connection.\n\tc.readErrCount++\n\tif c.readErrCount \u003e= 1000 {\n\t\tpanic(\"repeated read on failed websocket connection\")\n\t}\n\n\treturn noFrame, nil, c.readErr\n}",
          "ref_module": "websocket"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) Add(d Duration) Time {\n\tdsec := int64(d / 1e9)\n\tnsec := t.nsec() + int32(d%1e9)\n\tif nsec \u003e= 1e9 {\n\t\tdsec++\n\t\tnsec -= 1e9\n\t} else if nsec \u003c 0 {\n\t\tdsec--\n\t\tnsec += 1e9\n\t}\n\tt.wall = t.wall\u0026^nsecMask | uint64(nsec) // update nsec\n\tt.addSec(dsec)\n\tif t.wall\u0026hasMonotonic != 0 {\n\t\tte := t.ext + int64(d)\n\t\tif d \u003c 0 \u0026\u0026 te \u003e t.ext || d \u003e 0 \u0026\u0026 te \u003c t.ext {\n\t\t\t// Monotonic clock reading now out of range; degrade to wall-only.\n\t\t\tt.stripMono()\n\t\t} else {\n\t\t\tt.ext = te\n\t\t}\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := runtimeNow()\n\tif mono == 0 {\n\t\treturn Time{uint64(nsec), sec + unixToInternal, Local}\n\t}\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sync/hashtriemap.go",
          "code_snippet": "func (m *Map) Range(f func(key, value any) bool) {\n\tm.m.Range(f)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sync/hashtriemap.go",
          "code_snippet": "func (m *Map) Delete(key any) {\n\tm.m.Delete(key)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sync/hashtriemap.go",
          "code_snippet": "func (m *Map) Load(key any) (value any, ok bool) {\n\treturn m.m.Load(key)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        226,
        227,
        228,
        229,
        234,
        240,
        241,
        242,
        243,
        244,
        245,
        248,
        249,
        253,
        254,
        260,
        261,
        262,
        263
      ],
      "cover_details": {
        "line_cover_rate": 0.475
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/extension.go:DecoderOfRegistered",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoderOfRegistered",
      "signature": "(decodeExtension) DecoderOfRegistered (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) DecoderOfRegistered(typ reflect2.Type) jsoniter.ValDecoder {\n\tdec := typeDecoders[typ.String()]\n\tif dec != nil {\n\t\treturn registeredDecoder{dec}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tdec := typeDecoders[ptrType.Elem().String()]\n\t\tif dec != nil {\n\t\t\treturn registeredDecoder{\n\t\t\t\tValDecoder: \u0026jsoniter.OptionalDecoder{\n\t\t\t\t\tValueType:    ptrType.Elem(),\n\t\t\t\t\tValueDecoder: dec,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoderOfRegistered returns a value decoder of a registered type.",
      "function_statement": "// DecoderOfRegistered returns a value decoder of a registered type.",
      "start_line": 62,
      "end_line": 80,
      "file_path": "./dialect/gremlin/encoding/graphson/extension.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "typeDecoders = map[string]jsoniter.ValDecoder{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "registeredDecoder struct{ jsoniter.ValDecoder }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "PtrType interface {\n\tType\n\tElem() Type\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_optional.go",
          "code_snippet": "OptionalDecoder struct {\n\tValueType    reflect2.Type\n\tValueDecoder ValDecoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        79
      ],
      "cover_details": {
        "line_cover_rate": 0.5263157894736842
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:UpdateStructDescriptor",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "UpdateStructDescriptor",
      "signature": "(ext encodeExtension) UpdateStructDescriptor (desc *jsoniter.StructDescriptor)",
      "ground_truth": "func (ext encodeExtension) UpdateStructDescriptor(desc *jsoniter.StructDescriptor) {\n\tfor _, binding := range desc.Fields {\n\t\tif tag, ok := binding.Field.Tag().Lookup(\"graphson\"); ok \u0026\u0026 tag != \"-\" {\n\t\t\tif enc := ext.DecoratorOfStructField(binding.Encoder, tag); enc != nil {\n\t\t\t\tbinding.Encoder = enc\n\t\t\t}\n\t\t}\n\t}\n}",
      "function_comment": "// UpdateStructDescriptor decorates struct field encoders for graphson tags.",
      "function_statement": "// UpdateStructDescriptor decorates struct field encoders for graphson tags.",
      "start_line": 46,
      "end_line": 54,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/struct.go",
          "code_snippet": "func (encodeExtension) DecoratorOfStructField(enc jsoniter.ValEncoder, tag string) jsoniter.ValEncoder {\n\ttyp, _ := parseTag(tag)\n\tif typ == \"\" {\n\t\treturn nil\n\t}\n\n\tencoder, ok := enc.(typeEncoder)\n\tif !ok {\n\t\tencoder = typeEncoder{ValEncoder: enc}\n\t}\n\tencoder.Type = Type(typ)\n\n\treturn encoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_extension.go",
          "code_snippet": "StructDescriptor struct {\n\tType   reflect2.Type\n\tFields []*Binding\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "StructField interface {\n\tOffset() uintptr\n\tName() string\n\tPkgPath() string\n\tType() Type\n\tTag() reflect.StructTag\n\tIndex() []int\n\tAnonymous() bool\n\tSet(obj interface{}, value interface{})\n\tUnsafeSet(obj unsafe.Pointer, value unsafe.Pointer)\n\tGet(obj interface{}) interface{}\n\tUnsafeGet(obj unsafe.Pointer) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_extension.go",
          "code_snippet": "Binding struct {\n\tlevels    []int\n\tField     reflect2.StructField\n\tFromNames []string\n\tToNames   []string\n\tEncoder   ValEncoder\n\tDecoder   ValDecoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func (tag StructTag) Lookup(key string) (value string, ok bool) {\n\t// When modifying this code, also update the validateStructTag code\n\t// in cmd/vet/structtag.go.\n\n\tfor tag != \"\" {\n\t\t// Skip leading space.\n\t\ti := 0\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] == ' ' {\n\t\t\ti++\n\t\t}\n\t\ttag = tag[i:]\n\t\tif tag == \"\" {\n\t\t\tbreak\n\t\t}\n\n\t\t// Scan to colon. A space, a quote or a control character is a syntax error.\n\t\t// Strictly speaking, control chars include the range [0x7f, 0x9f], not just\n\t\t// [0x00, 0x1f], but in practice, we ignore the multi-byte control characters\n\t\t// as it is simpler to inspect the tag's bytes than the tag's runes.\n\t\ti = 0\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] \u003e ' ' \u0026\u0026 tag[i] != ':' \u0026\u0026 tag[i] != '\"' \u0026\u0026 tag[i] != 0x7f {\n\t\t\ti++\n\t\t}\n\t\tif i == 0 || i+1 \u003e= len(tag) || tag[i] != ':' || tag[i+1] != '\"' {\n\t\t\tbreak\n\t\t}\n\t\tname := string(tag[:i])\n\t\ttag = tag[i+1:]\n\n\t\t// Scan quoted string to find value.\n\t\ti = 1\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] != '\"' {\n\t\t\tif tag[i] == '\\\\' {\n\t\t\t\ti++\n\t\t\t}\n\t\t\ti++\n\t\t}\n\t\tif i \u003e= len(tag) {\n\t\t\tbreak\n\t\t}\n\t\tqvalue := string(tag[:i+1])\n\t\ttag = tag[i+1:]\n\n\t\tif key == name {\n\t\t\tvalue, err := strconv.Unquote(qvalue)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn value, true\n\t\t}\n\t}\n\treturn \"\", false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        46,
        47,
        48,
        49,
        50,
        51
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:EncoderOfNative",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "EncoderOfNative",
      "signature": "(encodeExtension) EncoderOfNative (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) EncoderOfNative(typ reflect2.Type) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Encoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// EncoderOfNative returns a value encoder of a native type.",
      "function_statement": "// EncoderOfNative returns a value encoder of a native type.",
      "start_line": 19,
      "end_line": 26,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Encoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        19,
        20,
        21,
        22,
        23,
        24
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "Decode",
      "signature": "(dec *mapDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec *mapDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tmapType := dec.mapType\n\tif mapType.UnsafeIsNil(ptr) {\n\t\tmapType.UnsafeSet(ptr, mapType.UnsafeMakeMap(0))\n\t}\n\n\tvar key unsafe.Pointer\n\tif !iter.ReadArrayCB(func(iter *jsoniter.Iterator) bool {\n\t\tif key == nil {\n\t\t\tkey = dec.keyType.UnsafeNew()\n\t\t\tdec.keyDec.Decode(key, iter)\n\t\t\treturn iter.Error == nil\n\t\t}\n\n\t\telem := dec.elemType.UnsafeNew()\n\t\tdec.elemDec.Decode(elem, iter)\n\t\tif iter.Error != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tmapType.UnsafeSetIndex(ptr, key, elem)\n\t\tkey = nil\n\t\treturn true\n\t}) {\n\t\treturn\n\t}\n\n\tif key != nil {\n\t\titer.ReportError(\"decode map\", \"odd number of map items\")\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 86,
      "end_line": 116,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapDecoder struct {\n\tmapType  reflect2.MapType\n\tkeyType  reflect2.Type\n\telemType reflect2.Type\n\tkeyDec   jsoniter.ValDecoder\n\telemDec  jsoniter.ValDecoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_array.go",
          "code_snippet": "func (iter *Iterator) ReadArrayCB(callback func(*Iterator) bool) (ret bool) {\n\tc := iter.nextToken()\n\tif c == '[' {\n\t\tif !iter.incrementDepth() {\n\t\t\treturn false\n\t\t}\n\t\tc = iter.nextToken()\n\t\tif c != ']' {\n\t\t\titer.unreadByte()\n\t\t\tif !callback(iter) {\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tc = iter.nextToken()\n\t\t\tfor c == ',' {\n\t\t\t\tif !callback(iter) {\n\t\t\t\t\titer.decrementDepth()\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tc = iter.nextToken()\n\t\t\t}\n\t\t\tif c != ']' {\n\t\t\t\titer.ReportError(\"ReadArrayCB\", \"expect ] in the end, but found \"+string([]byte{c}))\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn iter.decrementDepth()\n\t\t}\n\t\treturn iter.decrementDepth()\n\t}\n\tif c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn true // null\n\t}\n\titer.ReportError(\"ReadArrayCB\", \"expect [ or n, but found \"+string([]byte{c}))\n\treturn false\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "false = 0 != 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        86,
        87,
        88,
        89,
        90,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        100,
        101,
        102,
        103,
        104,
        106,
        107,
        108,
        109,
        110,
        111,
        113,
        114,
        115
      ],
      "cover_details": {
        "line_cover_rate": 0.8387096774193549
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atUniqueC",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atUniqueC",
      "signature": "(d *SQLite) atUniqueC (t1 *Table, c1 *Column, t2 *schema.Table, c2 *schema.Column)",
      "ground_truth": "func (d *SQLite) atUniqueC(t1 *Table, c1 *Column, t2 *schema.Table, c2 *schema.Column) {\n\t// For UNIQUE columns, SQLite create an implicit index named\n\t// \"sqlite_autoindex_\u003ctable\u003e_\u003ci\u003e\". Ent uses the PostgreSQL approach\n\t// in its migration, and name these indexes as \"\u003ctable\u003e_\u003ccolumn\u003e_key\".\n\tfor _, idx := range t1.Indexes {\n\t\t// Index also defined explicitly, and will be add in atIndexes.\n\t\tif idx.Unique \u0026\u0026 d.atImplicitIndexName(idx, t1, c1) {\n\t\t\treturn\n\t\t}\n\t}\n\tt2.AddIndexes(schema.NewUniqueIndex(fmt.Sprintf(\"%s_%s_key\", t2.Name, c1.Name)).AddColumns(c2))\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 149,
      "end_line": 160,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\tName       string                  // index name.\n\tUnique     bool                    // uniqueness.\n\tColumns    []*Column               // actual table columns.\n\tAnnotation *entsql.IndexAnnotation // index annotation.\n\tcolumns    []string                // columns loaded from query scan.\n\trealname   string                  // real name in the database (Postgres only).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "func (d *SQLite) atImplicitIndexName(idx *Index, t1 *Table, c1 *Column) bool {\n\tif idx.Name == c1.Name {\n\t\treturn true\n\t}\n\tp := fmt.Sprintf(\"sqlite_autoindex_%s_\", t1.Name)\n\tif !strings.HasPrefix(idx.Name, p) {\n\t\treturn false\n\t}\n\ti, err := strconv.ParseInt(strings.TrimPrefix(idx.Name, p), 10, 64)\n\treturn err == nil \u0026\u0026 i \u003e 0\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddIndexes(indexes ...*Index) *Table {\n\tfor _, idx := range indexes {\n\t\tidx.Table = t\n\t}\n\tt.Indexes = append(t.Indexes, indexes...)\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddColumns(columns ...*Column) *Index {\n\tfor _, c := range columns {\n\t\tif !c.hasIndex(i) {\n\t\t\tc.Indexes = append(c.Indexes, i)\n\t\t}\n\t\ti.Parts = append(i.Parts, \u0026IndexPart{SeqNo: len(i.Parts), C: c})\n\t}\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewUniqueIndex(name string) *Index {\n\treturn NewIndex(name).SetUnique(true)\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        149,
        150,
        151,
        152,
        153,
        159
      ],
      "cover_details": {
        "line_cover_rate": 0.5
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/util.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeSyntaxError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "Decode",
      "signature": "(dec typeDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec typeDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tif iter.WhatIsNext() != jsoniter.ObjectValue {\n\t\tdec.ValDecoder.Decode(ptr, iter)\n\t\treturn\n\t}\n\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\tvar tv typeValue\n\tif err := jsoniter.Unmarshal(data, \u0026tv); err != nil {\n\t\titer.ReportError(\"unmarshal type value\", err.Error())\n\t\treturn\n\t}\n\n\tif err := dec.CheckType(tv.Type); err != nil {\n\t\titer.ReportError(\"check type\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(tv.Value)\n\tdefer config.ReturnIterator(it)\n\n\tdec.ValDecoder.Decode(ptr, it)\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode value\", it.Error.Error())\n\t}\n}",
      "function_comment": "// Decode belongs to jsoniter.ValDecoder interface.",
      "function_statement": "// Decode belongs to jsoniter.ValDecoder interface.",
      "start_line": 61,
      "end_line": 90,
      "file_path": "./dialect/gremlin/encoding/graphson/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeValue struct {\n\t\tType  Type\n\t\tValue jsoniter.RawMessage\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeChecker interface {\n\t\tCheckType(Type) error\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "ObjectValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Unmarshal(data []byte, v interface{}) error {\n\treturn ConfigDefault.Unmarshal(data, v)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/pool.go",
          "code_snippet": "IteratorPool interface {\n\tBorrowIterator(data []byte) *Iterator\n\tReturnIterator(iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        69,
        70,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/schema.go:DDL",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "DDL",
      "signature": "DDL (ctx context.Context, args DDLArgs) (string, error)",
      "ground_truth": "func DDL(ctx context.Context, args DDLArgs) (string, error) {\n\targs.Options = append([]migrate.PlanOption{func(o *migrate.PlanOptions) {\n\t\to.Mode = migrate.PlanModeDump\n\t\to.Indent = \"  \"\n\t}}, args.Options...)\n\td, ok := drivers(args.Version)[args.Dialect]\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"unsupported dialect %q\", args.Dialect)\n\t}\n\ta := \u0026Atlas{\n\t\tsqlDialect:  d,\n\t\tdialect:     args.Dialect,\n\t\thashSymbols: args.HashSymbols,\n\t}\n\tr, err := a.StateReader(args.Tables...).ReadState(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t// Since the Atlas version bundled with Ent does not support view management,\n\t// simply spit out the definition instead of letting Atlas plan them.\n\tvar vs []*schema.View\n\tfor _, s := range r.Schemas {\n\t\tvs = append(vs, s.Views...)\n\t\ts.Views = nil\n\t}\n\tvar c schema.Changes\n\tif slices.ContainsFunc(args.Tables, func(t *Table) bool { return t.Schema != \"\" }) {\n\t\tc, err = d.RealmDiff(\u0026schema.Realm{}, r)\n\t} else {\n\t\tc, err = d.SchemaDiff(\u0026schema.Schema{}, r.Schemas[0])\n\t}\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tp, err := d.PlanChanges(ctx, \"dump\", c, args.Options...)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tfor _, v := range vs {\n\t\tq, _ := sql.Dialect(args.Dialect).\n\t\t\tCreateView(v.Name).\n\t\t\tSchema(v.Schema.Name).\n\t\t\tColumns(func(cols []*schema.Column) (bs []*sql.ColumnBuilder) {\n\t\t\t\tfor _, c := range cols {\n\t\t\t\t\tbs = append(bs, sql.Dialect(args.Dialect).Column(c.Name).Type(c.Type.Raw))\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}(v.Columns)...).\n\t\t\tAs(sql.Raw(v.Def)).\n\t\t\tQuery()\n\t\tp.Changes = append(p.Changes, \u0026migrate.Change{\n\t\t\tCmd:     q,\n\t\t\tComment: fmt.Sprintf(\"Add %q view\", v.Name),\n\t\t})\n\t}\n\tfor _, t := range args.Tables {\n\t\tp.Directives = append(p.Directives, fmt.Sprintf(\n\t\t\t\"-- atlas:pos %s%s[type=%s] %s\",\n\t\t\tfunc() string {\n\t\t\t\tif t.Schema != \"\" {\n\t\t\t\t\treturn t.Schema + \"[type=schema].\"\n\t\t\t\t}\n\t\t\t\treturn \"\"\n\t\t\t}(),\n\t\t\tt.Name,\n\t\t\tfunc() string {\n\t\t\t\tif t.View {\n\t\t\t\t\treturn \"view\"\n\t\t\t\t}\n\t\t\t\treturn \"table\"\n\t\t\t}(),\n\t\t\tt.Pos,\n\t\t))\n\t}\n\tf, err := migrate.DefaultFormatter.FormatFile(p)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(f.Bytes()), nil\n}",
      "function_comment": "// DDL the schema DDL for the given tables.",
      "function_statement": "// DDL the schema DDL for the given tables.",
      "start_line": 614,
      "end_line": 693,
      "file_path": "./dialect/sql/schema/schema.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "DDLArgs struct {\n\t// Dialect and Version of the target database.\n\tDialect, Version string\n\t// HashSymbols indicates whether to hash long symbols in the DDL.\n\tHashSymbols bool\n\t// Tables to dump.\n\tTables []*Table\n\t// Options to pass to the migration plan engine.\n\tOptions []migrate.PlanOption\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "drivers = func(v string) map[string]driver {\n\treturn map[string]driver{\n\t\tentdialect.SQLite: {\n\t\t\t\u0026SQLite{\n\t\t\t\tWithForeignKeys: true,\n\t\t\t\tDriver:          nopDriver{dialect: entdialect.SQLite},\n\t\t\t},\n\t\t\tsqlite.DefaultDiff,\n\t\t\tsqlite.DefaultPlan,\n\t\t},\n\t\tentdialect.MySQL: {\n\t\t\t\u0026MySQL{\n\t\t\t\tversion: v,\n\t\t\t\tDriver:  nopDriver{dialect: entdialect.MySQL},\n\t\t\t},\n\t\t\tmysql.DefaultDiff,\n\t\t\tmysql.DefaultPlan,\n\t\t},\n\t\tentdialect.Postgres: {\n\t\t\t\u0026Postgres{\n\t\t\t\tversion: v,\n\t\t\t\tDriver:  nopDriver{dialect: entdialect.Postgres},\n\t\t\t},\n\t\t\tpostgres.DefaultDiff,\n\t\t\tpostgres.DefaultPlan,\n\t\t},\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) StateReader(tables ...*Table) migrate.StateReaderFunc {\n\treturn func(ctx context.Context) (*schema.Realm, error) {\n\t\tif a.sqlDialect == nil {\n\t\t\tdrv, err := a.entDialect(ctx, a.driver)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ta.sqlDialect = drv\n\t\t}\n\t\tif a.hashSymbols {\n\t\t\ta.setupTables(tables)\n\t\t}\n\t\treturn a.realm(tables)\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (v *ViewBuilder) Query() (string, []any) {\n\tv.WriteString(\"CREATE VIEW \")\n\tif v.exists {\n\t\tv.WriteString(\"IF NOT EXISTS \")\n\t}\n\tv.writeSchema(v.schema)\n\tv.Ident(v.name)\n\tif len(v.columns) \u003e 0 {\n\t\tv.Pad().Wrap(func(b *Builder) { b.JoinComma(v.columns...) })\n\t}\n\tv.WriteString(\" AS \")\n\tv.Join(v.as)\n\treturn v.String(), v.args\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (v *ViewBuilder) As(as Querier) *ViewBuilder {\n\tv.as = as\n\treturn v\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (v *ViewBuilder) Columns(columns ...*ColumnBuilder) *ViewBuilder {\n\tv.columns = make([]Querier, 0, len(columns))\n\tfor i := range columns {\n\t\tv.columns = append(v.columns, columns[i])\n\t}\n\treturn v\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (v *ViewBuilder) Schema(name string) *ViewBuilder {\n\tv.schema = name\n\treturn v\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) CreateView(name string) *ViewBuilder {\n\tb := CreateView(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Dialect(name string) *DialectBuilder {\n\treturn \u0026DialectBuilder{name}\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "ColumnBuilder struct {\n\tBuilder\n\ttyp  string // column type.\n\tname string // column name.\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (c *ColumnBuilder) Type(t string) *ColumnBuilder {\n\tc.typ = t\n\treturn c\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func (d *DialectBuilder) Column(name string) *ColumnBuilder {\n\tb := Column(name)\n\tb.SetDialect(d.dialect)\n\treturn b\n}",
          "ref_module": "sql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/builder.go",
          "code_snippet": "func Raw(s string) Querier { return \u0026raw{s} }",
          "ref_module": "sql"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanOption func(*PlanOptions)",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanOptions struct {\n\t\t// PlanWithSchemaQualifier allows setting a custom schema to prefix\n\t\t// tables and other resources. An empty string indicates no qualifier.\n\t\tSchemaQualifier *string\n\t\t// Indent is the string to use for indentation.\n\t\t// If empty, no indentation is used.\n\t\tIndent string\n\t\t// Mode represents the migration planning mode to be used. If not specified, the driver picks its default.\n\t\t// This is useful to indicate to the driver whether the context is a live database, an empty one, or the\n\t\t// versioned migration workflow.\n\t\tMode PlanMode\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanModeDump",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func (f StateReaderFunc) ReadState(ctx context.Context) (*schema.Realm, error) {\n\treturn f(ctx)\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "View struct {\n\t\tName     string\n\t\tDef      string\n\t\tSchema   *Schema\n\t\tColumns  []*Column\n\t\tAttrs    []Attr     // Attrs and options.\n\t\tIndexes  []*Index   // Indexes on materialized view.\n\t\tTriggers []*Trigger // Triggers on the view.\n\t\tDeps     []Object   // Objects this view depends on.\n\t\tRefs     []Object   // Objects that depends on this view.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Realm struct {\n\t\tSchemas []*Schema\n\t\tAttrs   []Attr\n\t\tObjects []Object // Realm-level objects (e.g., users or extensions).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Changes []Change",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Differ interface {\n\t\t// RealmDiff returns a diff report for migrating a realm\n\t\t// (or a database) from state \"from\" to state \"to\". An error\n\t\t// is returned if such step is not possible.\n\t\tRealmDiff(from, to *Realm, opts ...DiffOption) ([]Change, error)\n\n\t\t// SchemaDiff returns a diff report for migrating a schema\n\t\t// from state \"from\" to state \"to\". An error is returned\n\t\t// if such step is not possible.\n\t\tSchemaDiff(from, to *Schema, opts ...DiffOption) ([]Change, error)\n\n\t\t// TableDiff returns a diff report for migrating a table\n\t\t// from state \"from\" to state \"to\". An error is returned\n\t\t// if such step is not possible.\n\t\tTableDiff(from, to *Table, opts ...DiffOption) ([]Change, error)\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanApplier interface {\n\t\t// PlanChanges returns a migration plan for applying the given changeset.\n\t\tPlanChanges(context.Context, string, []schema.Change, ...PlanOption) (*Plan, error)\n\n\t\t// ApplyChanges is responsible for applying the given changeset.\n\t\t// An error may return from ApplyChanges if the driver is unable\n\t\t// to execute a change.\n\t\tApplyChanges(context.Context, []schema.Change, ...PlanOption) error\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "ColumnType struct {\n\t\tType Type\n\t\tRaw  string\n\t\tNull bool\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Plan struct {\n\t\t// Version and Name of the plan. Provided by the user or auto-generated.\n\t\tVersion, Name string\n\n\t\t// Reversible describes if the changeset is reversible.\n\t\tReversible bool\n\n\t\t// Transactional describes if the changeset is transactional.\n\t\tTransactional bool\n\n\t\t// Changes defines the list of changeset in the plan.\n\t\tChanges []*Change\n\n\t\t// Delimiter to use for separating statements.\n\t\tDelimiter string\n\n\t\t// Directives to add to the file (not associated with any statements) besides the delimiter.\n\t\t// For example, atlas:txtar, atlas:txmode, etc.\n\t\tDirectives []string\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Change struct {\n\t\t// Cmd or statement to execute.\n\t\tCmd string\n\n\t\t// Args for placeholder parameters in the statement above.\n\t\tArgs []any\n\n\t\t// A Comment describes the change.\n\t\tComment string\n\n\t\t// Reverse contains the \"reversed\" statement(s) if\n\t\t// the command is reversible.\n\t\tReverse any // string | []string\n\n\t\t// The Source that caused this change, or nil.\n\t\tSource schema.Change\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/dir.go",
          "code_snippet": "func (t TemplateFormatter) FormatFile(p *Plan) (File, error) {\n\tfiles, err := t.Format(p)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(files) != 1 {\n\t\treturn nil, fmt.Errorf(\"expected a single file, got %d\", len(files))\n\t}\n\treturn files[0], nil\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/dir.go",
          "code_snippet": "DefaultFormatter = TemplateFormatter{\n\t\t{\n\t\t\tN: template.Must(template.New(\"\").Funcs(templateFuncs).Parse(\n\t\t\t\t\"{{ with .Version }}{{ . }}{{ else }}{{ now }}{{ end }}{{ with .Name }}_{{ . }}{{ end }}.sql\",\n\t\t\t)),\n\t\t\tC: template.Must(template.New(\"\").Funcs(templateFuncs).Parse(\n\t\t\t\t`{{ directives . }}{{ range .Changes }}{{ with .Comment }}{{ printf \"-- %s%s\\n\" (slice . 0 1 | upper ) (slice . 1) }}{{ end }}{{ printf \"%s%s\\n\" .Cmd (or $.Delimiter \";\") }}{{ end }}`,\n\t\t\t)),\n\t\t},\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/dir.go",
          "code_snippet": "File interface {\n\t\t// Name returns the name of the migration file.\n\t\tName() string\n\t\t// Desc returns the description of the migration File.\n\t\tDesc() string\n\t\t// Version returns the version of the migration File.\n\t\tVersion() string\n\t\t// Bytes returns the read content of the file.\n\t\tBytes() []byte\n\t\t// Stmts returns the set of SQL statements this file holds.\n\t\tStmts() ([]string, error)\n\t\t// StmtDecls returns the set of SQL statements this file holds alongside its preceding comments.\n\t\tStmtDecls() ([]*Stmt, error)\n\t}",
          "ref_module": "migrate"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/slices/slices.go",
          "code_snippet": "func ContainsFunc[S ~[]E, E any](s S, f func(E) bool) bool {\n\treturn IndexFunc(s, f) \u003e= 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        614,
        615,
        616,
        617,
        618,
        619,
        620,
        623,
        624,
        625,
        626,
        627,
        628,
        629,
        634,
        635,
        636,
        637,
        638,
        639,
        640,
        641,
        642,
        643,
        644,
        645,
        648,
        649,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        659,
        660,
        664,
        665,
        666,
        667,
        669,
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        679,
        680,
        681,
        682,
        683,
        688,
        689,
        692
      ],
      "cover_details": {
        "line_cover_rate": 0.7125
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/error.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/error_test.go",
          "func_name": "TestErrorCodec"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        }
      ],
      "name": "Encode",
      "signature": "(ec errorCodec) Encode (_ unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (ec errorCodec) Encode(_ unsafe.Pointer, stream *jsoniter.Stream) {\n\tif stream.Error == nil {\n\t\tstream.Error = ec.error\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 31,
      "end_line": 35,
      "file_path": "./dialect/gremlin/encoding/graphson/error.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "errorCodec struct{ error }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        31,
        32,
        33,
        34
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atIncrementC",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atIncrementC",
      "signature": "(d *SQLite) atIncrementC (t *schema.Table, c *schema.Column)",
      "ground_truth": "func (d *SQLite) atIncrementC(t *schema.Table, c *schema.Column) {\n\tif c.Default != nil {\n\t\tt.Attrs = removeAttr(t.Attrs, reflect.TypeOf(\u0026sqlite.AutoIncrement{}))\n\t} else {\n\t\tc.AddAttrs(\u0026sqlite.AutoIncrement{})\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 174,
      "end_line": 180,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func removeAttr(attrs []schema.Attr, t reflect.Type) []schema.Attr {\n\tf := make([]schema.Attr, 0, len(attrs))\n\tfor _, a := range attrs {\n\t\tif reflect.TypeOf(a) != t {\n\t\t\tf = append(f, a)\n\t\t}\n\t}\n\treturn f\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/inspect.go",
          "code_snippet": "AutoIncrement struct {\n\t\tschema.Attr\n\t\t// Seq represents the value in sqlite_sequence table.\n\t\t// i.e. https://www.sqlite.org/fileformat2.html#seqtab.\n\t\t//\n\t\t// Setting this value manually to \u003e 0 indicates that\n\t\t// a custom value is necessary and should be handled\n\t\t// on migrate.\n\t\tSeq int64\n\t}",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) AddAttrs(attrs ...Attr) *Column {\n\tc.Attrs = append(c.Attrs, attrs...)\n\treturn c\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        174,
        175,
        177,
        178,
        179
      ],
      "cover_details": {
        "line_cover_rate": 0.7142857142857143
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atIndex",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atIndex",
      "signature": "(d *SQLite) atIndex (idx1 *Index, t2 *schema.Table, idx2 *schema.Index) error",
      "ground_truth": "func (d *SQLite) atIndex(idx1 *Index, t2 *schema.Table, idx2 *schema.Index) error {\n\tfor _, c1 := range idx1.Columns {\n\t\tc2, ok := t2.Column(c1.Name)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"unexpected index %q column: %q\", idx1.Name, c1.Name)\n\t\t}\n\t\tidx2.AddParts(\u0026schema.IndexPart{C: c2})\n\t}\n\tif idx1.Annotation != nil \u0026\u0026 idx1.Annotation.Where != \"\" {\n\t\tidx2.AddAttrs(\u0026sqlite.IndexPredicate{P: idx1.Annotation.Where})\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 186,
      "end_line": 198,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\tName       string                  // index name.\n\tUnique     bool                    // uniqueness.\n\tColumns    []*Column               // actual table columns.\n\tAnnotation *entsql.IndexAnnotation // index annotation.\n\tcolumns    []string                // columns loaded from query scan.\n\trealname   string                  // real name in the database (Postgres only).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/entsql/annotation.go",
          "code_snippet": "IndexAnnotation struct {\n\t// Prefix defines a column prefix for a single string column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"column\").\n\t//\t\tAnnotation(entsql.Prefix(100))\n\t//\n\t//\tCREATE INDEX `table_column` ON `table`(`column`(100))\n\t//\n\tPrefix uint\n\n\t// PrefixColumns defines column prefixes for a multi-column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\", \"c2\", \"c3\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.PrefixColumn(\"c1\", 100),\n\t//\t\t\tentsql.PrefixColumn(\"c2\", 200),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX `table_c1_c2_c3` ON `table`(`c1`(100), `c2`(200), `c3`)\n\t//\n\tPrefixColumns map[string]uint\n\n\t// Desc defines the DESC clause for a single column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"column\").\n\t//\t\tAnnotation(entsql.Desc())\n\t//\n\t//\tCREATE INDEX `table_column` ON `table`(`column` DESC)\n\t//\n\tDesc bool\n\n\t// DescColumns defines the DESC clause for columns in multi-column index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\", \"c2\", \"c3\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.DescColumns(\"c1\", \"c2\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX `table_c1_c2_c3` ON `table`(`c1` DESC, `c2` DESC, `c3`)\n\t//\n\tDescColumns map[string]bool\n\n\t// IncludeColumns defines the INCLUDE clause for the index.\n\t// Works only in Postgres and its definition is as follows:\n\t//\n\t//\tindex.Fields(\"c1\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IncludeColumns(\"c2\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX \"table_column\" ON \"table\"(\"c1\") INCLUDE (\"c2\")\n\t//\n\tIncludeColumns []string\n\n\t// Type defines the type of the index.\n\t// In MySQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexType(\"FULLTEXT\"),\n\t//\t\t)\n\t//\n\t//\tCREATE FULLTEXT INDEX `table_c1` ON `table`(`c1`)\n\t//\n\tType string\n\n\t// Types is like the Type option but allows mapping an index-type per dialect.\n\t//\n\t//\tindex.Fields(\"c1\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexTypes(map[string]string{\n\t//\t\t\t\tdialect.MySQL:\t\t\"FULLTEXT\",\n\t//\t\t\t\tdialect.Postgres:\t\"GIN\",\n\t//\t\t\t}),\n\t//\t\t)\n\t//\n\tTypes map[string]string\n\n\t// OpClass defines the operator class for a single string column index.\n\t// In PostgreSQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"column\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexType(\"BRIN\"),\n\t//\t\t\tentsql.OpClass(\"int8_bloom_ops\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX \"table_column\" ON \"table\" USING BRIN (\"column\" int8_bloom_ops)\n\t//\n\tOpClass string\n\n\t// OpClassColumns defines operator-classes for a multi-column index.\n\t// In PostgreSQL, the following annotation maps to:\n\t//\n\t//\tindex.Fields(\"c1\", \"c2\", \"c3\").\n\t//\t\tAnnotation(\n\t//\t\t\tentsql.IndexType(\"BRIN\"),\n\t//\t\t\tentsql.OpClassColumn(\"c1\", \"int8_bloom_ops\"),\n\t//\t\t\tentsql.OpClassColumn(\"c2\", \"int8_minmax_multi_ops(values_per_range=8)\"),\n\t//\t\t)\n\t//\n\t//\tCREATE INDEX \"table_column\" ON \"table\" USING BRIN (\"c1\" int8_bloom_ops, \"c2\" int8_minmax_multi_ops(values_per_range=8), \"c3\")\n\t//\n\tOpClassColumns map[string]string\n\n\t// IndexWhere allows configuring partial indexes in SQLite and PostgreSQL.\n\t// Read more: https://postgresql.org/docs/current/indexes-partial.html.\n\t//\n\t// Note that the `WHERE` clause should be defined exactly like it is\n\t// stored in the database (i.e. normal form). Read more about this on\n\t// the Atlas website: https://atlasgo.io/concepts/dev-database#diffing.\n\t//\n\t//\tindex.Fields(\"a\").\n\t//\t\tAnnotations(\n\t//\t\t\tentsql.IndexWhere(\"b AND c \u003e 0\"),\n\t//\t\t)\n\t//\tCREATE INDEX \"table_a\" ON \"table\"(\"a\") WHERE (b AND c \u003e 0)\n\tWhere string\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\t\tName   string\n\t\tUnique bool\n\t\t// Table or View that this index belongs to.\n\t\tTable *Table\n\t\tView  *View\n\t\tAttrs []Attr\n\t\tParts []*IndexPart\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "func (t *Table) Column(name string) (*Column, bool) {\n\tfor _, c := range t.Columns {\n\t\tif c.Name == name {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddParts(parts ...*IndexPart) *Index {\n\tfor _, p := range parts {\n\t\tif p.C != nil \u0026\u0026 !p.C.hasIndex(i) {\n\t\t\tp.C.Indexes = append(p.C.Indexes, i)\n\t\t}\n\t\tp.SeqNo = len(i.Parts)\n\t\ti.Parts = append(i.Parts, p)\n\t}\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IndexPart struct {\n\t\t// SeqNo represents the sequence number of the key part\n\t\t// in the index.\n\t\tSeqNo int\n\t\t// Desc indicates if the key part is stored in descending\n\t\t// order. All databases use ascending order as default.\n\t\tDesc  bool\n\t\tX     Expr\n\t\tC     *Column\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddAttrs(attrs ...Attr) *Index {\n\ti.Attrs = append(i.Attrs, attrs...)\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/inspect.go",
          "code_snippet": "IndexPredicate struct {\n\t\tschema.Attr\n\t\tP string\n\t}",
          "ref_module": "sqlite"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        186,
        187,
        188,
        189,
        192,
        194,
        197
      ],
      "cover_details": {
        "line_cover_rate": 0.5384615384615384
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/lazy.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        }
      ],
      "name": "Encode",
      "signature": "(enc *lazyEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc *lazyEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tenc.once.Do(func() { enc.ValEncoder = enc.resolve() })\n\tenc.ValEncoder.Encode(ptr, stream)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 41,
      "end_line": 44,
      "file_path": "./dialect/gremlin/encoding/graphson/lazy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "lazyEncoder struct {\n\tjsoniter.ValEncoder\n\tresolve func() jsoniter.ValEncoder\n\tonce    sync.Once\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sync/once.go",
          "code_snippet": "func (o *Once) Do(f func()) {\n\t// Note: Here is an incorrect implementation of Do:\n\t//\n\t//\tif o.done.CompareAndSwap(0, 1) {\n\t//\t\tf()\n\t//\t}\n\t//\n\t// Do guarantees that when it returns, f has finished.\n\t// This implementation would not implement that guarantee:\n\t// given two simultaneous calls, the winner of the cas would\n\t// call f, and the second would return immediately, without\n\t// waiting for the first's call to f to complete.\n\t// This is why the slow path falls back to a mutex, and why\n\t// the o.done.Store must be delayed until after f returns.\n\n\tif o.done.Load() == 0 {\n\t\t// Outlined slow-path to allow inlining of the fast-path.\n\t\to.doSlow(f)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        41,
        42,
        43
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        }
      ],
      "name": "Decode",
      "signature": "(dec float64Decoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec float64Decoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tvar val float64\n\tswitch next := iter.WhatIsNext(); next {\n\tcase jsoniter.NumberValue:\n\t\tval = iter.ReadFloat64()\n\tcase jsoniter.StringValue:\n\t\tswitch str := iter.ReadString(); str {\n\t\tcase \"NaN\":\n\t\t\tval = math.NaN()\n\t\tcase \"Infinity\":\n\t\t\tval = math.Inf(1)\n\t\tcase \"-Infinity\":\n\t\t\tval = math.Inf(-1)\n\t\tdefault:\n\t\t\titer.ReportError(\"decode float64\", \"invalid value \"+str)\n\t\t}\n\tdefault:\n\t\titer.ReportError(\"decode float64\", fmt.Sprintf(\"unexpected value type: %d\", next))\n\t}\n\n\tif iter.Error == nil || iter.Error == io.EOF {\n\t\t// nolint: gas\n\t\tdec.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 113,
      "end_line": 137,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Decoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "NumberValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_float.go",
          "code_snippet": "func (iter *Iterator) ReadFloat64() (ret float64) {\n\tc := iter.nextToken()\n\tif c == '-' {\n\t\treturn -iter.readPositiveFloat64()\n\t}\n\titer.unreadByte()\n\treturn iter.readPositiveFloat64()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "StringValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_str.go",
          "code_snippet": "func (iter *Iterator) ReadString() (ret string) {\n\tc := iter.nextToken()\n\tif c == '\"' {\n\t\tfor i := iter.head; i \u003c iter.tail; i++ {\n\t\t\tc := iter.buf[i]\n\t\t\tif c == '\"' {\n\t\t\t\tret = string(iter.buf[iter.head:i])\n\t\t\t\titer.head = i + 1\n\t\t\t\treturn ret\n\t\t\t} else if c == '\\\\' {\n\t\t\t\tbreak\n\t\t\t} else if c \u003c ' ' {\n\t\t\t\titer.ReportError(\"ReadString\",\n\t\t\t\t\tfmt.Sprintf(`invalid control character found: %d`, c))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\treturn iter.readStringSlowPath()\n\t} else if c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn \"\"\n\t}\n\titer.ReportError(\"ReadString\", `expects \" or n, but found `+string([]byte{c}))\n\treturn\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func NaN() float64 { return Float64frombits(uvnan) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func Inf(sign int) float64 {\n\tvar v uint64\n\tif sign \u003e= 0 {\n\t\tv = uvinf\n\t} else {\n\t\tv = uvneginf\n\t}\n\treturn Float64frombits(v)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        129,
        130,
        133,
        134,
        135,
        136
      ],
      "cover_details": {
        "line_cover_rate": 0.84
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/internal/ws/conn.go:DialContext",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestConnectClosure"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestSimpleQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestQueryCancellation"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestBadResponse"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestAuthentication"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/internal/ws",
          "rel_file_path": "dialect/gremlin/internal/ws/conn_test.go",
          "func_name": "TestPartialResponse"
        }
      ],
      "name": "DialContext",
      "signature": "(d *Dialer) DialContext (ctx context.Context, uri string) (*Conn, error)",
      "ground_truth": "func (d *Dialer) DialContext(ctx context.Context, uri string) (*Conn, error) {\n\tc, rsp, err := d.Dialer.DialContext(ctx, uri, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"gremlin: dialing uri %s: %w\", uri, err)\n\t}\n\tdefer rsp.Body.Close()\n\n\tconn := \u0026Conn{\n\t\tconn: c,\n\t\tuser: d.user,\n\t\tpass: d.pass,\n\t\tsend: make(chan io.Reader),\n\t}\n\tconn.grp, conn.ctx = errgroup.WithContext(context.Background())\n\n\tconn.grp.Go(conn.sender)\n\tconn.grp.Go(conn.receiver)\n\n\treturn conn, nil\n}",
      "function_comment": "// DialContext creates a new Gremlin connection.",
      "function_statement": "// DialContext creates a new Gremlin connection.",
      "start_line": 107,
      "end_line": 126,
      "file_path": "./dialect/gremlin/internal/ws/conn.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Dialer struct {\n\t\t// Underlying websocket dialer.\n\t\twebsocket.Dialer\n\n\t\t// Gremlin server basic auth credentials.\n\t\tuser, pass string\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "Conn struct {\n\t\t// Underlying websocket connection.\n\t\tconn *websocket.Conn\n\n\t\t// Credentials for basic authentication.\n\t\tuser, pass string\n\n\t\t// Goroutine tracking.\n\t\tctx context.Context\n\t\tgrp *errgroup.Group\n\n\t\t// Channel of outbound requests.\n\t\tsend chan io.Reader\n\n\t\t// Map of in flight requests.\n\t\tinflight sync.Map\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) sender() error {\n\tpinger := time.NewTicker(pingPeriod)\n\tdefer pinger.Stop()\n\n\t// closing connection terminates receiver\n\tdefer c.conn.Close()\n\n\tfor {\n\t\tselect {\n\t\tcase r := \u003c-c.send:\n\t\t\t// ensure write completes within a window\n\t\t\tc.conn.SetWriteDeadline(time.Now().Add(writeWait))\n\n\t\t\t// fetch next message writer\n\t\t\tw, err := c.conn.NextWriter(websocket.BinaryMessage)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"getting message writer: %w\", err)\n\t\t\t}\n\n\t\t\t// write mime header\n\t\t\tif _, err := w.Write(encoding.GraphSON3Mime); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing mime header: %w\", err)\n\t\t\t}\n\n\t\t\t// write request body\n\t\t\tif _, err := io.Copy(w, r); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing request: %w\", err)\n\t\t\t}\n\n\t\t\t// finish message write\n\t\t\tif err := w.Close(); err != nil {\n\t\t\t\treturn fmt.Errorf(\"closing message writer: %w\", err)\n\t\t\t}\n\t\tcase \u003c-c.ctx.Done():\n\t\t\t// connection closing\n\t\t\treturn c.conn.WriteControl(\n\t\t\t\twebsocket.CloseMessage,\n\t\t\t\twebsocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"),\n\t\t\t\ttime.Time{},\n\t\t\t)\n\t\tcase \u003c-pinger.C:\n\t\t\t// periodic connection keepalive\n\t\t\tif err := c.conn.WriteControl(websocket.PingMessage, nil, time.Now().Add(writeWait)); err != nil {\n\t\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/internal/ws/conn.go",
          "code_snippet": "func (c *Conn) receiver() error {\n\t// handle keepalive responses\n\tc.conn.SetReadDeadline(time.Now().Add(pongWait))\n\tc.conn.SetPongHandler(func(string) error {\n\t\treturn c.conn.SetReadDeadline(time.Now().Add(pongWait))\n\t})\n\n\t// complete all in flight requests on termination\n\tdefer c.inflight.Range(func(id, ifr any) bool {\n\t\tifr.(*inflight).result \u003c- result{err: ErrConnClosed}\n\t\tc.inflight.Delete(id)\n\t\treturn true\n\t})\n\n\tfor {\n\t\t// rely on sender connection close during termination\n\t\t_, r, err := c.conn.NextReader()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"writing ping message: %w\", err)\n\t\t}\n\n\t\t// decode received response\n\t\tvar rsp gremlin.Response\n\t\tif err := graphson.NewDecoder(r).Decode(\u0026rsp); err != nil {\n\t\t\treturn fmt.Errorf(\"reading response: %w\", err)\n\t\t}\n\n\t\tifr, ok := c.inflight.Load(rsp.RequestID)\n\t\tif !ok {\n\t\t\t// context cancellation aborts inflight requests\n\t\t\tcontinue\n\t\t}\n\n\t\t// handle incoming response\n\t\tif done := c.receive(ifr.(*inflight), \u0026rsp); done {\n\t\t\t// stop tracking finished requests\n\t\t\tc.inflight.Delete(rsp.RequestID)\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/gorilla/websocket@v1.5.0/client.go",
          "code_snippet": "func (d *Dialer) DialContext(ctx context.Context, urlStr string, requestHeader http.Header) (*Conn, *http.Response, error) {\n\tif d == nil {\n\t\td = \u0026nilDialer\n\t}\n\n\tchallengeKey, err := generateChallengeKey()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tswitch u.Scheme {\n\tcase \"ws\":\n\t\tu.Scheme = \"http\"\n\tcase \"wss\":\n\t\tu.Scheme = \"https\"\n\tdefault:\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\tif u.User != nil {\n\t\t// User name and password are not allowed in websocket URIs.\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\treq := \u0026http.Request{\n\t\tMethod:     http.MethodGet,\n\t\tURL:        u,\n\t\tProto:      \"HTTP/1.1\",\n\t\tProtoMajor: 1,\n\t\tProtoMinor: 1,\n\t\tHeader:     make(http.Header),\n\t\tHost:       u.Host,\n\t}\n\treq = req.WithContext(ctx)\n\n\t// Set the cookies present in the cookie jar of the dialer\n\tif d.Jar != nil {\n\t\tfor _, cookie := range d.Jar.Cookies(u) {\n\t\t\treq.AddCookie(cookie)\n\t\t}\n\t}\n\n\t// Set the request headers using the capitalization for names and values in\n\t// RFC examples. Although the capitalization shouldn't matter, there are\n\t// servers that depend on it. The Header.Set method is not used because the\n\t// method canonicalizes the header names.\n\treq.Header[\"Upgrade\"] = []string{\"websocket\"}\n\treq.Header[\"Connection\"] = []string{\"Upgrade\"}\n\treq.Header[\"Sec-WebSocket-Key\"] = []string{challengeKey}\n\treq.Header[\"Sec-WebSocket-Version\"] = []string{\"13\"}\n\tif len(d.Subprotocols) \u003e 0 {\n\t\treq.Header[\"Sec-WebSocket-Protocol\"] = []string{strings.Join(d.Subprotocols, \", \")}\n\t}\n\tfor k, vs := range requestHeader {\n\t\tswitch {\n\t\tcase k == \"Host\":\n\t\t\tif len(vs) \u003e 0 {\n\t\t\t\treq.Host = vs[0]\n\t\t\t}\n\t\tcase k == \"Upgrade\" ||\n\t\t\tk == \"Connection\" ||\n\t\t\tk == \"Sec-Websocket-Key\" ||\n\t\t\tk == \"Sec-Websocket-Version\" ||\n\t\t\tk == \"Sec-Websocket-Extensions\" ||\n\t\t\t(k == \"Sec-Websocket-Protocol\" \u0026\u0026 len(d.Subprotocols) \u003e 0):\n\t\t\treturn nil, nil, errors.New(\"websocket: duplicate header not allowed: \" + k)\n\t\tcase k == \"Sec-Websocket-Protocol\":\n\t\t\treq.Header[\"Sec-WebSocket-Protocol\"] = vs\n\t\tdefault:\n\t\t\treq.Header[k] = vs\n\t\t}\n\t}\n\n\tif d.EnableCompression {\n\t\treq.Header[\"Sec-WebSocket-Extensions\"] = []string{\"permessage-deflate; server_no_context_takeover; client_no_context_takeover\"}\n\t}\n\n\tif d.HandshakeTimeout != 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(ctx, d.HandshakeTimeout)\n\t\tdefer cancel()\n\t}\n\n\t// Get network dial function.\n\tvar netDial func(network, add string) (net.Conn, error)\n\n\tswitch u.Scheme {\n\tcase \"http\":\n\t\tif d.NetDialContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDial != nil {\n\t\t\tnetDial = d.NetDial\n\t\t}\n\tcase \"https\":\n\t\tif d.NetDialTLSContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialTLSContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDialContext != nil {\n\t\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\t\treturn d.NetDialContext(ctx, network, addr)\n\t\t\t}\n\t\t} else if d.NetDial != nil {\n\t\t\tnetDial = d.NetDial\n\t\t}\n\tdefault:\n\t\treturn nil, nil, errMalformedURL\n\t}\n\n\tif netDial == nil {\n\t\tnetDialer := \u0026net.Dialer{}\n\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn netDialer.DialContext(ctx, network, addr)\n\t\t}\n\t}\n\n\t// If needed, wrap the dial function to set the connection deadline.\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tforwardDial := netDial\n\t\tnetDial = func(network, addr string) (net.Conn, error) {\n\t\t\tc, err := forwardDial(network, addr)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\terr = c.SetDeadline(deadline)\n\t\t\tif err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn c, nil\n\t\t}\n\t}\n\n\t// If needed, wrap the dial function to connect through a proxy.\n\tif d.Proxy != nil {\n\t\tproxyURL, err := d.Proxy(req)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tif proxyURL != nil {\n\t\t\tdialer, err := proxy_FromURL(proxyURL, netDialerFunc(netDial))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tnetDial = dialer.Dial\n\t\t}\n\t}\n\n\thostPort, hostNoPort := hostPortNoPort(u)\n\ttrace := httptrace.ContextClientTrace(ctx)\n\tif trace != nil \u0026\u0026 trace.GetConn != nil {\n\t\ttrace.GetConn(hostPort)\n\t}\n\n\tnetConn, err := netDial(\"tcp\", hostPort)\n\tif trace != nil \u0026\u0026 trace.GotConn != nil {\n\t\ttrace.GotConn(httptrace.GotConnInfo{\n\t\t\tConn: netConn,\n\t\t})\n\t}\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tdefer func() {\n\t\tif netConn != nil {\n\t\t\tnetConn.Close()\n\t\t}\n\t}()\n\n\tif u.Scheme == \"https\" \u0026\u0026 d.NetDialTLSContext == nil {\n\t\t// If NetDialTLSContext is set, assume that the TLS handshake has already been done\n\n\t\tcfg := cloneTLSConfig(d.TLSClientConfig)\n\t\tif cfg.ServerName == \"\" {\n\t\t\tcfg.ServerName = hostNoPort\n\t\t}\n\t\ttlsConn := tls.Client(netConn, cfg)\n\t\tnetConn = tlsConn\n\n\t\tif trace != nil \u0026\u0026 trace.TLSHandshakeStart != nil {\n\t\t\ttrace.TLSHandshakeStart()\n\t\t}\n\t\terr := doHandshake(ctx, tlsConn, cfg)\n\t\tif trace != nil \u0026\u0026 trace.TLSHandshakeDone != nil {\n\t\t\ttrace.TLSHandshakeDone(tlsConn.ConnectionState(), err)\n\t\t}\n\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t}\n\n\tconn := newConn(netConn, false, d.ReadBufferSize, d.WriteBufferSize, d.WriteBufferPool, nil, nil)\n\n\tif err := req.Write(netConn); err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif trace != nil \u0026\u0026 trace.GotFirstResponseByte != nil {\n\t\tif peek, err := conn.br.Peek(1); err == nil \u0026\u0026 len(peek) == 1 {\n\t\t\ttrace.GotFirstResponseByte()\n\t\t}\n\t}\n\n\tresp, err := http.ReadResponse(conn.br, req)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif d.Jar != nil {\n\t\tif rc := resp.Cookies(); len(rc) \u003e 0 {\n\t\t\td.Jar.SetCookies(u, rc)\n\t\t}\n\t}\n\n\tif resp.StatusCode != 101 ||\n\t\t!tokenListContainsValue(resp.Header, \"Upgrade\", \"websocket\") ||\n\t\t!tokenListContainsValue(resp.Header, \"Connection\", \"upgrade\") ||\n\t\tresp.Header.Get(\"Sec-Websocket-Accept\") != computeAcceptKey(challengeKey) {\n\t\t// Before closing the network connection on return from this\n\t\t// function, slurp up some of the response to aid application\n\t\t// debugging.\n\t\tbuf := make([]byte, 1024)\n\t\tn, _ := io.ReadFull(resp.Body, buf)\n\t\tresp.Body = ioutil.NopCloser(bytes.NewReader(buf[:n]))\n\t\treturn nil, resp, ErrBadHandshake\n\t}\n\n\tfor _, ext := range parseExtensions(resp.Header) {\n\t\tif ext[\"\"] != \"permessage-deflate\" {\n\t\t\tcontinue\n\t\t}\n\t\t_, snct := ext[\"server_no_context_takeover\"]\n\t\t_, cnct := ext[\"client_no_context_takeover\"]\n\t\tif !snct || !cnct {\n\t\t\treturn nil, resp, errInvalidCompression\n\t\t}\n\t\tconn.newCompressionWriter = compressNoContextTakeover\n\t\tconn.newDecompressionReader = decompressNoContextTakeover\n\t\tbreak\n\t}\n\n\tresp.Body = ioutil.NopCloser(bytes.NewReader([]byte{}))\n\tconn.subprotocol = resp.Header.Get(\"Sec-Websocket-Protocol\")\n\n\tnetConn.SetDeadline(time.Time{})\n\tnetConn = nil // to avoid close in defer.\n\treturn conn, resp, nil\n}",
          "ref_module": "websocket"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Closer interface {\n\tClose() error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/net/http/response.go",
          "code_snippet": "Response struct {\n\tStatus     string // e.g. \"200 OK\"\n\tStatusCode int    // e.g. 200\n\tProto      string // e.g. \"HTTP/1.0\"\n\tProtoMajor int    // e.g. 1\n\tProtoMinor int    // e.g. 0\n\n\t// Header maps header keys to values. If the response had multiple\n\t// headers with the same key, they may be concatenated, with comma\n\t// delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers\n\t// be semantically equivalent to a comma-delimited sequence.) When\n\t// Header values are duplicated by other fields in this struct (e.g.,\n\t// ContentLength, TransferEncoding, Trailer), the field values are\n\t// authoritative.\n\t//\n\t// Keys in the map are canonicalized (see CanonicalHeaderKey).\n\tHeader Header\n\n\t// Body represents the response body.\n\t//\n\t// The response body is streamed on demand as the Body field\n\t// is read. If the network connection fails or the server\n\t// terminates the response, Body.Read calls return an error.\n\t//\n\t// The http Client and Transport guarantee that Body is always\n\t// non-nil, even on responses without a body or responses with\n\t// a zero-length body. It is the caller's responsibility to\n\t// close Body. The default HTTP client's Transport may not\n\t// reuse HTTP/1.x \"keep-alive\" TCP connections if the Body is\n\t// not read to completion and closed.\n\t//\n\t// The Body is automatically dechunked if the server replied\n\t// with a \"chunked\" Transfer-Encoding.\n\t//\n\t// As of Go 1.12, the Body will also implement io.Writer\n\t// on a successful \"101 Switching Protocols\" response,\n\t// as used by WebSockets and HTTP/2's \"h2c\" mode.\n\tBody io.ReadCloser\n\n\t// ContentLength records the length of the associated content. The\n\t// value -1 indicates that the length is unknown. Unless Request.Method\n\t// is \"HEAD\", values \u003e= 0 indicate that the given number of bytes may\n\t// be read from Body.\n\tContentLength int64\n\n\t// Contains transfer encodings from outer-most to inner-most. Value is\n\t// nil, means that \"identity\" encoding is used.\n\tTransferEncoding []string\n\n\t// Close records whether the header directed that the connection be\n\t// closed after reading Body. The value is advice for clients: neither\n\t// ReadResponse nor Response.Write ever closes a connection.\n\tClose bool\n\n\t// Uncompressed reports whether the response was sent compressed but\n\t// was decompressed by the http package. When true, reading from\n\t// Body yields the uncompressed content instead of the compressed\n\t// content actually set from the server, ContentLength is set to -1,\n\t// and the \"Content-Length\" and \"Content-Encoding\" fields are deleted\n\t// from the responseHeader. To get the original response from\n\t// the server, set Transport.DisableCompression to true.\n\tUncompressed bool\n\n\t// Trailer maps trailer keys to values in the same\n\t// format as Header.\n\t//\n\t// The Trailer initially contains only nil values, one for\n\t// each key specified in the server's \"Trailer\" header\n\t// value. Those values are not added to Header.\n\t//\n\t// Trailer must not be accessed concurrently with Read calls\n\t// on the Body.\n\t//\n\t// After Body.Read has returned io.EOF, Trailer will contain\n\t// any trailer values sent by the server.\n\tTrailer Header\n\n\t// Request is the request that was sent to obtain this Response.\n\t// Request's Body is nil (having already been consumed).\n\t// This is only populated for Client requests.\n\tRequest *Request\n\n\t// TLS contains information about the TLS connection on which the\n\t// response was received. It is nil for unencrypted responses.\n\t// The pointer is shared between responses and should not be\n\t// modified.\n\tTLS *tls.ConnectionState\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Reader interface {\n\tRead(p []byte) (n int, err error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/sync@v0.11.0/errgroup/errgroup.go",
          "code_snippet": "func WithContext(ctx context.Context) (*Group, context.Context) {\n\tctx, cancel := withCancelCause(ctx)\n\treturn \u0026Group{cancel: cancel}, ctx\n}",
          "ref_module": "errgroup"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "func Background() Context {\n\treturn backgroundCtx{}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/x/sync@v0.11.0/errgroup/errgroup.go",
          "code_snippet": "func (g *Group) Go(f func() error) {\n\tif g.sem != nil {\n\t\tg.sem \u003c- token{}\n\t}\n\n\tg.wg.Add(1)\n\tgo func() {\n\t\tdefer g.done()\n\n\t\tif err := f(); err != nil {\n\t\t\tg.errOnce.Do(func() {\n\t\t\t\tg.err = err\n\t\t\t\tif g.cancel != nil {\n\t\t\t\t\tg.cancel(g.err)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}()\n}",
          "ref_module": "errgroup"
        }
      ],
      "covered_lines": [
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125
      ],
      "cover_details": {
        "line_cover_rate": 0.95
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:Marshal",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "Marshal",
      "signature": "Marshal (v any) ([]byte, error)",
      "ground_truth": "func Marshal(v any) ([]byte, error) {\n\treturn config.Marshal(v)\n}",
      "function_comment": "// Marshal returns the graphson encoding of v.",
      "function_statement": "// Marshal returns the graphson encoding of v.",
      "start_line": 20,
      "end_line": 22,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:DecorateDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecorateDecoder",
      "signature": "(ext decodeExtension) DecorateDecoder (typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecorateDecoder(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif dec := ext.DecoratorOfRegistered(dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfUnmarshaler(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfTyper(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoratorOfNative(typ, dec); dec != nil {\n\t\treturn dec\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Ptr, reflect.Struct:\n\t\treturn dec\n\tcase reflect.Interface:\n\t\treturn ext.DecoratorOfInterface(typ, dec)\n\tcase reflect.Slice:\n\t\treturn ext.DecoratorOfSlice(typ, dec)\n\tcase reflect.Array:\n\t\treturn ext.DecoratorOfArray(dec)\n\tcase reflect.Map:\n\t\treturn ext.DecoratorOfMap(dec)\n\tdefault:\n\t\treturn ext.DecoderOfError(\"graphson: unsupported type: %s\", typ.String())\n\t}\n}",
      "function_comment": "// DecorateDecoder decorates an passed in value decoder for type.",
      "function_statement": "// DecorateDecoder decorates an passed in value decoder for type.",
      "start_line": 82,
      "end_line": 109,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (decodeExtension) DecoratorOfRegistered(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := dec.(registeredDecoder); ok {\n\t\treturn dec\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (decodeExtension) DecoratorOfUnmarshaler(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif reflect2.PtrTo(typ).Implements(unmarshalerType) {\n\t\treturn dec\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfTyper(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerDecoder{\n\t\t\ttypeDecoder: typeDecoder{ValDecoder: dec},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (decodeExtension) DecoratorOfNative(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool:\n\t\treturn dec\n\tcase reflect.String:\n\t\treturn typeDecoder{dec, typeCheckerFunc(func(Type) error { return nil })}\n\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n\t\treflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n\t\treturn typeDecoder{dec, integerTypes}\n\tcase reflect.Float32:\n\t\treturn typeDecoder{dec, floatTypes}\n\tcase reflect.Float64:\n\t\treturn typeDecoder{dec, doubleTypes}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (decodeExtension) DecoratorOfInterface(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := typ.(*reflect2.UnsafeEFaceType); ok {\n\t\treturn efaceDecoder{typ, dec}\n\t}\n\treturn dec\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfSlice(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif typ.(reflect2.SliceType).Elem().Kind() == reflect.Uint8 {\n\t\treturn typeDecoder{dec, byteBufferType}\n\t}\n\treturn typeDecoder{dec, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoratorOfArray(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, listType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (decodeExtension) DecoratorOfMap(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, mapType}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func (decodeExtension) DecoderOfError(format string, args ...any) jsoniter.ValDecoder {\n\treturn decoratorOfError(format, args...)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Ptr = Pointer",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Interface",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atTypeC",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atTypeC",
      "signature": "(d *SQLite) atTypeC (c1 *Column, c2 *schema.Column) error",
      "ground_truth": "func (d *SQLite) atTypeC(c1 *Column, c2 *schema.Column) error {\n\tif c1.SchemaType != nil \u0026\u0026 c1.SchemaType[dialect.SQLite] != \"\" {\n\t\tt, err := sqlite.ParseType(strings.ToLower(c1.SchemaType[dialect.SQLite]))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc2.Type.Type = t\n\t\treturn nil\n\t}\n\tvar t schema.Type\n\tswitch c1.Type {\n\tcase field.TypeBool:\n\t\tt = \u0026schema.BoolType{T: \"bool\"}\n\tcase field.TypeInt8, field.TypeUint8, field.TypeInt16, field.TypeUint16, field.TypeInt32,\n\t\tfield.TypeUint32, field.TypeUint, field.TypeInt, field.TypeInt64, field.TypeUint64:\n\t\tt = \u0026schema.IntegerType{T: sqlite.TypeInteger}\n\tcase field.TypeBytes:\n\t\tt = \u0026schema.BinaryType{T: sqlite.TypeBlob}\n\tcase field.TypeString, field.TypeEnum:\n\t\t// SQLite does not impose any length restrictions on\n\t\t// the length of strings, BLOBs or numeric values.\n\t\tt = \u0026schema.StringType{T: sqlite.TypeText}\n\tcase field.TypeFloat32, field.TypeFloat64:\n\t\tt = \u0026schema.FloatType{T: sqlite.TypeReal}\n\tcase field.TypeTime:\n\t\tt = \u0026schema.TimeType{T: \"datetime\"}\n\tcase field.TypeJSON:\n\t\tt = \u0026schema.JSONType{T: \"json\"}\n\tcase field.TypeUUID:\n\t\tt = \u0026sqlite.UUIDType{T: \"uuid\"}\n\tcase field.TypeOther:\n\t\tt = \u0026schema.UnsupportedType{T: c1.typ}\n\tdefault:\n\t\tt, err := sqlite.ParseType(strings.ToLower(c1.typ))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc2.Type.Type = t\n\t}\n\tc2.Type.Type = t\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 106,
      "end_line": 147,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "SQLite   = \"sqlite3\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeBool",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt8",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint8",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt16",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint16",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeBytes",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeEnum",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeString",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeFloat64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeFloat32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeTime",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeJSON",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUUID",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeOther",
          "ref_module": "field"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/convert.go",
          "code_snippet": "func ParseType(c string) (schema.Type, error) {\n\t// A datatype may be zero or more names.\n\tif c == \"\" {\n\t\treturn \u0026schema.BinaryType{T: \"blob\"}, nil\n\t}\n\tparts := columnParts(c)\n\tswitch t := parts[0]; t {\n\tcase \"bool\", \"boolean\":\n\t\treturn \u0026schema.BoolType{T: t}, nil\n\tcase \"blob\":\n\t\treturn \u0026schema.BinaryType{T: t}, nil\n\tcase \"int2\", \"int8\", \"int\", \"uint64\", \"integer\", \"tinyint\", \"smallint\", \"mediumint\", \"bigint\", \"unsigned big int\":\n\t\t// All integer types have the same \"type affinity\".\n\t\treturn \u0026schema.IntegerType{T: t}, nil\n\tcase \"real\", \"double\", \"double precision\", \"float\":\n\t\treturn \u0026schema.FloatType{T: t}, nil\n\tcase \"numeric\", \"decimal\":\n\t\tct := \u0026schema.DecimalType{T: t}\n\t\tif len(parts) \u003e 1 {\n\t\t\tp, err := strconv.ParseInt(parts[1], 10, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse precision %q\", parts[1])\n\t\t\t}\n\t\t\tct.Precision = int(p)\n\t\t}\n\t\tif len(parts) \u003e 2 {\n\t\t\ts, err := strconv.ParseInt(parts[2], 10, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse scale %q\", parts[1])\n\t\t\t}\n\t\t\tct.Scale = int(s)\n\t\t}\n\t\treturn ct, nil\n\tcase \"char\", \"character\", \"varchar\", \"varying character\", \"nchar\", \"native character\", \"nvarchar\", \"text\", \"clob\":\n\t\tct := \u0026schema.StringType{T: t}\n\t\tif len(parts) \u003e 1 {\n\t\t\tp, err := strconv.ParseInt(parts[1], 10, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"parse size %q\", parts[1])\n\t\t\t}\n\t\t\tct.Size = int(p)\n\t\t}\n\t\treturn ct, nil\n\tcase \"json\", \"jsonb\":\n\t\treturn \u0026schema.JSONType{T: t}, nil\n\tcase \"date\", \"datetime\", \"time\", \"timestamp\":\n\t\treturn \u0026schema.TimeType{T: t}, nil\n\tcase \"uuid\":\n\t\treturn \u0026schema.UUIDType{T: t}, nil\n\tdefault:\n\t\treturn \u0026UserDefinedType{T: c}, nil\n\t}\n}",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "ColumnType struct {\n\t\tType Type\n\t\tRaw  string\n\t\tNull bool\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Type interface {\n\t\ttyp()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "BoolType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IntegerType struct {\n\t\tT        string\n\t\tUnsigned bool\n\t\tAttrs    []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/driver.go",
          "code_snippet": "TypeInteger = \"integer\"",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "BinaryType struct {\n\t\tT    string\n\t\tSize *int\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/driver.go",
          "code_snippet": "TypeBlob    = \"blob\"",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "StringType struct {\n\t\tT     string\n\t\tSize  int\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/driver.go",
          "code_snippet": "TypeText    = \"text\"",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "FloatType struct {\n\t\tT         string\n\t\tUnsigned  bool\n\t\tPrecision int\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/driver.go",
          "code_snippet": "TypeReal    = \"real\"",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "TimeType struct {\n\t\tT         string\n\t\tPrecision *int\n\t\tScale     *int\n\t\tAttrs     []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "JSONType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/inspect.go",
          "code_snippet": "UUIDType = schema.UUIDType",
          "ref_module": "sqlite"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "UUIDType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "UnsupportedType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ToLower(s string) string {\n\tisASCII, hasUpper := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasUpper = hasUpper || ('A' \u003c= c \u0026\u0026 c \u003c= 'Z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasUpper {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'A' \u003c= c \u0026\u0026 c \u003c= 'Z' {\n\t\t\t\tc += 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToLower, s)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        106,
        107,
        115,
        116,
        117,
        118,
        120,
        121,
        124,
        125,
        126,
        127,
        145,
        146
      ],
      "cover_details": {
        "line_cover_rate": 0.3333333333333333
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "Decode",
      "signature": "(dec efaceDecoder) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec efaceDecoder) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tswitch next := iter.WhatIsNext(); next {\n\tcase jsoniter.StringValue, jsoniter.BoolValue, jsoniter.NilValue:\n\t\tdec.ValDecoder.Decode(ptr, iter)\n\tcase jsoniter.ObjectValue:\n\t\tdec.decode(ptr, iter)\n\tdefault:\n\t\titer.ReportError(\"decode empty interface\", fmt.Sprintf(\"unexpected value type: %d\", next))\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 32,
      "end_line": 41,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (dec efaceDecoder) decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\trtype, err := dec.reflectBytes(data)\n\tif err != nil {\n\t\titer.ReportError(\"decode empty interface\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(data)\n\tdefer config.ReturnIterator(it)\n\n\tvar val any\n\tif rtype != nil {\n\t\tval = rtype.New()\n\t\tit.ReadVal(val)\n\t\tval = rtype.Indirect(val)\n\t} else {\n\t\tif jsoniter.Get(data, TypeKey).LastError() == nil {\n\t\t\tvk := jsoniter.Get(data, ValueKey)\n\t\t\tif vk.LastError() == nil {\n\t\t\t\tval = vk.GetInterface()\n\t\t\t}\n\t\t}\n\t\tif val == nil {\n\t\t\tval = it.Read()\n\t\t}\n\t}\n\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode empty interface\", it.Error.Error())\n\t\treturn\n\t}\n\n\t// nolint: gas\n\tdec.typ.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) WhatIsNext() ValueType {\n\tvalueType := valueTypes[iter.nextToken()]\n\titer.unreadByte()\n\treturn valueType\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "NilValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "StringValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "BoolValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "ObjectValue",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/expand.go:ExpandBindings",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindingsNoQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestConfigBuild"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestNewClient"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindings"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        }
      ],
      "name": "ExpandBindings",
      "signature": "ExpandBindings (rt RoundTripper) RoundTripper",
      "ground_truth": "func ExpandBindings(rt RoundTripper) RoundTripper {\n\treturn RoundTripperFunc(func(ctx context.Context, r *Request) (*Response, error) {\n\t\tbindings, ok := r.Arguments[ArgsBindings]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\tquery, ok := r.Arguments[ArgsGremlin]\n\t\tif !ok {\n\t\t\treturn rt.RoundTrip(ctx, r)\n\t\t}\n\t\t{\n\t\t\tquery, bindings := query.(string), bindings.(map[string]any)\n\t\t\tkeys := make(sort.StringSlice, 0, len(bindings))\n\t\t\tfor k := range bindings {\n\t\t\t\tkeys = append(keys, k)\n\t\t\t}\n\t\t\tsort.Sort(sort.Reverse(keys))\n\t\t\tkv := make([]string, 0, len(bindings)*2)\n\t\t\tfor _, k := range keys {\n\t\t\t\ts, err := jsoniter.MarshalToString(bindings[k])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"marshal bindings value for key %s: %w\", k, err)\n\t\t\t\t}\n\t\t\t\tkv = append(kv, k, s)\n\t\t\t}\n\t\t\tdelete(r.Arguments, ArgsBindings)\n\t\t\tr.Arguments[ArgsGremlin] = strings.NewReplacer(kv...).Replace(query)\n\t\t}\n\t\treturn rt.RoundTrip(ctx, r)\n\t})\n}",
      "function_comment": "// ExpandBindings expands the given RoundTripper and expands the request bindings into the Gremlin traversal.",
      "function_statement": "// ExpandBindings expands the given RoundTripper and expands the request bindings into the Gremlin traversal.",
      "start_line": 17,
      "end_line": 47,
      "file_path": "./dialect/gremlin/expand.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripperFunc func(context.Context, *Request) (*Response, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsBindings = \"bindings\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func MarshalToString(v interface{}) (string, error) {\n\treturn ConfigDefault.MarshalToString(v)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "StringSlice []string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "func Sort(data Interface) {\n\tn := data.Len()\n\tif n \u003c= 1 {\n\t\treturn\n\t}\n\tlimit := bits.Len(uint(n))\n\tpdqsort(data, 0, n, limit)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sort/sort.go",
          "code_snippet": "func Reverse(data Interface) Interface {\n\treturn \u0026reverse{data}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func delete(m map[Type]Type1, key Type)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func (r *Replacer) Replace(s string) string {\n\tr.once.Do(r.buildOnce)\n\treturn r.r.Replace(s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/replace.go",
          "code_snippet": "func NewReplacer(oldnew ...string) *Replacer {\n\tif len(oldnew)%2 == 1 {\n\t\tpanic(\"strings.NewReplacer: odd argument count\")\n\t}\n\treturn \u0026Replacer{oldnew: append([]string(nil), oldnew...)}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        45
      ],
      "cover_details": {
        "line_cover_rate": 0.8709677419354839
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        }
      ],
      "name": "encode",
      "signature": "(enc marshalerEncoder) encode (marshaler Marshaler, stream *jsoniter.Stream)",
      "ground_truth": "func (enc marshalerEncoder) encode(marshaler Marshaler, stream *jsoniter.Stream) {\n\tdata, err := marshaler.MarshalGraphson()\n\tif err != nil {\n\t\tstream.Error = fmt.Errorf(\"graphson: error calling MarshalGraphson for type %s: %w\", enc.Type, err)\n\t\treturn\n\t}\n\tif !config.Valid(data) {\n\t\tstream.Error = fmt.Errorf(\"graphson: syntax error when marshaling type %s\", enc.Type)\n\t\treturn\n\t}\n\t_, stream.Error = stream.Write(data)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 68,
      "end_line": 79,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "Marshaler interface {\n\tMarshalGraphson() ([]byte, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) Write(p []byte) (nn int, err error) {\n\tstream.buf = append(stream.buf, p...)\n\tif stream.out != nil {\n\t\tnn, err = stream.out.Write(stream.buf)\n\t\tstream.buf = stream.buf[nn:]\n\t\treturn\n\t}\n\treturn len(p), nil\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78
      ],
      "cover_details": {
        "line_cover_rate": 0.9166666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "decode",
      "signature": "(dec efaceDecoder) decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec efaceDecoder) decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tdata := iter.SkipAndReturnBytes()\n\tif iter.Error != nil \u0026\u0026 iter.Error != io.EOF {\n\t\treturn\n\t}\n\n\trtype, err := dec.reflectBytes(data)\n\tif err != nil {\n\t\titer.ReportError(\"decode empty interface\", err.Error())\n\t\treturn\n\t}\n\n\tit := config.BorrowIterator(data)\n\tdefer config.ReturnIterator(it)\n\n\tvar val any\n\tif rtype != nil {\n\t\tval = rtype.New()\n\t\tit.ReadVal(val)\n\t\tval = rtype.Indirect(val)\n\t} else {\n\t\tif jsoniter.Get(data, TypeKey).LastError() == nil {\n\t\t\tvk := jsoniter.Get(data, ValueKey)\n\t\t\tif vk.LastError() == nil {\n\t\t\t\tval = vk.GetInterface()\n\t\t\t}\n\t\t}\n\t\tif val == nil {\n\t\t\tval = it.Read()\n\t\t}\n\t}\n\n\tif it.Error != nil \u0026\u0026 it.Error != io.EOF {\n\t\titer.ReportError(\"decode empty interface\", it.Error.Error())\n\t\treturn\n\t}\n\n\t// nolint: gas\n\tdec.typ.UnsafeSet(ptr, unsafe.Pointer(\u0026val))\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 43,
      "end_line": 82,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "func (dec efaceDecoder) reflectBytes(data []byte) (reflect2.Type, error) {\n\ttyp := Type(jsoniter.Get(data, TypeKey).ToString())\n\trtype := dec.reflectType(typ)\n\tif rtype != nil {\n\t\treturn rtype, nil\n\t}\n\n\tswitch typ {\n\tcase listType:\n\t\treturn dec.reflectSlice(data)\n\tcase mapType:\n\t\treturn dec.reflectMap(data)\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "TypeKey  = \"@type\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "ValueKey = \"@value\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) SkipAndReturnBytes() []byte {\n\titer.startCapture(iter.head)\n\titer.Skip()\n\treturn iter.stopCapture()\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) ReportError(operation string, msg string) {\n\tif iter.Error != nil {\n\t\tif iter.Error != io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n\tpeekStart := iter.head - 10\n\tif peekStart \u003c 0 {\n\t\tpeekStart = 0\n\t}\n\tpeekEnd := iter.head + 10\n\tif peekEnd \u003e iter.tail {\n\t\tpeekEnd = iter.tail\n\t}\n\tparsing := string(iter.buf[peekStart:peekEnd])\n\tcontextStart := iter.head - 50\n\tif contextStart \u003c 0 {\n\t\tcontextStart = 0\n\t}\n\tcontextEnd := iter.head + 50\n\tif contextEnd \u003e iter.tail {\n\t\tcontextEnd = iter.tail\n\t}\n\tcontext := string(iter.buf[contextStart:contextEnd])\n\titer.Error = fmt.Errorf(\"%s: %s, error found in #%v byte of ...|%s|..., bigger context ...|%s|...\",\n\t\toperation, msg, iter.head-peekStart, parsing, context)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/pool.go",
          "code_snippet": "IteratorPool interface {\n\tBorrowIterator(data []byte) *Iterator\n\tReturnIterator(iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "func (iter *Iterator) ReadVal(obj interface{}) {\n\tdepth := iter.depth\n\tcacheKey := reflect2.RTypeOf(obj)\n\tdecoder := iter.cfg.getDecoderFromCache(cacheKey)\n\tif decoder == nil {\n\t\ttyp := reflect2.TypeOf(obj)\n\t\tif typ == nil || typ.Kind() != reflect.Ptr {\n\t\t\titer.ReportError(\"ReadVal\", \"can only unmarshal into pointer\")\n\t\t\treturn\n\t\t}\n\t\tdecoder = iter.cfg.DecoderOf(typ)\n\t}\n\tptr := reflect2.PtrOf(obj)\n\tif ptr == nil {\n\t\titer.ReportError(\"ReadVal\", \"can not read into nil pointer\")\n\t\treturn\n\t}\n\tdecoder.Decode(ptr, iter)\n\tif iter.depth != depth {\n\t\titer.ReportError(\"ReadVal\", \"unexpected mismatched nesting\")\n\t\treturn\n\t}\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/any.go",
          "code_snippet": "Any interface {\n\tLastError() error\n\tValueType() ValueType\n\tMustBeValid() Any\n\tToBool() bool\n\tToInt() int\n\tToInt32() int32\n\tToInt64() int64\n\tToUint() uint\n\tToUint32() uint32\n\tToUint64() uint64\n\tToFloat32() float32\n\tToFloat64() float64\n\tToString() string\n\tToVal(val interface{})\n\tGet(path ...interface{}) Any\n\tSize() int\n\tKeys() []string\n\tGetInterface() interface{}\n\tWriteTo(stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Get(data []byte, path ...interface{}) Any {\n\treturn ConfigDefault.Get(data, path...)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "func (iter *Iterator) Read() interface{} {\n\tvalueType := iter.WhatIsNext()\n\tswitch valueType {\n\tcase StringValue:\n\t\treturn iter.ReadString()\n\tcase NumberValue:\n\t\tif iter.cfg.configBeforeFrozen.UseNumber {\n\t\t\treturn json.Number(iter.readNumberAsString())\n\t\t}\n\t\treturn iter.ReadFloat64()\n\tcase NilValue:\n\t\titer.skipFourBytes('n', 'u', 'l', 'l')\n\t\treturn nil\n\tcase BoolValue:\n\t\treturn iter.ReadBool()\n\tcase ArrayValue:\n\t\tarr := []interface{}{}\n\t\titer.ReadArrayCB(func(iter *Iterator) bool {\n\t\t\tvar elem interface{}\n\t\t\titer.ReadVal(\u0026elem)\n\t\t\tarr = append(arr, elem)\n\t\t\treturn true\n\t\t})\n\t\treturn arr\n\tcase ObjectValue:\n\t\tobj := map[string]interface{}{}\n\t\titer.ReadMapCB(func(Iter *Iterator, field string) bool {\n\t\t\tvar elem interface{}\n\t\t\titer.ReadVal(\u0026elem)\n\t\t\tobj[field] = elem\n\t\t\treturn true\n\t\t})\n\t\treturn obj\n\tdefault:\n\t\titer.ReportError(\"Read\", fmt.Sprintf(\"unexpected value type: %v\", valueType))\n\t\treturn nil\n\t}\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "EOF = errors.New(\"EOF\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        43,
        44,
        45,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        75,
        76,
        77,
        78,
        81
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:bindingsAttrs",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        }
      ],
      "name": "bindingsAttrs",
      "signature": "bindingsAttrs (bindings map[string]any) []trace.Attribute",
      "ground_truth": "func bindingsAttrs(bindings map[string]any) []trace.Attribute {\n\tattrs := make([]trace.Attribute, 0, len(bindings))\n\tfor key, val := range bindings {\n\t\tkey = BindingAttribute + \".\" + key\n\t\tattrs = append(attrs, bindingToAttr(key, val))\n\t}\n\treturn attrs\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 68,
      "end_line": 75,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "BindingAttribute   = \"gremlin.binding\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func bindingToAttr(key string, val any) trace.Attribute {\n\tswitch v := val.(type) {\n\tcase nil:\n\t\treturn trace.StringAttribute(key, \"\")\n\tcase int64:\n\t\treturn trace.Int64Attribute(key, v)\n\tcase float64:\n\t\treturn trace.Float64Attribute(key, v)\n\tcase string:\n\t\treturn trace.StringAttribute(key, v)\n\tcase bool:\n\t\treturn trace.BoolAttribute(key, v)\n\tdefault:\n\t\ts := fmt.Sprintf(\"%v\", v)\n\t\tif len(s) \u003e 256 {\n\t\t\ts = s[:256]\n\t\t}\n\t\treturn trace.StringAttribute(key, s)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        68,
        69,
        70,
        71,
        72,
        73,
        74
      ],
      "cover_details": {
        "line_cover_rate": 0.875
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:StateReader",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "StateReader",
      "signature": "(a *Atlas) StateReader (tables ...*Table) migrate.StateReaderFunc",
      "ground_truth": "func (a *Atlas) StateReader(tables ...*Table) migrate.StateReaderFunc {\n\treturn func(ctx context.Context) (*schema.Realm, error) {\n\t\tif a.sqlDialect == nil {\n\t\t\tdrv, err := a.entDialect(ctx, a.driver)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ta.sqlDialect = drv\n\t\t}\n\t\tif a.hashSymbols {\n\t\t\ta.setupTables(tables)\n\t\t}\n\t\treturn a.realm(tables)\n\t}\n}",
      "function_comment": "// StateReader returns an atlas migrate.StateReader returning the state as described by the Ent table slice.",
      "function_statement": "// StateReader returns an atlas migrate.StateReader returning the state as described by the Ent table slice.",
      "start_line": 523,
      "end_line": 537,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) entDialect(ctx context.Context, drv dialect.Driver) (sqlDialect, error) {\n\tvar d sqlDialect\n\tswitch a.dialect {\n\tcase dialect.MySQL:\n\t\td = \u0026MySQL{Driver: drv}\n\tcase dialect.SQLite:\n\t\td = \u0026SQLite{Driver: drv, WithForeignKeys: a.withForeignKeys}\n\tcase dialect.Postgres:\n\t\td = \u0026Postgres{Driver: drv}\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"sql/schema: unsupported dialect %q\", a.dialect)\n\t}\n\tif err := d.init(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\treturn d, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) setupTables(tables []*Table) {\n\tfor _, t := range tables {\n\t\tif t.columns == nil {\n\t\t\tt.columns = make(map[string]*Column, len(t.Columns))\n\t\t}\n\t\tfor _, c := range t.Columns {\n\t\t\tt.columns[c.Name] = c\n\t\t}\n\t\tfor _, idx := range t.Indexes {\n\t\t\tidx.Name = a.symbol(idx.Name)\n\t\t\tfor _, c := range idx.Columns {\n\t\t\t\tc.indexes.append(idx)\n\t\t\t}\n\t\t}\n\t\tfor _, pk := range t.PrimaryKey {\n\t\t\tc := t.columns[pk.Name]\n\t\t\tc.Key = PrimaryKey\n\t\t\tpk.Key = PrimaryKey\n\t\t}\n\t\tfor _, fk := range t.ForeignKeys {\n\t\t\tfk.Symbol = a.symbol(fk.Symbol)\n\t\t\tfor i := range fk.Columns {\n\t\t\t\tfk.Columns[i].foreign = fk\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) realm(tables []*Table) (*schema.Realm, error) {\n\tvar (\n\t\tsm  = make(map[string]*schema.Schema)\n\t\tbyT = make(map[*Table]*schema.Table)\n\t)\n\tfor _, et := range tables {\n\t\tif _, ok := sm[et.Schema]; !ok {\n\t\t\tsm[et.Schema] = schema.New(et.Schema)\n\t\t}\n\t\ts := sm[et.Schema]\n\t\tif et.View {\n\t\t\tif et.Annotation == nil || et.Annotation.ViewAs == \"\" \u0026\u0026 et.Annotation.ViewFor[a.dialect] == \"\" {\n\t\t\t\tcontinue // defined externally\n\t\t\t}\n\t\t\tdef := et.Annotation.ViewFor[a.dialect]\n\t\t\tif def == \"\" {\n\t\t\t\tdef = et.Annotation.ViewAs\n\t\t\t}\n\t\t\tav := schema.NewView(et.Name, def)\n\t\t\tif et.Comment != \"\" {\n\t\t\t\tav.SetComment(et.Comment)\n\t\t\t}\n\t\t\tif err := a.aVColumns(et, av); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ts.AddViews(av)\n\t\t\tcontinue\n\t\t}\n\t\tat := schema.NewTable(et.Name)\n\t\tif et.Comment != \"\" {\n\t\t\tat.SetComment(et.Comment)\n\t\t}\n\t\ta.sqlDialect.atTable(et, at)\n\t\t// universalID is the old implementation of the global unique id, relying on a table in the database.\n\t\t// The new implementation is based on annotations attached to the schema. Only one can be enabled.\n\t\tswitch {\n\t\tcase a.universalID \u0026\u0026 et.Annotation != nil \u0026\u0026 et.Annotation.IncrementStart != nil:\n\t\t\treturn nil, errors.New(\"universal id and increment start annotation are mutually exclusive\")\n\t\tcase a.universalID \u0026\u0026 et.Name != TypeTable \u0026\u0026 len(et.PrimaryKey) == 1:\n\t\t\tr, err := a.pkRange(et)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ta.sqlDialect.atIncrementT(at, r)\n\t\tcase et.Annotation != nil \u0026\u0026 et.Annotation.IncrementStart != nil:\n\t\t\ta.sqlDialect.atIncrementT(at, int64(*et.Annotation.IncrementStart))\n\t\t}\n\t\tif err := a.aColumns(et, at); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif err := a.aIndexes(et, at); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ts.AddTables(at)\n\t\tbyT[et] = at\n\t}\n\tfor _, t1 := range tables {\n\t\tif t1.View {\n\t\t\tcontinue\n\t\t}\n\t\tt2 := byT[t1]\n\t\tfor _, fk1 := range t1.ForeignKeys {\n\t\t\tfk2 := schema.NewForeignKey(fk1.Symbol).\n\t\t\t\tSetTable(t2).\n\t\t\t\tSetOnUpdate(schema.ReferenceOption(fk1.OnUpdate)).\n\t\t\t\tSetOnDelete(schema.ReferenceOption(fk1.OnDelete))\n\t\t\tfor _, c1 := range fk1.Columns {\n\t\t\t\tc2, ok := t2.Column(c1.Name)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, fmt.Errorf(\"unexpected fk %q column: %q\", fk1.Symbol, c1.Name)\n\t\t\t\t}\n\t\t\t\tfk2.AddColumns(c2)\n\t\t\t}\n\t\t\tvar refT *schema.Table\n\t\t\tfor _, t2 := range sm[fk1.RefTable.Schema].Tables {\n\t\t\t\tif t2.Name == fk1.RefTable.Name {\n\t\t\t\t\trefT = t2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif refT == nil {\n\t\t\t\treturn nil, fmt.Errorf(\"unexpected fk %q ref-table: %q\", fk1.Symbol, fk1.RefTable.Name)\n\t\t\t}\n\t\t\tfk2.SetRefTable(refT)\n\t\t\tfor _, c1 := range fk1.RefColumns {\n\t\t\t\tc2, ok := refT.Column(c1.Name)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, fmt.Errorf(\"unexpected fk %q ref-column: %q\", fk1.Symbol, c1.Name)\n\t\t\t\t}\n\t\t\t\tfk2.AddRefColumns(c2)\n\t\t\t}\n\t\t\tt2.AddForeignKeys(fk2)\n\t\t}\n\t}\n\tss := slices.SortedFunc(maps.Values(sm), func(a, b *schema.Schema) int {\n\t\treturn strings.Compare(a.Name, b.Name)\n\t})\n\treturn \u0026schema.Realm{Schemas: ss}, nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "StateReaderFunc func(ctx context.Context) (*schema.Realm, error)",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Realm struct {\n\t\tSchemas []*Schema\n\t\tAttrs   []Attr\n\t\tObjects []Object // Realm-level objects (e.g., users or extensions).\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        523,
        524,
        525,
        526,
        527,
        530,
        532,
        533,
        534,
        535
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:WithDir",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Formatter"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        }
      ],
      "name": "WithDir",
      "signature": "WithDir (dir migrate.Dir) MigrateOption",
      "ground_truth": "func WithDir(dir migrate.Dir) MigrateOption {\n\treturn func(a *Atlas) {\n\t\ta.dir = dir\n\t}\n}",
      "function_comment": "// WithDir sets the atlas migration directory to use to store migration files.",
      "function_statement": "// WithDir sets the atlas migration directory to use to store migration files.",
      "start_line": 481,
      "end_line": 485,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "MigrateOption func(*Atlas)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/dir.go",
          "code_snippet": "Dir interface {\n\t\tfs.FS\n\t\t// WriteFile writes the data to the named file.\n\t\tWriteFile(string, []byte) error\n\n\t\t// Files returns a set of files stored in this Dir to be executed on a database.\n\t\tFiles() ([]File, error)\n\n\t\t// Checksum returns a HashFile of the migration directory.\n\t\tChecksum() (HashFile, error)\n\t}",
          "ref_module": "migrate"
        }
      ],
      "covered_lines": [
        481,
        482,
        483,
        484
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/postgres.go:atTable",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "atTable",
      "signature": "(d *Postgres) atTable (t1 *Table, t2 *schema.Table)",
      "ground_truth": "func (d *Postgres) atTable(t1 *Table, t2 *schema.Table) {\n\tif t1.Annotation != nil {\n\t\tsetAtChecks(t1, t2)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 91,
      "end_line": 95,
      "file_path": "./dialect/sql/schema/postgres.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/postgres.go",
          "code_snippet": "Postgres struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func setAtChecks(et *Table, at *schema.Table) {\n\tif check := et.Annotation.Check; check != \"\" {\n\t\tat.AddChecks(\u0026schema.Check{\n\t\t\tExpr: check,\n\t\t})\n\t}\n\tif checks := et.Annotation.Checks; len(et.Annotation.Checks) \u003e 0 {\n\t\tnames := make([]string, 0, len(checks))\n\t\tfor name := range checks {\n\t\t\tnames = append(names, name)\n\t\t}\n\t\tsort.Strings(names)\n\t\tfor _, name := range names {\n\t\t\tat.AddChecks(\u0026schema.Check{\n\t\t\t\tName: name,\n\t\t\t\tExpr: checks[name],\n\t\t\t})\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        91,
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/type.go:DecoratorOfTyper",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfTyper",
      "signature": "(ext encodeExtension) DecoratorOfTyper (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecoratorOfTyper(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ.Kind() != reflect.Struct {\n\t\treturn nil\n\t}\n\tif typ.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\treturn typ.UnsafeIndirect(ptr).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(typerType) {\n\t\treturn typerEncoder{\n\t\t\ttypeEncoder: typeEncoder{ValEncoder: enc},\n\t\t\ttyperOf: func(ptr unsafe.Pointer) Typer {\n\t\t\t\t// nolint: gas\n\t\t\t\treturn ptrType.UnsafeIndirect(unsafe.Pointer(\u0026ptr)).(Typer)\n\t\t\t},\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoratorOfTyper decorates a value encoder of a Typer interface.",
      "function_statement": "// DecoratorOfTyper decorates a value encoder of a Typer interface.",
      "start_line": 97,
      "end_line": 120,
      "file_path": "./dialect/gremlin/encoding/graphson/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "typerType = reflect2.TypeOfPtr((*Typer)(nil)).Elem()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "typerEncoder struct {\n\ttypeEncoder\n\ttyperOf func(unsafe.Pointer) Typer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Typer interface {\n\tGraphsonType() Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Struct",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:CreateEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "CreateEncoder",
      "signature": "(ext encodeExtension) CreateEncoder (typ reflect2.Type) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) CreateEncoder(typ reflect2.Type) jsoniter.ValEncoder {\n\tif enc := ext.EncoderOfRegistered(typ); enc != nil {\n\t\treturn enc\n\t}\n\tif enc := ext.EncoderOfNative(typ); enc != nil {\n\t\treturn enc\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Map:\n\t\treturn ext.EncoderOfMap(typ)\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// CreateEncoder returns a value encoder for type.",
      "function_statement": "// CreateEncoder returns a value encoder for type.",
      "start_line": 57,
      "end_line": 70,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (encodeExtension) EncoderOfRegistered(typ reflect2.Type) jsoniter.ValEncoder {\n\tenc := typeEncoders[typ.String()]\n\tif enc != nil {\n\t\treturn registeredEncoder{enc}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tenc := typeEncoders[ptrType.Elem().String()]\n\t\tif enc != nil {\n\t\t\treturn registeredEncoder{\n\t\t\t\tValEncoder: \u0026jsoniter.OptionalEncoder{\n\t\t\t\t\tValueEncoder: enc,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (encodeExtension) EncoderOfNative(typ reflect2.Type) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Encoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (ext encodeExtension) EncoderOfMap(typ reflect2.Type) jsoniter.ValEncoder {\n\tmapType := typ.(reflect2.MapType)\n\treturn \u0026mapEncoder{\n\t\tmapType: mapType,\n\t\tkeyEnc:  ext.LazyEncoderOf(mapType.Key()),\n\t\telemEnc: ext.LazyEncoderOf(mapType.Elem()),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/error.go:DecoderOfError",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        }
      ],
      "name": "DecoderOfError",
      "signature": "(decodeExtension) DecoderOfError (format string, args ...any) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) DecoderOfError(format string, args ...any) jsoniter.ValDecoder {\n\treturn decoratorOfError(format, args...)\n}",
      "function_comment": "// DecoderOfError returns a value decoder which always fails to decode.",
      "function_statement": "// DecoderOfError returns a value decoder which always fails to decode.",
      "start_line": 20,
      "end_line": 22,
      "file_path": "./dialect/gremlin/encoding/graphson/error.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func decoratorOfError(format string, args ...any) errorCodec {\n\terr := fmt.Errorf(format, args...)\n\treturn errorCodec{err}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        20,
        21,
        22
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:diff",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "diff",
      "signature": "(a *Atlas) diff (ctx context.Context, name string, current, desired *schema.Schema, newTypes []string, opts ...migrate.PlanOption) (*migrate.Plan, error)",
      "ground_truth": "func (a *Atlas) diff(ctx context.Context, name string, current, desired *schema.Schema, newTypes []string, opts ...migrate.PlanOption) (*migrate.Plan, error) {\n\tchanges, err := (\u0026diffDriver{a.atDriver, a.diffHooks}).SchemaDiff(current, desired, a.diffOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfiltered := make([]schema.Change, 0, len(changes))\n\tfor _, c := range changes {\n\t\tswitch c.(type) {\n\t\t// Select only table creation and modification. The reason we may encounter this, even though specific tables\n\t\t// are passed to Inspect, is if the MySQL system variable 'lower_case_table_names' is set to 1. In such a case,\n\t\t// the given tables will be returned from inspection because MySQL compares case-insensitive, but they won't\n\t\t// match when compare them in code.\n\t\tcase *schema.AddTable, *schema.ModifyTable:\n\t\t\tfiltered = append(filtered, c)\n\t\t}\n\t}\n\tif a.indent != \"\" {\n\t\topts = append(opts, func(opts *migrate.PlanOptions) {\n\t\t\topts.Indent = a.indent\n\t\t})\n\t}\n\tplan, err := a.atDriver.PlanChanges(ctx, name, filtered, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(newTypes) \u003e 0 {\n\t\tplan.Changes = append(plan.Changes, \u0026migrate.Change{\n\t\t\tCmd:     a.sqlDialect.atTypeRangeSQL(newTypes...),\n\t\t\tComment: fmt.Sprintf(\"add pk ranges for %s tables\", strings.Join(newTypes, \",\")),\n\t\t})\n\t}\n\treturn plan, nil\n}",
      "function_comment": "// planInspect creates the current state by inspecting the connected database, computing the current state of the Ent schema",
      "function_statement": "// planInspect creates the current state by inspecting the connected database, computing the current state of the Ent schema",
      "start_line": 767,
      "end_line": 799,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (r *diffDriver) SchemaDiff(from, to *schema.Schema, opts ...schema.DiffOption) ([]schema.Change, error) {\n\tvar d Differ = DiffFunc(func(current, desired *schema.Schema) ([]schema.Change, error) {\n\t\treturn r.Driver.SchemaDiff(current, desired, opts...)\n\t})\n\tfor i := len(r.hooks) - 1; i \u003e= 0; i-- {\n\t\td = r.hooks[i](d)\n\t}\n\treturn d.Diff(from, to)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "diffDriver struct {\n\tmigrate.Driver\n\thooks []DiffHook // hooks to apply\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanOption func(*PlanOptions)",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Plan struct {\n\t\t// Version and Name of the plan. Provided by the user or auto-generated.\n\t\tVersion, Name string\n\n\t\t// Reversible describes if the changeset is reversible.\n\t\tReversible bool\n\n\t\t// Transactional describes if the changeset is transactional.\n\t\tTransactional bool\n\n\t\t// Changes defines the list of changeset in the plan.\n\t\tChanges []*Change\n\n\t\t// Delimiter to use for separating statements.\n\t\tDelimiter string\n\n\t\t// Directives to add to the file (not associated with any statements) besides the delimiter.\n\t\t// For example, atlas:txtar, atlas:txmode, etc.\n\t\tDirectives []string\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Change interface {\n\t\tchange()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddTable struct {\n\t\tT     *Table\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyTable struct {\n\t\tT       *Table\n\t\tChanges []Change\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanOptions struct {\n\t\t// PlanWithSchemaQualifier allows setting a custom schema to prefix\n\t\t// tables and other resources. An empty string indicates no qualifier.\n\t\tSchemaQualifier *string\n\t\t// Indent is the string to use for indentation.\n\t\t// If empty, no indentation is used.\n\t\tIndent string\n\t\t// Mode represents the migration planning mode to be used. If not specified, the driver picks its default.\n\t\t// This is useful to indicate to the driver whether the context is a live database, an empty one, or the\n\t\t// versioned migration workflow.\n\t\tMode PlanMode\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlanApplier interface {\n\t\t// PlanChanges returns a migration plan for applying the given changeset.\n\t\tPlanChanges(context.Context, string, []schema.Change, ...PlanOption) (*Plan, error)\n\n\t\t// ApplyChanges is responsible for applying the given changeset.\n\t\t// An error may return from ApplyChanges if the driver is unable\n\t\t// to execute a change.\n\t\tApplyChanges(context.Context, []schema.Change, ...PlanOption) error\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Change struct {\n\t\t// Cmd or statement to execute.\n\t\tCmd string\n\n\t\t// Args for placeholder parameters in the statement above.\n\t\tArgs []any\n\n\t\t// A Comment describes the change.\n\t\tComment string\n\n\t\t// Reverse contains the \"reversed\" statement(s) if\n\t\t// the command is reversible.\n\t\tReverse any // string | []string\n\n\t\t// The Source that caused this change, or nil.\n\t\tSource schema.Change\n\t}",
          "ref_module": "migrate"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Join(elems []string, sep string) string {\n\tswitch len(elems) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn elems[0]\n\t}\n\n\tvar n int\n\tif len(sep) \u003e 0 {\n\t\tif len(sep) \u003e= maxInt/(len(elems)-1) {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(sep) * (len(elems) - 1)\n\t}\n\tfor _, elem := range elems {\n\t\tif len(elem) \u003e maxInt-n {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(elem)\n\t}\n\n\tvar b Builder\n\tb.Grow(n)\n\tb.WriteString(elems[0])\n\tfor _, s := range elems[1:] {\n\t\tb.WriteString(sep)\n\t\tb.WriteString(s)\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        767,
        768,
        769,
        772,
        773,
        774,
        779,
        780,
        783,
        784,
        785,
        786,
        788,
        789,
        792,
        793,
        794,
        795,
        796,
        797,
        798
      ],
      "cover_details": {
        "line_cover_rate": 0.6363636363636364
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/init.go:init",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/error_test.go",
          "func_name": "TestErrorCodec"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestParseTag"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/tags_test.go",
          "func_name": "TestTagOptionsContains"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypeCheckType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypesString"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestTypesCheckType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeSyntaxError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "init",
      "signature": "init ()",
      "ground_truth": "func init() {\n\tconfig.RegisterExtension(\u0026encodeExtension{})\n\tconfig.RegisterExtension(\u0026decodeExtension{})\n}",
      "function_comment": "// Copyright 2019-present Facebook Inc. All rights reserved.\n// This source code is licensed under the Apache 2.0 license found",
      "function_statement": "// Copyright 2019-present Facebook Inc. All rights reserved.\n// This source code is licensed under the Apache 2.0 license found",
      "start_line": 13,
      "end_line": 16,
      "file_path": "./dialect/gremlin/encoding/graphson/init.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        13,
        14,
        15,
        16
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:WithFormatter",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Formatter"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        }
      ],
      "name": "WithFormatter",
      "signature": "WithFormatter (fmt migrate.Formatter) MigrateOption",
      "ground_truth": "func WithFormatter(fmt migrate.Formatter) MigrateOption {\n\treturn func(a *Atlas) {\n\t\ta.fmt = fmt\n\t}\n}",
      "function_comment": "// WithFormatter sets atlas formatter to use to write changes to migration files.",
      "function_statement": "// WithFormatter sets atlas formatter to use to write changes to migration files.",
      "start_line": 488,
      "end_line": 492,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "MigrateOption func(*Atlas)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/dir.go",
          "code_snippet": "Formatter interface {\n\t\t// Format formats the given Plan into one or more migration files.\n\t\tFormat(*Plan) ([]File, error)\n\t}",
          "ref_module": "migrate"
        }
      ],
      "covered_lines": [
        488,
        489,
        490,
        491
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/writer.go:Change",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/writer_test.go",
          "func_name": "TestDirWriter"
        }
      ],
      "name": "Change",
      "signature": "(d *DirWriter) Change (comment string)",
      "ground_truth": "func (d *DirWriter) Change(comment string) {\n\t// Trim semicolon and new line, because formatter adds it.\n\td.changes = append(d.changes, \u0026migrate.Change{Comment: comment, Cmd: strings.TrimRight(d.b.String(), \";\\n\")})\n\td.b.Reset()\n}",
      "function_comment": "// Change converts all written statement so far into a migration\n// change with the given comment.",
      "function_statement": "// Change converts all written statement so far into a migration\n// change with the given comment.",
      "start_line": 52,
      "end_line": 56,
      "file_path": "./dialect/sql/schema/writer.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/writer.go",
          "code_snippet": "DirWriter struct {\n\t\tDir       migrate.Dir       // target directory.\n\t\tFormatter migrate.Formatter // optional formatter.\n\t\tb         bytes.Buffer      // working buffer.\n\t\tchanges   []*migrate.Change // changes to flush.\n\t}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Change struct {\n\t\t// Cmd or statement to execute.\n\t\tCmd string\n\n\t\t// Args for placeholder parameters in the statement above.\n\t\tArgs []any\n\n\t\t// A Comment describes the change.\n\t\tComment string\n\n\t\t// Reverse contains the \"reversed\" statement(s) if\n\t\t// the command is reversible.\n\t\tReverse any // string | []string\n\n\t\t// The Source that caused this change, or nil.\n\t\tSource schema.Change\n\t}",
          "ref_module": "migrate"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func TrimRight(s, cutset string) string {\n\tif s == \"\" || cutset == \"\" {\n\t\treturn s\n\t}\n\tif len(cutset) == 1 \u0026\u0026 cutset[0] \u003c utf8.RuneSelf {\n\t\treturn trimRightByte(s, cutset[0])\n\t}\n\tif as, ok := makeASCIISet(cutset); ok {\n\t\treturn trimRightASCII(s, \u0026as)\n\t}\n\treturn trimRightUnicode(s, cutset)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) String() string {\n\tif b == nil {\n\t\t// Special case, useful in debugging.\n\t\treturn \"\u003cnil\u003e\"\n\t}\n\treturn string(b.buf[b.off:])\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Reset() {\n\tb.buf = b.buf[:0]\n\tb.off = 0\n\tb.lastRead = opInvalid\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        52,
        53,
        54,
        55,
        56
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:DecoderOfNative",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoderOfNative",
      "signature": "(decodeExtension) DecoderOfNative (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) DecoderOfNative(typ reflect2.Type) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Decoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// DecoderOfNative returns a value decoder of a native type.",
      "function_statement": "// DecoderOfNative returns a value decoder of a native type.",
      "start_line": 53,
      "end_line": 60,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Decoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        53,
        54,
        55,
        56,
        57,
        58
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/mysql.go:atIndex",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "atIndex",
      "signature": "(d *MySQL) atIndex (idx1 *Index, t2 *schema.Table, idx2 *schema.Index) error",
      "ground_truth": "func (d *MySQL) atIndex(idx1 *Index, t2 *schema.Table, idx2 *schema.Index) error {\n\tprefix := indexParts(idx1)\n\tfor _, c1 := range idx1.Columns {\n\t\tc2, ok := t2.Column(c1.Name)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"unexpected index %q column: %q\", idx1.Name, c1.Name)\n\t\t}\n\t\tpart := \u0026schema.IndexPart{C: c2}\n\t\tif v, ok := prefix[c1.Name]; ok {\n\t\t\tpart.AddAttrs(\u0026mysql.SubPart{Len: int(v)})\n\t\t}\n\t\tidx2.AddParts(part)\n\t}\n\tif t, ok := indexType(idx1, dialect.MySQL); ok {\n\t\tidx2.AddAttrs(\u0026mysql.IndexType{T: t})\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 260,
      "end_line": 277,
      "file_path": "./dialect/sql/schema/mysql.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "MySQL struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\tName       string                  // index name.\n\tUnique     bool                    // uniqueness.\n\tColumns    []*Column               // actual table columns.\n\tAnnotation *entsql.IndexAnnotation // index annotation.\n\tcolumns    []string                // columns loaded from query scan.\n\trealname   string                  // real name in the database (Postgres only).\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "func indexParts(idx *Index) map[string]uint {\n\tparts := make(map[string]uint)\n\tif idx.Annotation == nil {\n\t\treturn parts\n\t}\n\t// If prefix (without a name) was defined on the\n\t// annotation, map it to the single column index.\n\tif idx.Annotation.Prefix \u003e 0 \u0026\u0026 len(idx.Columns) == 1 {\n\t\tparts[idx.Columns[0].Name] = idx.Annotation.Prefix\n\t}\n\tfor column, part := range idx.Annotation.PrefixColumns {\n\t\tparts[column] = part\n\t}\n\treturn parts\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func indexType(idx *Index, d string) (string, bool) {\n\tant := idx.Annotation\n\tif ant == nil {\n\t\treturn \"\", false\n\t}\n\tif ant.Types != nil \u0026\u0026 ant.Types[d] != \"\" {\n\t\treturn ant.Types[d], true\n\t}\n\tif ant.Type != \"\" {\n\t\treturn ant.Type, true\n\t}\n\treturn \"\", false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "MySQL    = \"mysql\"",
          "ref_module": "dialect"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Index struct {\n\t\tName   string\n\t\tUnique bool\n\t\t// Table or View that this index belongs to.\n\t\tTable *Table\n\t\tView  *View\n\t\tAttrs []Attr\n\t\tParts []*IndexPart\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "func (t *Table) Column(name string) (*Column, bool) {\n\tfor _, c := range t.Columns {\n\t\tif c.Name == name {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IndexPart struct {\n\t\t// SeqNo represents the sequence number of the key part\n\t\t// in the index.\n\t\tSeqNo int\n\t\t// Desc indicates if the key part is stored in descending\n\t\t// order. All databases use ascending order as default.\n\t\tDesc  bool\n\t\tX     Expr\n\t\tC     *Column\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (p *IndexPart) AddAttrs(attrs ...Attr) *IndexPart {\n\tp.Attrs = append(p.Attrs, attrs...)\n\treturn p\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/inspect_oss.go",
          "code_snippet": "SubPart struct {\n\t\tschema.Attr\n\t\tLen int\n\t}",
          "ref_module": "mysql"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddParts(parts ...*IndexPart) *Index {\n\tfor _, p := range parts {\n\t\tif p.C != nil \u0026\u0026 !p.C.hasIndex(i) {\n\t\t\tp.C.Indexes = append(p.C.Indexes, i)\n\t\t}\n\t\tp.SeqNo = len(i.Parts)\n\t\ti.Parts = append(i.Parts, p)\n\t}\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (i *Index) AddAttrs(attrs ...Attr) *Index {\n\ti.Attrs = append(i.Attrs, attrs...)\n\treturn i\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/inspect_oss.go",
          "code_snippet": "IndexType struct {\n\t\tschema.Attr\n\t\tT string // BTREE, HASH, FULLTEXT, SPATIAL, RTREE\n\t}",
          "ref_module": "mysql"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        260,
        261,
        262,
        263,
        264,
        267,
        268,
        271,
        273,
        276
      ],
      "cover_details": {
        "line_cover_rate": 0.5555555555555556
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:Unmarshal",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "Unmarshal",
      "signature": "Unmarshal (data []byte, v any) error",
      "ground_truth": "func Unmarshal(data []byte, v any) error {\n\treturn config.Unmarshal(data, v)\n}",
      "function_comment": "// Unmarshal parses the graphson encoded data and stores the result\n// in the value pointed to by v.",
      "function_statement": "// Unmarshal parses the graphson encoded data and stores the result\n// in the value pointed to by v.",
      "start_line": 21,
      "end_line": 23,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        21,
        22,
        23
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:Diff",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrateWithoutForeignKeys"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "Diff",
      "signature": "(f DiffFunc) Diff (current, desired *schema.Schema) ([]schema.Change, error)",
      "ground_truth": "func (f DiffFunc) Diff(current, desired *schema.Schema) ([]schema.Change, error) {\n\treturn f(current, desired)\n}",
      "function_comment": "// Diff calls f(current, desired).",
      "function_statement": "// Diff calls f(current, desired).",
      "start_line": 273,
      "end_line": 275,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DiffFunc func(current, desired *schema.Schema) ([]schema.Change, error)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Change interface {\n\t\tchange()\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        273,
        274,
        275
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/type.go:Table",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Table"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        }
      ],
      "name": "Table",
      "signature": "(t Type) Table () string",
      "ground_truth": "func (t Type) Table() string {\n\tif ant := t.EntSQL(); ant != nil \u0026\u0026 ant.Table != \"\" {\n\t\treturn ant.Table\n\t}\n\tif t.schema != nil \u0026\u0026 t.schema.Config.Table != \"\" {\n\t\treturn t.schema.Config.Table\n\t}\n\treturn snake(rules.Pluralize(t.Name))\n}",
      "function_comment": "// Table returns SQL table name of the node/type.",
      "function_statement": "// Table returns SQL table name of the node/type.",
      "start_line": 305,
      "end_line": 313,
      "file_path": "./entc/gen/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) EntSQL() *entsql.Annotation {\n\treturn sqlAnnotate(t.Annotations)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/entsql/annotation.go",
          "code_snippet": "Annotation struct {\n\t// The Schema option allows setting the schema which the table belongs to.\n\t// Note, this option is no-op for Ent default migration engine. However, schema\n\t// extensions (like Atlas) can accept this option and implement it accordingly.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSchema: \"public\",\n\t//\t}\n\t//\n\tSchema string `json:\"schema,omitempty\"`\n\n\t// The Table option allows overriding the default table\n\t// name that is generated by ent. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tTable: \"Users\",\n\t//\t}\n\t//\n\tTable string `json:\"table,omitempty\"`\n\n\t// Charset defines the character-set of the table. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCharset: \"utf8mb4\",\n\t//\t}\n\t//\n\tCharset string `json:\"charset,omitempty\"`\n\n\t// Collation defines the collation of the table (a set of rules for comparing\n\t// characters in a character set). For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCollation: \"utf8mb4_bin\",\n\t//\t}\n\t//\n\tCollation string `json:\"collation,omitempty\"`\n\n\t// Default specifies a literal default value of a column. Note that using\n\t// this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefault: `{\"key\":\"value\"}`,\n\t//\t}\n\t//\n\tDefault string `json:\"default,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column. Using this option,\n\t// users can define custom expressions to be set as database default values. Note that\n\t// using this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"CURRENT_TIMESTAMP\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"uuid_generate_v4()\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"(a + b)\",\n\t//\t}\n\t//\n\tDefaultExpr string `json:\"default_expr,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column per dialect.\n\t// See, DefaultExpr for full doc.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExprs: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"uuid()\",\n\t//\t\t\tdialect.Postgres: \"uuid_generate_v4\",\n\t//\t\t}\n\t//\n\tDefaultExprs map[string]string `json:\"default_exprs,omitempty\"`\n\n\t// Options defines the additional table options. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOptions: \"ENGINE = INNODB\",\n\t//\t}\n\t//\n\tOptions string `json:\"options,omitempty\"`\n\n\t// Size defines the column size in the generated schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSize: 128,\n\t//\t}\n\t//\n\tSize int64 `json:\"size,omitempty\"`\n\n\t// WithComments specifies whether fields' comments should\n\t// be stored in the database schema as column comments.\n\t//\n\t//  withCommentsEnabled := true\n\t//\tentsql.WithComments{\n\t//\t\tWithComments: \u0026withCommentsEnabled,\n\t//\t}\n\t//\n\tWithComments *bool `json:\"with_comments,omitempty\"`\n\n\t// Incremental defines the auto-incremental behavior of a column. For example:\n\t//\n\t//  incrementalEnabled := true\n\t//  entsql.Annotation{\n\t//      Incremental: \u0026incrementalEnabled,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever best fits each scenario.\n\t//\n\tIncremental *bool `json:\"incremental,omitempty\"`\n\n\t// IncrementStart defines the auto-incremental start value of a column. For example:\n\t//\n\t//  incrementStart := 100\n\t//  entsql.Annotation{\n\t//      IncrementStart: \u0026incrementStart,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever the database settings are.\n\t//\n\tIncrementStart *int `json:\"increment_start,omitempty\"`\n\n\t// OnDelete specifies a custom referential action for DELETE operations on parent\n\t// table that has matching rows in the child table.\n\t//\n\t// For example, in order to delete rows from the parent table and automatically delete\n\t// their matching rows in the child table, pass the following annotation:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOnDelete: entsql.Cascade,\n\t//\t}\n\t//\n\tOnDelete ReferenceOption `json:\"on_delete,omitempty\"`\n\n\t// Check allows injecting custom \"DDL\" for setting an unnamed \"CHECK\" clause in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCheck: \"age \u003c 10\",\n\t//\t}\n\t//\n\tCheck string `json:\"check,omitempty\"`\n\n\t// Checks allows injecting custom \"DDL\" for setting named \"CHECK\" clauses in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tChecks: map[string]string{\n\t//\t\t\t\"valid_discount\": \"price \u003e discount_price\",\n\t//\t\t},\n\t//\t}\n\t//\n\tChecks map[string]string `json:\"checks,omitempty\"`\n\n\t// Skip indicates that the field or the schema is skipped/ignored during\n\t// migration (e.g., defined externally).\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSkip: true,\n\t//\t}\n\t//\n\tSkip bool `json:\"skip,omitempty\"`\n\n\t// ViewAs allows defining a view for the schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tView: \"SELECT name FROM users\",\n\t//\t}\n\tViewAs string `json:\"view_as,omitempty\"`\n\n\t// ViewFor allows defining a view for the schema per dialect. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tViewFor: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"...\",\n\t//\t\t\tdialect.Postgres: \"...\",\n\t//\t\t},\n\t//\t}\n\tViewFor map[string]string `json:\"view_for,omitempty\"`\n\n\t// error occurs during annotation build. This field is not\n\t// serialized to JSON and used only by the codegen loader.\n\terr error\n}",
          "ref_module": "entsql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/ent.go",
          "code_snippet": "Config struct {\n\t\t// A Table is an optional table name defined for the schema.\n\t\tTable string\n\t}",
          "ref_module": "ent"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/load/schema.go",
          "code_snippet": "Schema struct {\n\tName         string         `json:\"name,omitempty\"`\n\tPos          string         `json:\"-\"`\n\tView         bool           `json:\"view,omitempty\"`\n\tConfig       ent.Config     `json:\"config,omitempty\"`\n\tEdges        []*Edge        `json:\"edges,omitempty\"`\n\tFields       []*Field       `json:\"fields,omitempty\"`\n\tIndexes      []*Index       `json:\"indexes,omitempty\"`\n\tHooks        []*Position    `json:\"hooks,omitempty\"`\n\tInterceptors []*Position    `json:\"interceptors,omitempty\"`\n\tPolicy       []*Position    `json:\"policy,omitempty\"`\n\tAnnotations  map[string]any `json:\"annotations,omitempty\"`\n}",
          "ref_module": "load"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "func snake(s string) string {\n\tvar (\n\t\tj int\n\t\tb strings.Builder\n\t)\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tr := rune(s[i])\n\t\t// Put '_' if it is not a start or end of a word, current letter is uppercase,\n\t\t// and previous is lowercase (cases like: \"UserInfo\"), or next letter is also\n\t\t// a lowercase and previous letter is not \"_\".\n\t\tif i \u003e 0 \u0026\u0026 i \u003c len(s)-1 \u0026\u0026 unicode.IsUpper(r) {\n\t\t\tif unicode.IsLower(rune(s[i-1])) ||\n\t\t\t\tj != i-1 \u0026\u0026 unicode.IsLower(rune(s[i+1])) \u0026\u0026 unicode.IsLetter(rune(s[i-1])) {\n\t\t\t\tj = i\n\t\t\t\tb.WriteString(\"_\")\n\t\t\t}\n\t\t}\n\t\tb.WriteRune(unicode.ToLower(r))\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Pluralize(word string) string {\n\tif len(word) == 0 {\n\t\treturn word\n\t}\n\tif rs.isUncountable(word) {\n\t\treturn word\n\t}\n\tfor _, rule := range rs.plurals {\n\t\tif rule.exact {\n\t\t\tif word == rule.suffix {\n\t\t\t\treturn rule.replacement\n\t\t\t}\n\t\t} else {\n\t\t\tif strings.HasSuffix(word, rule.suffix) {\n\t\t\t\treturn replaceLast(word, rule.suffix, rule.replacement)\n\t\t\t}\n\t\t}\n\t}\n\treturn word + \"s\"\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        305,
        306,
        309,
        312
      ],
      "cover_details": {
        "line_cover_rate": 0.4444444444444444
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/type.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        }
      ],
      "name": "Encode",
      "signature": "(enc typerEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc typerEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tenc.typeEncoder.Type = enc.typerOf(ptr).GraphsonType()\n\tenc.typeEncoder.Encode(ptr, stream)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 142,
      "end_line": 145,
      "file_path": "./dialect/gremlin/encoding/graphson/type.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "typerEncoder struct {\n\ttypeEncoder\n\ttyperOf func(unsafe.Pointer) Typer\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Typer interface {\n\tGraphsonType() Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "func (enc typeEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tstream.WriteObjectStart()\n\tstream.WriteObjectField(TypeKey)\n\tstream.WriteString(enc.Type.String())\n\tstream.WriteMore()\n\tstream.WriteObjectField(ValueKey)\n\tenc.ValEncoder.Encode(ptr, stream)\n\tstream.WriteObjectEnd()\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        142,
        143,
        144,
        145
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/time.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        }
      ],
      "name": "Encode",
      "signature": "(timeCodec) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (timeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tts := *((*time.Time)(ptr))\n\tstream.WriteInt64(ts.UnixNano() / time.Millisecond.Nanoseconds())\n}",
      "function_comment": "// Copyright 2019-present Facebook Inc. All rights reserved.\n// This source code is licensed under the Apache 2.0 license found",
      "function_statement": "// Copyright 2019-present Facebook Inc. All rights reserved.\n// This source code is licensed under the Apache 2.0 license found",
      "start_line": 26,
      "end_line": 29,
      "file_path": "./dialect/gremlin/encoding/graphson/time.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/time.go",
          "code_snippet": "timeCodec struct{}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_int.go",
          "code_snippet": "func (stream *Stream) WriteInt64(nval int64) {\n\tvar val uint64\n\tif nval \u003c 0 {\n\t\tval = uint64(-nval)\n\t\tstream.buf = append(stream.buf, '-')\n\t} else {\n\t\tval = uint64(nval)\n\t}\n\tstream.WriteUint64(val)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (t Time) UnixNano() int64 {\n\treturn (t.unixSec())*1e9 + int64(t.nsec())\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (d Duration) Nanoseconds() int64 { return int64(d) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        26,
        27,
        28,
        29
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/stats.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/stats_test.go",
          "func_name": "TestStatsCollection"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t statsTransport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t statsTransport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tstats.Record(ctx, RequestCount.M(1))\n\tstart := time.Now()\n\trsp, err := t.base.RoundTrip(ctx, req)\n\tlatency := float64(time.Since(start)) / float64(time.Millisecond)\n\tvar (\n\t\ttags = make([]tag.Mutator, 1)\n\t\tms   = []stats.Measurement{RoundTripLatency.M(latency)}\n\t)\n\tif err == nil {\n\t\ttags[0] = tag.Upsert(StatusCode, strconv.Itoa(rsp.Status.Code))\n\t\tms = append(ms, ResponseBytes.M(int64(len(rsp.Result.Data))))\n\t} else {\n\t\ttags[0] = tag.Upsert(StatusCode, \"error\")\n\t}\n\t_ = stats.RecordWithTags(ctx, tags, ms...)\n\treturn rsp, err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 100,
      "end_line": 117,
      "file_path": "./dialect/gremlin/ocgremlin/stats.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "statsTransport struct {\n\tbase gremlin.RoundTripper\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "RequestCount = stats.Int64(\n\t\t\"gremlin/request_count\",\n\t\t\"Number of Gremlin requests started\",\n\t\tstats.UnitDimensionless,\n\t)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "RoundTripLatency = stats.Float64(\n\t\t\"gremlin/roundtrip_latency\",\n\t\t\"End-to-end latency\",\n\t\tstats.UnitMilliseconds,\n\t)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "StatusCode, _ = tag.NewKey(\"gremlin_status_code\")",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/stats.go",
          "code_snippet": "ResponseBytes = stats.Int64(\n\t\t\"gremlin/response_bytes\",\n\t\t\"Total number of bytes in response data\",\n\t\tstats.UnitBytes,\n\t)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/record.go",
          "code_snippet": "func Record(ctx context.Context, ms ...Measurement) {\n\t// Record behaves the same as RecordWithOptions, but because we do not have to handle generic functionality\n\t// (RecordOptions) we can reduce some allocations to speed up this hot path\n\tif len(ms) == 0 {\n\t\treturn\n\t}\n\trecorder := internal.MeasurementRecorder.(measurementRecorder)\n\trecord := false\n\tfor _, m := range ms {\n\t\tif m.desc.subscribed() {\n\t\t\trecord = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !record {\n\t\treturn\n\t}\n\trecorder(tag.FromContext(ctx), ms, nil)\n\treturn\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/measure_int64.go",
          "code_snippet": "func (m *Int64Measure) M(v int64) Measurement {\n\treturn Measurement{\n\t\tm:    m,\n\t\tdesc: m.desc,\n\t\tv:    float64(v),\n\t}\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/tag/map.go",
          "code_snippet": "Mutator interface {\n\tMutate(t *Map) (*Map, error)\n}",
          "ref_module": "tag"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/measure.go",
          "code_snippet": "Measurement struct {\n\tv    float64\n\tm    Measure\n\tdesc *measureDescriptor\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/measure_float64.go",
          "code_snippet": "func (m *Float64Measure) M(v float64) Measurement {\n\treturn Measurement{\n\t\tm:    m,\n\t\tdesc: m.desc,\n\t\tv:    v,\n\t}\n}",
          "ref_module": "stats"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/tag/map.go",
          "code_snippet": "func Upsert(k Key, v string, mds ...Metadata) Mutator {\n\treturn \u0026mutator{\n\t\tfn: func(m *Map) (*Map, error) {\n\t\t\tif !checkValue(v) {\n\t\t\t\treturn nil, errInvalidValue\n\t\t\t}\n\t\t\tm.upsert(k, v, createMetadatas(mds...))\n\t\t\treturn m, nil\n\t\t},\n\t}\n}",
          "ref_module": "tag"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/stats/record.go",
          "code_snippet": "func RecordWithTags(ctx context.Context, mutators []tag.Mutator, ms ...Measurement) error {\n\treturn RecordWithOptions(ctx, WithTags(mutators...), WithMeasurements(ms...))\n}",
          "ref_module": "stats"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Now() Time {\n\tsec, nsec, mono := runtimeNow()\n\tif mono == 0 {\n\t\treturn Time{uint64(nsec), sec + unixToInternal, Local}\n\t}\n\tmono -= startNano\n\tsec += unixToInternal - minWall\n\tif uint64(sec)\u003e\u003e33 != 0 {\n\t\t// Seconds field overflowed the 33 bits available when\n\t\t// storing a monotonic time. This will be true after\n\t\t// March 16, 2157.\n\t\treturn Time{uint64(nsec), sec + minWall, Local}\n\t}\n\treturn Time{hasMonotonic | uint64(sec)\u003c\u003cnsecShift | uint64(nsec), mono, Local}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Since(t Time) Duration {\n\tif t.wall\u0026hasMonotonic != 0 {\n\t\t// Common case optimization: if t has monotonic time, then Sub will use only it.\n\t\treturn subMono(runtimeNano()-startNano, t.ext)\n\t}\n\treturn Now().Sub(t)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func make(t Type, size ...IntegerType) Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strconv/itoa.go",
          "code_snippet": "func Itoa(i int) string {\n\treturn FormatInt(int64(i), 10)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116
      ],
      "cover_details": {
        "line_cover_rate": 0.9444444444444444
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:UpdateStructDescriptor",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "UpdateStructDescriptor",
      "signature": "(ext decodeExtension) UpdateStructDescriptor (desc *jsoniter.StructDescriptor)",
      "ground_truth": "func (ext decodeExtension) UpdateStructDescriptor(desc *jsoniter.StructDescriptor) {\n\tfor _, binding := range desc.Fields {\n\t\tif tag, ok := binding.Field.Tag().Lookup(\"graphson\"); ok \u0026\u0026 tag != \"-\" {\n\t\t\tif dec := ext.DecoratorOfStructField(binding.Decoder, tag); dec != nil {\n\t\t\t\tbinding.Decoder = dec\n\t\t\t}\n\t\t}\n\t}\n}",
      "function_comment": "// UpdateStructDescriptor decorates struct field encoders for graphson tags.",
      "function_statement": "// UpdateStructDescriptor decorates struct field encoders for graphson tags.",
      "start_line": 48,
      "end_line": 56,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/struct.go",
          "code_snippet": "func (decodeExtension) DecoratorOfStructField(dec jsoniter.ValDecoder, tag string) jsoniter.ValDecoder {\n\ttyp, _ := parseTag(tag)\n\tif typ == \"\" {\n\t\treturn nil\n\t}\n\n\tdecoder, ok := dec.(typeDecoder)\n\tif !ok {\n\t\tdecoder = typeDecoder{ValDecoder: dec}\n\t}\n\tdecoder.typeChecker = Type(typ)\n\n\treturn decoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_extension.go",
          "code_snippet": "StructDescriptor struct {\n\tType   reflect2.Type\n\tFields []*Binding\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "StructField interface {\n\tOffset() uintptr\n\tName() string\n\tPkgPath() string\n\tType() Type\n\tTag() reflect.StructTag\n\tIndex() []int\n\tAnonymous() bool\n\tSet(obj interface{}, value interface{})\n\tUnsafeSet(obj unsafe.Pointer, value unsafe.Pointer)\n\tGet(obj interface{}) interface{}\n\tUnsafeGet(obj unsafe.Pointer) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect_extension.go",
          "code_snippet": "Binding struct {\n\tlevels    []int\n\tField     reflect2.StructField\n\tFromNames []string\n\tToNames   []string\n\tEncoder   ValEncoder\n\tDecoder   ValDecoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func (tag StructTag) Lookup(key string) (value string, ok bool) {\n\t// When modifying this code, also update the validateStructTag code\n\t// in cmd/vet/structtag.go.\n\n\tfor tag != \"\" {\n\t\t// Skip leading space.\n\t\ti := 0\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] == ' ' {\n\t\t\ti++\n\t\t}\n\t\ttag = tag[i:]\n\t\tif tag == \"\" {\n\t\t\tbreak\n\t\t}\n\n\t\t// Scan to colon. A space, a quote or a control character is a syntax error.\n\t\t// Strictly speaking, control chars include the range [0x7f, 0x9f], not just\n\t\t// [0x00, 0x1f], but in practice, we ignore the multi-byte control characters\n\t\t// as it is simpler to inspect the tag's bytes than the tag's runes.\n\t\ti = 0\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] \u003e ' ' \u0026\u0026 tag[i] != ':' \u0026\u0026 tag[i] != '\"' \u0026\u0026 tag[i] != 0x7f {\n\t\t\ti++\n\t\t}\n\t\tif i == 0 || i+1 \u003e= len(tag) || tag[i] != ':' || tag[i+1] != '\"' {\n\t\t\tbreak\n\t\t}\n\t\tname := string(tag[:i])\n\t\ttag = tag[i+1:]\n\n\t\t// Scan quoted string to find value.\n\t\ti = 1\n\t\tfor i \u003c len(tag) \u0026\u0026 tag[i] != '\"' {\n\t\t\tif tag[i] == '\\\\' {\n\t\t\t\ti++\n\t\t\t}\n\t\t\ti++\n\t\t}\n\t\tif i \u003e= len(tag) {\n\t\t\tbreak\n\t\t}\n\t\tqvalue := string(tag[:i+1])\n\t\ttag = tag[i+1:]\n\n\t\tif key == name {\n\t\t\tvalue, err := strconv.Unquote(qvalue)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn value, true\n\t\t}\n\t}\n\treturn \"\", false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        48,
        49,
        50,
        51,
        52,
        53
      ],
      "cover_details": {
        "line_cover_rate": 0.6666666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:WithDiffOptions",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        }
      ],
      "name": "WithDiffOptions",
      "signature": "WithDiffOptions (opts ...schema.DiffOption) MigrateOption",
      "ground_truth": "func WithDiffOptions(opts ...schema.DiffOption) MigrateOption {\n\treturn func(a *Atlas) {\n\t\ta.diffOptions = append(a.diffOptions, opts...)\n\t}\n}",
      "function_comment": "// WithDiffOptions adds a list of options to pass to the diff engine.",
      "function_statement": "// WithDiffOptions adds a list of options to pass to the diff engine.",
      "start_line": 298,
      "end_line": 302,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "MigrateOption func(*Atlas)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DiffOption func(*DiffOptions)",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        298,
        299,
        300,
        301
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:requestAttrs",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "requestAttrs",
      "signature": "requestAttrs (req *gremlin.Request, withQuery bool) []trace.Attribute",
      "ground_truth": "func requestAttrs(req *gremlin.Request, withQuery bool) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.StringAttribute(RequestIDAttribute, req.RequestID),\n\t\ttrace.StringAttribute(OperationAttribute, req.Operation),\n\t}\n\tif withQuery {\n\t\tquery, _ := req.Arguments[gremlin.ArgsGremlin].(string)\n\t\tattrs = append(attrs, trace.StringAttribute(QueryAttribute, query))\n\t\tif bindings, ok := req.Arguments[gremlin.ArgsBindings].(map[string]any); ok {\n\t\t\tattrs = append(attrs, bindingsAttrs(bindings)...)\n\t\t}\n\t}\n\treturn attrs\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 53,
      "end_line": 66,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "RequestIDAttribute = \"gremlin.request_id\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "OperationAttribute = \"gremlin.operation\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "QueryAttribute     = \"gremlin.query\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsBindings = \"bindings\"",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func bindingsAttrs(bindings map[string]any) []trace.Attribute {\n\tattrs := make([]trace.Attribute, 0, len(bindings))\n\tfor key, val := range bindings {\n\t\tkey = BindingAttribute + \".\" + key\n\t\tattrs = append(attrs, bindingToAttr(key, val))\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:SchemaDiff",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "SchemaDiff",
      "signature": "(r *diffDriver) SchemaDiff (from, to *schema.Schema, opts ...schema.DiffOption) ([]schema.Change, error)",
      "ground_truth": "func (r *diffDriver) SchemaDiff(from, to *schema.Schema, opts ...schema.DiffOption) ([]schema.Change, error) {\n\tvar d Differ = DiffFunc(func(current, desired *schema.Schema) ([]schema.Change, error) {\n\t\treturn r.Driver.SchemaDiff(current, desired, opts...)\n\t})\n\tfor i := len(r.hooks) - 1; i \u003e= 0; i-- {\n\t\td = r.hooks[i](d)\n\t}\n\treturn d.Diff(from, to)\n}",
      "function_comment": "// SchemaDiff creates the diff between two schemas, but includes \"diff hooks\".",
      "function_statement": "// SchemaDiff creates the diff between two schemas, but includes \"diff hooks\".",
      "start_line": 1203,
      "end_line": 1211,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "diffDriver struct {\n\tmigrate.Driver\n\thooks []DiffHook // hooks to apply\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Differ interface {\n\t\t// Diff returns a list of changes that construct a migration plan.\n\t\tDiff(current, desired *schema.Schema) ([]schema.Change, error)\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DiffFunc func(current, desired *schema.Schema) ([]schema.Change, error)",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DiffOption func(*DiffOptions)",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Change interface {\n\t\tchange()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Differ interface {\n\t\t// RealmDiff returns a diff report for migrating a realm\n\t\t// (or a database) from state \"from\" to state \"to\". An error\n\t\t// is returned if such step is not possible.\n\t\tRealmDiff(from, to *Realm, opts ...DiffOption) ([]Change, error)\n\n\t\t// SchemaDiff returns a diff report for migrating a schema\n\t\t// from state \"from\" to state \"to\". An error is returned\n\t\t// if such step is not possible.\n\t\tSchemaDiff(from, to *Schema, opts ...DiffOption) ([]Change, error)\n\n\t\t// TableDiff returns a diff report for migrating a table\n\t\t// from state \"from\" to state \"to\". An error is returned\n\t\t// if such step is not possible.\n\t\tTableDiff(from, to *Table, opts ...DiffOption) ([]Change, error)\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        1203,
        1204,
        1205,
        1206,
        1207,
        1208,
        1209,
        1210
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/lazy.go:LazyDecoderOf",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "LazyDecoderOf",
      "signature": "(decodeExtension) LazyDecoderOf (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
      "function_comment": "// LazyDecoderOf returns a lazy unique decoder for type.",
      "function_statement": "// LazyDecoderOf returns a lazy unique decoder for type.",
      "start_line": 24,
      "end_line": 33,
      "file_path": "./dialect/gremlin/encoding/graphson/lazy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "lazyDecoder struct {\n\tjsoniter.ValDecoder\n\tresolve func() jsoniter.ValDecoder\n\tonce    sync.Once\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "uniqueType struct {\n\ttyp         Type\n\tonce        sync.Once\n\telemChecker typeChecker\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/decode.go:CreateDecoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "CreateDecoder",
      "signature": "(ext decodeExtension) CreateDecoder (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) CreateDecoder(typ reflect2.Type) jsoniter.ValDecoder {\n\tif dec := ext.DecoderOfRegistered(typ); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoderOfUnmarshaler(typ); dec != nil {\n\t\treturn dec\n\t}\n\tif dec := ext.DecoderOfNative(typ); dec != nil {\n\t\treturn dec\n\t}\n\tswitch typ.Kind() {\n\tcase reflect.Array:\n\t\treturn ext.DecoderOfArray(typ)\n\tcase reflect.Slice:\n\t\treturn ext.DecoderOfSlice(typ)\n\tcase reflect.Map:\n\t\treturn ext.DecoderOfMap(typ)\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// CreateDecoder returns a value decoder for type.",
      "function_statement": "// CreateDecoder returns a value decoder for type.",
      "start_line": 59,
      "end_line": 79,
      "file_path": "./dialect/gremlin/encoding/graphson/decode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/extension.go",
          "code_snippet": "func (decodeExtension) DecoderOfRegistered(typ reflect2.Type) jsoniter.ValDecoder {\n\tdec := typeDecoders[typ.String()]\n\tif dec != nil {\n\t\treturn registeredDecoder{dec}\n\t}\n\tif typ.Kind() == reflect.Ptr {\n\t\tptrType := typ.(reflect2.PtrType)\n\t\tdec := typeDecoders[ptrType.Elem().String()]\n\t\tif dec != nil {\n\t\t\treturn registeredDecoder{\n\t\t\t\tValDecoder: \u0026jsoniter.OptionalDecoder{\n\t\t\t\t\tValueType:    ptrType.Elem(),\n\t\t\t\t\tValueDecoder: dec,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "func (decodeExtension) DecoderOfUnmarshaler(typ reflect2.Type) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(unmarshalerType) {\n\t\treturn referenceDecoder{\n\t\t\tunmarshalerDecoder{ptrType},\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "func (decodeExtension) DecoderOfNative(typ reflect2.Type) jsoniter.ValDecoder {\n\tswitch typ.Kind() {\n\tcase reflect.Float64:\n\t\treturn float64Decoder{typ}\n\tdefault:\n\t\treturn nil\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfArray(typ reflect2.Type) jsoniter.ValDecoder {\n\tarrayType := typ.(reflect2.ArrayType)\n\treturn arrayDecoder{\n\t\tarrayType: arrayType,\n\t\telemDec:   ext.LazyDecoderOf(arrayType.Elem()),\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfSlice(typ reflect2.Type) jsoniter.ValDecoder {\n\tsliceType := typ.(reflect2.SliceType)\n\telemType := sliceType.Elem()\n\tif elemType.Kind() == reflect.Uint8 {\n\t\treturn nil\n\t}\n\treturn sliceDecoder{\n\t\tsliceType: sliceType,\n\t\telemDec:   ext.LazyDecoderOf(elemType),\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "func (ext decodeExtension) DecoderOfMap(typ reflect2.Type) jsoniter.ValDecoder {\n\tmapType := typ.(reflect2.MapType)\n\tkeyType, elemType := mapType.Key(), mapType.Elem()\n\treturn \u0026mapDecoder{\n\t\tmapType:  mapType,\n\t\tkeyType:  keyType,\n\t\telemType: elemType,\n\t\tkeyDec:   ext.LazyDecoderOf(keyType),\n\t\telemDec:  ext.LazyDecoderOf(elemType),\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Array",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Map",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77
      ],
      "cover_details": {
        "line_cover_rate": 0.9047619047619048
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/request.go:NewEvalRequest",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestClientQuery"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadRequest"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/client_test.go",
          "func_name": "TestClientCanceledContext"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseBody"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportBadResponseStatus"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestExpandOrdering"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestEvaluateRequestWithoutBindingsEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/http_test.go",
          "func_name": "TestHTTPTransportRoundTripper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/expand_test.go",
          "func_name": "TestExpandBindings"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/config_test.go",
          "func_name": "TestBuildWithHTTPClient"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin",
          "rel_file_path": "dialect/gremlin/request_test.go",
          "func_name": "TestEvaluateRequestEncode"
        }
      ],
      "name": "NewEvalRequest",
      "signature": "NewEvalRequest (query string, opts ...RequestOption) *Request",
      "ground_truth": "func NewEvalRequest(query string, opts ...RequestOption) *Request {\n\tr := \u0026Request{\n\t\tRequestID: uuid.New().String(),\n\t\tOperation: OpsEval,\n\t\tArguments: map[string]any{\n\t\t\tArgsGremlin:  query,\n\t\t\tArgsLanguage: \"gremlin-groovy\",\n\t\t},\n\t}\n\tfor i := range opts {\n\t\topts[i](r)\n\t}\n\treturn r\n}",
      "function_comment": "// NewEvalRequest returns a new evaluation request request.",
      "function_statement": "// NewEvalRequest returns a new evaluation request request.",
      "start_line": 33,
      "end_line": 46,
      "file_path": "./dialect/gremlin/request.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "RequestOption func(*Request)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "OpsEval = \"eval\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsGremlin = \"gremlin\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/tokens.go",
          "code_snippet": "ArgsLanguage = \"language\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/google/uuid@v1.3.0/uuid.go",
          "code_snippet": "func (uuid UUID) String() string {\n\tvar buf [36]byte\n\tencodeHex(buf[:], uuid)\n\treturn string(buf[:])\n}",
          "ref_module": "uuid"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/google/uuid@v1.3.0/version4.go",
          "code_snippet": "func New() UUID {\n\treturn Must(NewRandom())\n}",
          "ref_module": "uuid"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45
      ],
      "cover_details": {
        "line_cover_rate": 0.9285714285714286
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/util.go:UnmarshalJSON",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeBadType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeMissingField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/util_test.go",
          "func_name": "TestTypeDecodeDuplicateField"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "UnmarshalJSON",
      "signature": "(tv *typeValue) UnmarshalJSON (data []byte) error",
      "ground_truth": "func (tv *typeValue) UnmarshalJSON(data []byte) error {\n\tvar v struct {\n\t\tType  *Type               `json:\"@type\"`\n\t\tValue jsoniter.RawMessage `json:\"@value\"`\n\t}\n\n\tif err := jsoniter.Unmarshal(data, \u0026v); err != nil {\n\t\treturn err\n\t}\n\tif v.Type == nil || v.Value == nil {\n\t\treturn errors.New(\"missing type or value\")\n\t}\n\n\ttv.Type = *v.Type\n\ttv.Value = v.Value\n\treturn nil\n}",
      "function_comment": "// UnmarshalJSON implements json.Unmarshaler interface.",
      "function_statement": "// UnmarshalJSON implements json.Unmarshaler interface.",
      "start_line": 93,
      "end_line": 109,
      "file_path": "./dialect/gremlin/encoding/graphson/util.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeValue struct {\n\t\tType  Type\n\t\tValue jsoniter.RawMessage\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "RawMessage []byte",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/adapter.go",
          "code_snippet": "func Unmarshal(data []byte, v interface{}) error {\n\treturn ConfigDefault.Unmarshal(data, v)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        106,
        107,
        108
      ],
      "cover_details": {
        "line_cover_rate": 0.7647058823529411
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/postgres.go:atTypeC",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "atTypeC",
      "signature": "(d *Postgres) atTypeC (c1 *Column, c2 *schema.Column) error",
      "ground_truth": "func (d *Postgres) atTypeC(c1 *Column, c2 *schema.Column) error {\n\tif c1.SchemaType != nil \u0026\u0026 c1.SchemaType[dialect.Postgres] != \"\" {\n\t\tt, err := postgres.ParseType(strings.ToLower(c1.SchemaType[dialect.Postgres]))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc2.Type.Type = t\n\t\tif s, ok := t.(*postgres.SerialType); c1.foreign != nil \u0026\u0026 ok {\n\t\t\tc2.Type.Type = s.IntegerType()\n\t\t}\n\t\treturn nil\n\t}\n\tvar t schema.Type\n\tswitch c1.Type {\n\tcase field.TypeBool:\n\t\tt = \u0026schema.BoolType{T: postgres.TypeBoolean}\n\tcase field.TypeUint8, field.TypeInt8, field.TypeInt16:\n\t\tt = \u0026schema.IntegerType{T: postgres.TypeSmallInt}\n\tcase field.TypeUint16, field.TypeInt32:\n\t\tt = \u0026schema.IntegerType{T: postgres.TypeInt}\n\tcase field.TypeUint32, field.TypeInt, field.TypeUint, field.TypeInt64, field.TypeUint64:\n\t\tt = \u0026schema.IntegerType{T: postgres.TypeBigInt}\n\tcase field.TypeFloat32:\n\t\tt = \u0026schema.FloatType{T: c1.scanTypeOr(postgres.TypeReal)}\n\tcase field.TypeFloat64:\n\t\tt = \u0026schema.FloatType{T: c1.scanTypeOr(postgres.TypeDouble)}\n\tcase field.TypeBytes:\n\t\tt = \u0026schema.BinaryType{T: postgres.TypeBytea}\n\tcase field.TypeUUID:\n\t\tt = \u0026postgres.UUIDType{T: postgres.TypeUUID}\n\tcase field.TypeJSON:\n\t\tt = \u0026schema.JSONType{T: postgres.TypeJSONB}\n\tcase field.TypeString:\n\t\tt = \u0026schema.StringType{T: postgres.TypeVarChar}\n\t\tif c1.Size \u003e maxCharSize {\n\t\t\tt = \u0026schema.StringType{T: postgres.TypeText}\n\t\t}\n\tcase field.TypeTime:\n\t\tt = \u0026schema.TimeType{T: c1.scanTypeOr(postgres.TypeTimestampWTZ)}\n\tcase field.TypeEnum:\n\t\t// Although atlas supports enum types, we keep backwards compatibility\n\t\t// with previous versions of ent and use varchar (see cType).\n\t\tt = \u0026schema.StringType{T: postgres.TypeVarChar}\n\tcase field.TypeOther:\n\t\tt = \u0026schema.UnsupportedType{T: c1.typ}\n\tdefault:\n\t\tt, err := postgres.ParseType(strings.ToLower(c1.typ))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc2.Type.Type = t\n\t}\n\tc2.Type.Type = t\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 102,
      "end_line": 156,
      "file_path": "./dialect/sql/schema/postgres.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/postgres.go",
          "code_snippet": "Postgres struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "Postgres = \"postgres\"",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeBool",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt16",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint8",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt8",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint16",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUint",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeInt64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeFloat32",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func (c *Column) scanTypeOr(t string) string {\n\tif c.typ != \"\" {\n\t\treturn strings.ToLower(c.typ)\n\t}\n\treturn t\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeFloat64",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeBytes",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeUUID",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeJSON",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeString",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/postgres.go",
          "code_snippet": "maxCharSize = 10 \u003c\u003c 20",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeTime",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeEnum",
          "ref_module": "field"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/schema/field/type.go",
          "code_snippet": "TypeOther",
          "ref_module": "field"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\t\tName    string\n\t\tType    *ColumnType\n\t\tDefault Expr\n\t\tAttrs   []Attr\n\t\tIndexes []*Index\n\t\t// Foreign keys that this column is\n\t\t// part of their child columns.\n\t\tForeignKeys []*ForeignKey\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/convert.go",
          "code_snippet": "func ParseType(typ string) (schema.Type, error) {\n\tvar (\n\t\terr error\n\t\td   *columnDesc\n\t)\n\t// Normalize PostgreSQL array data types from \"CREATE TABLE\" format to\n\t// \"INFORMATION_SCHEMA\" format (i.e. as it is inspected from the database).\n\tif t, ok := arrayType(typ); ok {\n\t\td = \u0026columnDesc{typ: TypeArray, fmtype: t + \"[]\"}\n\t} else if d, err = parseColumn(typ); err != nil {\n\t\treturn nil, err\n\t}\n\tt, err := columnType(d)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// If the type is unknown (to us), we fall back to user-defined but expect\n\t// to improve this in future versions by ensuring this against the database.\n\tif ut, ok := t.(*schema.UnsupportedType); ok {\n\t\tt = \u0026UserDefinedType{T: ut.T}\n\t}\n\treturn t, nil\n}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "ColumnType struct {\n\t\tType Type\n\t\tRaw  string\n\t\tNull bool\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "SerialType struct {\n\t\tschema.Type\n\t\tT         string\n\t\tPrecision int\n\t\t// SequenceName holds the inspected sequence name attached to the column.\n\t\t// It defaults to \u003cTable\u003e_\u003cColumn\u003e_seq when the column is created, but may\n\t\t// be different in case the table or the column was renamed.\n\t\tSequenceName string\n\t}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "func (s *SerialType) IntegerType() *schema.IntegerType {\n\tt := \u0026schema.IntegerType{T: TypeInteger}\n\tswitch s.T {\n\tcase TypeSerial2, TypeSmallSerial:\n\t\tt.T = TypeSmallInt\n\tcase TypeSerial8, TypeBigSerial:\n\t\tt.T = TypeBigInt\n\t}\n\treturn t\n}",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Type interface {\n\t\ttyp()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "BoolType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeBoolean = \"boolean\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "IntegerType struct {\n\t\tT        string\n\t\tUnsigned bool\n\t\tAttrs    []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeSmallInt = \"smallint\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeInt      = \"int\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeBigInt   = \"bigint\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "FloatType struct {\n\t\tT         string\n\t\tUnsigned  bool\n\t\tPrecision int\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeReal   = \"real\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeDouble = \"double precision\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "BinaryType struct {\n\t\tT    string\n\t\tSize *int\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeBytea   = \"bytea\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/inspect_oss.go",
          "code_snippet": "UUIDType = schema.UUIDType",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "UUIDType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeUUID        = \"uuid\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "JSONType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeJSONB       = \"jsonb\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "StringType struct {\n\t\tT     string\n\t\tSize  int\n\t\tAttrs []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeVarChar   = \"varchar\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeText      = \"text\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "TimeType struct {\n\t\tT         string\n\t\tPrecision *int\n\t\tScale     *int\n\t\tAttrs     []Attr\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/postgres/driver_oss.go",
          "code_snippet": "TypeTimestampWTZ  = \"timestamp with time zone\"",
          "ref_module": "postgres"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "UnsupportedType struct {\n\t\tT string\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ToLower(s string) string {\n\tisASCII, hasUpper := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasUpper = hasUpper || ('A' \u003c= c \u0026\u0026 c \u003c= 'Z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasUpper {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'A' \u003c= c \u0026\u0026 c \u003c= 'Z' {\n\t\t\t\tc += 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToLower, s)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        102,
        103,
        114,
        115,
        122,
        123,
        134,
        135,
        136,
        154,
        155
      ],
      "cover_details": {
        "line_cover_rate": 0.2
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:DecoratorOfMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfMap",
      "signature": "(encodeExtension) DecoratorOfMap (enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) DecoratorOfMap(enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\treturn typeEncoder{enc, mapType}\n}",
      "function_comment": "// DecoratorOfMap decorates a value encoder of a map type.",
      "function_statement": "// DecoratorOfMap decorates a value encoder of a map type.",
      "start_line": 25,
      "end_line": 27,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "mapType    Type = \"g:Map\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        25,
        26,
        27
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:ruleset",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdges"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphDuplicateEdgeField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Label"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Table"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_EnumName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_Package"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_TagTypes"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_WithRuntimeMixin"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_DefaultName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_Constant"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_incremental"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestBuilderField"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestValidSchemaName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType_AddIndex"
        }
      ],
      "name": "ruleset",
      "signature": "ruleset () *inflect.Ruleset",
      "ground_truth": "func ruleset() *inflect.Ruleset {\n\trules := inflect.NewDefaultRuleset()\n\t// Add common initialism from golint and more.\n\tfor _, w := range []string{\n\t\t\"ACL\", \"API\", \"ASCII\", \"AWS\", \"CPU\", \"CSS\", \"DNS\", \"EOF\", \"GB\", \"GUID\",\n\t\t\"HCL\", \"HTML\", \"HTTP\", \"HTTPS\", \"ID\", \"IP\", \"JSON\", \"KB\", \"LHS\", \"MAC\",\n\t\t\"MB\", \"QPS\", \"RAM\", \"RHS\", \"RPC\", \"SLA\", \"SMTP\", \"SQL\", \"SSH\", \"SSO\",\n\t\t\"TCP\", \"TLS\", \"TTL\", \"UDP\", \"UI\", \"UID\", \"URI\", \"URL\", \"UTF8\", \"UUID\",\n\t\t\"VM\", \"XML\", \"XMPP\", \"XSRF\", \"XSS\",\n\t} {\n\t\tacronyms[w] = struct{}{}\n\t\trules.AddAcronym(w)\n\t}\n\treturn rules\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 315,
      "end_line": 329,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "acronyms = make(map[string]struct{})",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "Ruleset struct {\n\tuncountables   map[string]bool\n\tplurals        []*Rule\n\tsingulars      []*Rule\n\thumans         []*Rule\n\tacronyms       []*Rule\n\tacronymMatcher *regexp.Regexp\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func NewDefaultRuleset() *Ruleset {\n\trs := NewRuleset()\n\trs.AddPlural(\"s\", \"s\")\n\trs.AddPlural(\"testis\", \"testes\")\n\trs.AddPlural(\"axis\", \"axes\")\n\trs.AddPlural(\"octopus\", \"octopi\")\n\trs.AddPlural(\"virus\", \"viri\")\n\trs.AddPlural(\"octopi\", \"octopi\")\n\trs.AddPlural(\"viri\", \"viri\")\n\trs.AddPlural(\"alias\", \"aliases\")\n\trs.AddPlural(\"status\", \"statuses\")\n\trs.AddPlural(\"bus\", \"buses\")\n\trs.AddPlural(\"buffalo\", \"buffaloes\")\n\trs.AddPlural(\"tomato\", \"tomatoes\")\n\trs.AddPlural(\"tum\", \"ta\")\n\trs.AddPlural(\"ium\", \"ia\")\n\trs.AddPlural(\"ta\", \"ta\")\n\trs.AddPlural(\"ia\", \"ia\")\n\trs.AddPlural(\"sis\", \"ses\")\n\trs.AddPlural(\"lf\", \"lves\")\n\trs.AddPlural(\"rf\", \"rves\")\n\trs.AddPlural(\"afe\", \"aves\")\n\trs.AddPlural(\"bfe\", \"bves\")\n\trs.AddPlural(\"cfe\", \"cves\")\n\trs.AddPlural(\"dfe\", \"dves\")\n\trs.AddPlural(\"efe\", \"eves\")\n\trs.AddPlural(\"gfe\", \"gves\")\n\trs.AddPlural(\"hfe\", \"hves\")\n\trs.AddPlural(\"ife\", \"ives\")\n\trs.AddPlural(\"jfe\", \"jves\")\n\trs.AddPlural(\"kfe\", \"kves\")\n\trs.AddPlural(\"lfe\", \"lves\")\n\trs.AddPlural(\"mfe\", \"mves\")\n\trs.AddPlural(\"nfe\", \"nves\")\n\trs.AddPlural(\"ofe\", \"oves\")\n\trs.AddPlural(\"pfe\", \"pves\")\n\trs.AddPlural(\"qfe\", \"qves\")\n\trs.AddPlural(\"rfe\", \"rves\")\n\trs.AddPlural(\"sfe\", \"sves\")\n\trs.AddPlural(\"tfe\", \"tves\")\n\trs.AddPlural(\"ufe\", \"uves\")\n\trs.AddPlural(\"vfe\", \"vves\")\n\trs.AddPlural(\"wfe\", \"wves\")\n\trs.AddPlural(\"xfe\", \"xves\")\n\trs.AddPlural(\"yfe\", \"yves\")\n\trs.AddPlural(\"zfe\", \"zves\")\n\trs.AddPlural(\"hive\", \"hives\")\n\trs.AddPlural(\"quy\", \"quies\")\n\trs.AddPlural(\"by\", \"bies\")\n\trs.AddPlural(\"cy\", \"cies\")\n\trs.AddPlural(\"dy\", \"dies\")\n\trs.AddPlural(\"fy\", \"fies\")\n\trs.AddPlural(\"gy\", \"gies\")\n\trs.AddPlural(\"hy\", \"hies\")\n\trs.AddPlural(\"jy\", \"jies\")\n\trs.AddPlural(\"ky\", \"kies\")\n\trs.AddPlural(\"ly\", \"lies\")\n\trs.AddPlural(\"my\", \"mies\")\n\trs.AddPlural(\"ny\", \"nies\")\n\trs.AddPlural(\"py\", \"pies\")\n\trs.AddPlural(\"qy\", \"qies\")\n\trs.AddPlural(\"ry\", \"ries\")\n\trs.AddPlural(\"sy\", \"sies\")\n\trs.AddPlural(\"ty\", \"ties\")\n\trs.AddPlural(\"vy\", \"vies\")\n\trs.AddPlural(\"wy\", \"wies\")\n\trs.AddPlural(\"xy\", \"xies\")\n\trs.AddPlural(\"zy\", \"zies\")\n\trs.AddPlural(\"x\", \"xes\")\n\trs.AddPlural(\"ch\", \"ches\")\n\trs.AddPlural(\"ss\", \"sses\")\n\trs.AddPlural(\"sh\", \"shes\")\n\trs.AddPlural(\"matrix\", \"matrices\")\n\trs.AddPlural(\"vertix\", \"vertices\")\n\trs.AddPlural(\"indix\", \"indices\")\n\trs.AddPlural(\"matrex\", \"matrices\")\n\trs.AddPlural(\"vertex\", \"vertices\")\n\trs.AddPlural(\"index\", \"indices\")\n\trs.AddPlural(\"mouse\", \"mice\")\n\trs.AddPlural(\"louse\", \"lice\")\n\trs.AddPlural(\"mice\", \"mice\")\n\trs.AddPlural(\"lice\", \"lice\")\n\trs.AddPluralExact(\"ox\", \"oxen\", true)\n\trs.AddPluralExact(\"oxen\", \"oxen\", true)\n\trs.AddPluralExact(\"quiz\", \"quizzes\", true)\n\trs.AddSingular(\"s\", \"\")\n\trs.AddSingular(\"news\", \"news\")\n\trs.AddSingular(\"ta\", \"tum\")\n\trs.AddSingular(\"ia\", \"ium\")\n\trs.AddSingular(\"analyses\", \"analysis\")\n\trs.AddSingular(\"bases\", \"basis\")\n\trs.AddSingular(\"diagnoses\", \"diagnosis\")\n\trs.AddSingular(\"parentheses\", \"parenthesis\")\n\trs.AddSingular(\"prognoses\", \"prognosis\")\n\trs.AddSingular(\"synopses\", \"synopsis\")\n\trs.AddSingular(\"theses\", \"thesis\")\n\trs.AddSingular(\"analyses\", \"analysis\")\n\trs.AddSingular(\"aves\", \"afe\")\n\trs.AddSingular(\"bves\", \"bfe\")\n\trs.AddSingular(\"cves\", \"cfe\")\n\trs.AddSingular(\"dves\", \"dfe\")\n\trs.AddSingular(\"eves\", \"efe\")\n\trs.AddSingular(\"gves\", \"gfe\")\n\trs.AddSingular(\"hves\", \"hfe\")\n\trs.AddSingular(\"ives\", \"ife\")\n\trs.AddSingular(\"jves\", \"jfe\")\n\trs.AddSingular(\"kves\", \"kfe\")\n\trs.AddSingular(\"lves\", \"lfe\")\n\trs.AddSingular(\"mves\", \"mfe\")\n\trs.AddSingular(\"nves\", \"nfe\")\n\trs.AddSingular(\"oves\", \"ofe\")\n\trs.AddSingular(\"pves\", \"pfe\")\n\trs.AddSingular(\"qves\", \"qfe\")\n\trs.AddSingular(\"rves\", \"rfe\")\n\trs.AddSingular(\"sves\", \"sfe\")\n\trs.AddSingular(\"tves\", \"tfe\")\n\trs.AddSingular(\"uves\", \"ufe\")\n\trs.AddSingular(\"vves\", \"vfe\")\n\trs.AddSingular(\"wves\", \"wfe\")\n\trs.AddSingular(\"xves\", \"xfe\")\n\trs.AddSingular(\"yves\", \"yfe\")\n\trs.AddSingular(\"zves\", \"zfe\")\n\trs.AddSingular(\"hives\", \"hive\")\n\trs.AddSingular(\"tives\", \"tive\")\n\trs.AddSingular(\"lves\", \"lf\")\n\trs.AddSingular(\"rves\", \"rf\")\n\trs.AddSingular(\"quies\", \"quy\")\n\trs.AddSingular(\"bies\", \"by\")\n\trs.AddSingular(\"cies\", \"cy\")\n\trs.AddSingular(\"dies\", \"dy\")\n\trs.AddSingular(\"fies\", \"fy\")\n\trs.AddSingular(\"gies\", \"gy\")\n\trs.AddSingular(\"hies\", \"hy\")\n\trs.AddSingular(\"jies\", \"jy\")\n\trs.AddSingular(\"kies\", \"ky\")\n\trs.AddSingular(\"lies\", \"ly\")\n\trs.AddSingular(\"mies\", \"my\")\n\trs.AddSingular(\"nies\", \"ny\")\n\trs.AddSingular(\"pies\", \"py\")\n\trs.AddSingular(\"qies\", \"qy\")\n\trs.AddSingular(\"ries\", \"ry\")\n\trs.AddSingular(\"sies\", \"sy\")\n\trs.AddSingular(\"ties\", \"ty\")\n\trs.AddSingular(\"vies\", \"vy\")\n\trs.AddSingular(\"wies\", \"wy\")\n\trs.AddSingular(\"xies\", \"xy\")\n\trs.AddSingular(\"zies\", \"zy\")\n\trs.AddSingular(\"series\", \"series\")\n\trs.AddSingular(\"movies\", \"movie\")\n\trs.AddSingular(\"xes\", \"x\")\n\trs.AddSingular(\"ches\", \"ch\")\n\trs.AddSingular(\"sses\", \"ss\")\n\trs.AddSingular(\"shes\", \"sh\")\n\trs.AddSingular(\"mice\", \"mouse\")\n\trs.AddSingular(\"lice\", \"louse\")\n\trs.AddSingular(\"buses\", \"bus\")\n\trs.AddSingular(\"oes\", \"o\")\n\trs.AddSingular(\"shoes\", \"shoe\")\n\trs.AddSingular(\"crises\", \"crisis\")\n\trs.AddSingular(\"axes\", \"axis\")\n\trs.AddSingular(\"testes\", \"testis\")\n\trs.AddSingular(\"octopi\", \"octopus\")\n\trs.AddSingular(\"viri\", \"virus\")\n\trs.AddSingular(\"statuses\", \"status\")\n\trs.AddSingular(\"aliases\", \"alias\")\n\trs.AddSingularExact(\"oxen\", \"ox\", true)\n\trs.AddSingular(\"vertices\", \"vertex\")\n\trs.AddSingular(\"indices\", \"index\")\n\trs.AddSingular(\"matrices\", \"matrix\")\n\trs.AddSingularExact(\"quizzes\", \"quiz\", true)\n\trs.AddSingular(\"databases\", \"database\")\n\trs.AddIrregular(\"person\", \"people\")\n\trs.AddIrregular(\"man\", \"men\")\n\trs.AddIrregular(\"child\", \"children\")\n\trs.AddIrregular(\"sex\", \"sexes\")\n\trs.AddIrregular(\"move\", \"moves\")\n\trs.AddIrregular(\"zombie\", \"zombies\")\n\trs.AddUncountable(\"equipment\")\n\trs.AddUncountable(\"information\")\n\trs.AddUncountable(\"rice\")\n\trs.AddUncountable(\"money\")\n\trs.AddUncountable(\"species\")\n\trs.AddUncountable(\"series\")\n\trs.AddUncountable(\"fish\")\n\trs.AddUncountable(\"sheep\")\n\trs.AddUncountable(\"jeans\")\n\trs.AddUncountable(\"police\")\n\treturn rs\n}",
          "ref_module": "inflect"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) AddAcronym(word string) {\n\tr := new(Rule)\n\tr.suffix = word\n\tr.replacement = rs.Titleize(strings.ToLower(word))\n\trs.acronyms = append(rs.acronyms, r)\n}",
          "ref_module": "inflect"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328
      ],
      "cover_details": {
        "line_cover_rate": 0.9333333333333333
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:DecoratorOfMarshaler",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfMarshaler",
      "signature": "(ext encodeExtension) DecoratorOfMarshaler (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (ext encodeExtension) DecoratorOfMarshaler(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tif typ == marshalerType {\n\t\tenc := marshalerEncoder{enc, typ}\n\t\treturn directMarshalerEncoder{enc}\n\t}\n\tif typ.Implements(marshalerType) {\n\t\treturn marshalerEncoder{enc, typ}\n\t}\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(marshalerType) {\n\t\tptrEnc := ext.LazyEncoderOf(ptrType)\n\t\tenc := marshalerEncoder{ptrEnc, ptrType}\n\t\treturn referenceEncoder{enc}\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoratorOfMarshaler decorates a value encoder of a Marshaler interface.",
      "function_statement": "// DecoratorOfMarshaler decorates a value encoder of a Marshaler interface.",
      "start_line": 17,
      "end_line": 32,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerType   = reflect2.TypeOfPtr((*Marshaler)(nil)).Elem()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "marshalerEncoder struct {\n\tjsoniter.ValEncoder\n\treflect2.Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "directMarshalerEncoder struct {\n\tmarshalerEncoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (encodeExtension) LazyEncoderOf(typ reflect2.Type) jsoniter.ValEncoder {\n\treturn \u0026lazyEncoder{resolve: func() jsoniter.ValEncoder {\n\t\treturn config.EncoderOf(typ)\n\t}}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "referenceEncoder struct {\n\tjsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31
      ],
      "cover_details": {
        "line_cover_rate": 0.9375
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/marshaler.go:DecoderOfUnmarshaler",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerDecode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestUnmarshalBadInput"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoderOfUnmarshaler",
      "signature": "(decodeExtension) DecoderOfUnmarshaler (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) DecoderOfUnmarshaler(typ reflect2.Type) jsoniter.ValDecoder {\n\tptrType := reflect2.PtrTo(typ)\n\tif ptrType.Implements(unmarshalerType) {\n\t\treturn referenceDecoder{\n\t\t\tunmarshalerDecoder{ptrType},\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// DecoderOfUnmarshaler returns a value decoder of an Unmarshaler interface.",
      "function_statement": "// DecoderOfUnmarshaler returns a value decoder of an Unmarshaler interface.",
      "start_line": 35,
      "end_line": 43,
      "file_path": "./dialect/gremlin/encoding/graphson/marshaler.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "unmarshalerType = reflect2.TypeOfPtr((*Unmarshaler)(nil)).Elem()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "referenceDecoder struct {\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/marshaler.go",
          "code_snippet": "unmarshalerDecoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func PtrTo(typ Type) Type {\n\treturn Type2(reflect.PtrTo(typ.Type1()))\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42
      ],
      "cover_details": {
        "line_cover_rate": 0.8888888888888888
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/time.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        }
      ],
      "name": "Decode",
      "signature": "(timeCodec) Decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (timeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tns := iter.ReadInt64() * time.Millisecond.Nanoseconds()\n\t*((*time.Time)(ptr)) = time.Unix(0, ns)\n}",
      "function_comment": "// Copyright 2019-present Facebook Inc. All rights reserved.\n// This source code is licensed under the Apache 2.0 license found",
      "function_statement": "// Copyright 2019-present Facebook Inc. All rights reserved.\n// This source code is licensed under the Apache 2.0 license found",
      "start_line": 31,
      "end_line": 34,
      "file_path": "./dialect/gremlin/encoding/graphson/time.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/time.go",
          "code_snippet": "timeCodec struct{}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_int.go",
          "code_snippet": "func (iter *Iterator) ReadInt64() (ret int64) {\n\tc := iter.nextToken()\n\tif c == '-' {\n\t\tval := iter.readUint64(iter.readByte())\n\t\tif val \u003e math.MaxInt64+1 {\n\t\t\titer.ReportError(\"ReadInt64\", \"overflow: \"+strconv.FormatUint(uint64(val), 10))\n\t\t\treturn\n\t\t}\n\t\treturn -int64(val)\n\t}\n\tval := iter.readUint64(c)\n\tif val \u003e math.MaxInt64 {\n\t\titer.ReportError(\"ReadInt64\", \"overflow: \"+strconv.FormatUint(uint64(val), 10))\n\t\treturn\n\t}\n\treturn int64(val)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func (d Duration) Nanoseconds() int64 { return int64(d) }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Millisecond          = 1000 * Microsecond",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==\u0026utcLoc.\n\tloc *Location\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/time/time.go",
          "code_snippet": "func Unix(sec int64, nsec int64) Time {\n\tif nsec \u003c 0 || nsec \u003e= 1e9 {\n\t\tn := nsec / 1e9\n\t\tsec += n\n\t\tnsec -= n * 1e9\n\t\tif nsec \u003c 0 {\n\t\t\tnsec += 1e9\n\t\t\tsec--\n\t\t}\n\t}\n\treturn unixTime(sec, int32(nsec))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        31,
        32,
        33,
        34
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/error.go:EncoderOfError",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        }
      ],
      "name": "EncoderOfError",
      "signature": "(encodeExtension) EncoderOfError (format string, args ...any) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) EncoderOfError(format string, args ...any) jsoniter.ValEncoder {\n\treturn decoratorOfError(format, args...)\n}",
      "function_comment": "// EncoderOfError returns a value encoder which always fails to encode.",
      "function_statement": "// EncoderOfError returns a value encoder which always fails to encode.",
      "start_line": 15,
      "end_line": 17,
      "file_path": "./dialect/gremlin/encoding/graphson/error.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "func decoratorOfError(format string, args ...any) errorCodec {\n\terr := fmt.Errorf(format, args...)\n\treturn errorCodec{err}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        15,
        16,
        17
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectSlice",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "reflectSlice",
      "signature": "(efaceDecoder) reflectSlice (data []byte) (reflect2.Type, error)",
      "ground_truth": "func (efaceDecoder) reflectSlice(data []byte) (reflect2.Type, error) {\n\tvar elem any\n\tif err := Unmarshal(data, \u0026[...]*any{\u0026elem}); err != nil {\n\t\treturn nil, fmt.Errorf(\"cannot read first list element: %w\", err)\n\t}\n\n\tif elem == nil {\n\t\treturn reflect2.TypeOf([]any{}), nil\n\t}\n\n\tsliceType := reflect.SliceOf(reflect.TypeOf(elem))\n\treturn reflect2.Type2(sliceType), nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 122,
      "end_line": 134,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "func Unmarshal(data []byte, v any) error {\n\treturn config.Unmarshal(data, v)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func Type2(type1 reflect.Type) Type {\n\tif type1 == nil {\n\t\treturn nil\n\t}\n\treturn ConfigUnsafe.Type2(type1)\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func SliceOf(t Type) Type {\n\ttyp := t.common()\n\n\t// Look in cache.\n\tckey := cacheKey{Slice, typ, nil, 0}\n\tif slice, ok := lookupCache.Load(ckey); ok {\n\t\treturn slice.(Type)\n\t}\n\n\t// Look in known types.\n\ts := \"[]\" + stringFor(typ)\n\tfor _, tt := range typesByString(s) {\n\t\tslice := (*sliceType)(unsafe.Pointer(tt))\n\t\tif slice.Elem == typ {\n\t\t\tti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))\n\t\t\treturn ti.(Type)\n\t\t}\n\t}\n\n\t// Make a slice type.\n\tvar islice any = ([]unsafe.Pointer)(nil)\n\tprototype := *(**sliceType)(unsafe.Pointer(\u0026islice))\n\tslice := *prototype\n\tslice.TFlag = 0\n\tslice.Str = resolveReflectName(newName(s, \"\", false, false))\n\tslice.Hash = fnv1(typ.Hash, '[')\n\tslice.Elem = typ\n\tslice.PtrToThis = 0\n\n\tti, _ := lookupCache.LoadOrStore(ckey, toRType(\u0026slice.Type))\n\treturn ti.(Type)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "func TypeOf(i any) Type {\n\treturn toType(abi.TypeOf(i))\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        122,
        123,
        124,
        125,
        126,
        128,
        129,
        130,
        132,
        133
      ],
      "cover_details": {
        "line_cover_rate": 0.7692307692307693
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:bindingToAttr",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestRequestAttributes"
        }
      ],
      "name": "bindingToAttr",
      "signature": "bindingToAttr (key string, val any) trace.Attribute",
      "ground_truth": "func bindingToAttr(key string, val any) trace.Attribute {\n\tswitch v := val.(type) {\n\tcase nil:\n\t\treturn trace.StringAttribute(key, \"\")\n\tcase int64:\n\t\treturn trace.Int64Attribute(key, v)\n\tcase float64:\n\t\treturn trace.Float64Attribute(key, v)\n\tcase string:\n\t\treturn trace.StringAttribute(key, v)\n\tcase bool:\n\t\treturn trace.BoolAttribute(key, v)\n\tdefault:\n\t\ts := fmt.Sprintf(\"%v\", v)\n\t\tif len(s) \u003e 256 {\n\t\t\ts = s[:256]\n\t\t}\n\t\treturn trace.StringAttribute(key, s)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 77,
      "end_line": 96,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Attribute struct {\n\tkey   string\n\tvalue interface{}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func StringAttribute(key string, value string) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Int64Attribute(key string, value int64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func Float64Attribute(key string, value float64) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "func BoolAttribute(key string, value bool) Attribute {\n\treturn Attribute{key: key, value: value}\n}",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/graph/valuemap.go:decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/graph",
          "rel_file_path": "dialect/gremlin/graph/valuemap_test.go",
          "func_name": "TestValueMapDecodeOne"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/graph",
          "rel_file_path": "dialect/gremlin/graph/valuemap_test.go",
          "func_name": "TestValueMapDecodeMany"
        }
      ],
      "name": "decode",
      "signature": "(m ValueMap) decode (v any) error",
      "ground_truth": "func (m ValueMap) decode(v any) error {\n\tcfg := mapstructure.DecoderConfig{\n\t\tDecodeHook: func(f, t reflect.Kind, data any) (any, error) {\n\t\t\tif f == reflect.Slice \u0026\u0026 t != reflect.Slice {\n\t\t\t\trv := reflect.ValueOf(data)\n\t\t\t\tif rv.Len() == 1 {\n\t\t\t\t\tdata = rv.Index(0).Interface()\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data, nil\n\t\t},\n\t\tResult:  v,\n\t\tTagName: \"json\",\n\t}\n\n\tdec, err := mapstructure.NewDecoder(\u0026cfg)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating structure decoder: %w\", err)\n\t}\n\tif err := dec.Decode(m); err != nil {\n\t\treturn fmt.Errorf(\"decoding value map: %w\", err)\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 34,
      "end_line": 57,
      "file_path": "./dialect/gremlin/graph/valuemap.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/graph/valuemap.go",
          "code_snippet": "ValueMap []map[string]any",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/mitchellh/mapstructure@v1.5.0/mapstructure.go",
          "code_snippet": "DecoderConfig struct {\n\t// DecodeHook, if set, will be called before any decoding and any\n\t// type conversion (if WeaklyTypedInput is on). This lets you modify\n\t// the values before they're set down onto the resulting struct. The\n\t// DecodeHook is called for every map and value in the input. This means\n\t// that if a struct has embedded fields with squash tags the decode hook\n\t// is called only once with all of the input data, not once for each\n\t// embedded struct.\n\t//\n\t// If an error is returned, the entire decode will fail with that error.\n\tDecodeHook DecodeHookFunc\n\n\t// If ErrorUnused is true, then it is an error for there to exist\n\t// keys in the original map that were unused in the decoding process\n\t// (extra keys).\n\tErrorUnused bool\n\n\t// If ErrorUnset is true, then it is an error for there to exist\n\t// fields in the result that were not set in the decoding process\n\t// (extra fields). This only applies to decoding to a struct. This\n\t// will affect all nested structs as well.\n\tErrorUnset bool\n\n\t// ZeroFields, if set to true, will zero fields before writing them.\n\t// For example, a map will be emptied before decoded values are put in\n\t// it. If this is false, a map will be merged.\n\tZeroFields bool\n\n\t// If WeaklyTypedInput is true, the decoder will make the following\n\t// \"weak\" conversions:\n\t//\n\t//   - bools to string (true = \"1\", false = \"0\")\n\t//   - numbers to string (base 10)\n\t//   - bools to int/uint (true = 1, false = 0)\n\t//   - strings to int/uint (base implied by prefix)\n\t//   - int to bool (true if value != 0)\n\t//   - string to bool (accepts: 1, t, T, TRUE, true, True, 0, f, F,\n\t//     FALSE, false, False. Anything else is an error)\n\t//   - empty array = empty map and vice versa\n\t//   - negative numbers to overflowed uint values (base 10)\n\t//   - slice of maps to a merged map\n\t//   - single values are converted to slices if required. Each\n\t//     element is weakly decoded. For example: \"4\" can become []int{4}\n\t//     if the target type is an int slice.\n\t//\n\tWeaklyTypedInput bool\n\n\t// Squash will squash embedded structs.  A squash tag may also be\n\t// added to an individual struct field using a tag.  For example:\n\t//\n\t//  type Parent struct {\n\t//      Child `mapstructure:\",squash\"`\n\t//  }\n\tSquash bool\n\n\t// Metadata is the struct that will contain extra metadata about\n\t// the decoding. If this is nil, then no metadata will be tracked.\n\tMetadata *Metadata\n\n\t// Result is a pointer to the struct that will contain the decoded\n\t// value.\n\tResult interface{}\n\n\t// The tag name that mapstructure reads for field names. This\n\t// defaults to \"mapstructure\"\n\tTagName string\n\n\t// IgnoreUntaggedFields ignores all struct fields without explicit\n\t// TagName, comparable to `mapstructure:\"-\"` as default behaviour.\n\tIgnoreUntaggedFields bool\n\n\t// MatchName is the function used to match the map key to the struct\n\t// field name or tag. Defaults to `strings.EqualFold`. This can be used\n\t// to implement case-sensitive tag values, support snake casing, etc.\n\tMatchName func(mapKey, fieldName string) bool\n}",
          "ref_module": "mapstructure"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/mitchellh/mapstructure@v1.5.0/mapstructure.go",
          "code_snippet": "func NewDecoder(config *DecoderConfig) (*Decoder, error) {\n\tval := reflect.ValueOf(config.Result)\n\tif val.Kind() != reflect.Ptr {\n\t\treturn nil, errors.New(\"result must be a pointer\")\n\t}\n\n\tval = val.Elem()\n\tif !val.CanAddr() {\n\t\treturn nil, errors.New(\"result must be addressable (a pointer)\")\n\t}\n\n\tif config.Metadata != nil {\n\t\tif config.Metadata.Keys == nil {\n\t\t\tconfig.Metadata.Keys = make([]string, 0)\n\t\t}\n\n\t\tif config.Metadata.Unused == nil {\n\t\t\tconfig.Metadata.Unused = make([]string, 0)\n\t\t}\n\n\t\tif config.Metadata.Unset == nil {\n\t\t\tconfig.Metadata.Unset = make([]string, 0)\n\t\t}\n\t}\n\n\tif config.TagName == \"\" {\n\t\tconfig.TagName = \"mapstructure\"\n\t}\n\n\tif config.MatchName == nil {\n\t\tconfig.MatchName = strings.EqualFold\n\t}\n\n\tresult := \u0026Decoder{\n\t\tconfig: config,\n\t}\n\n\treturn result, nil\n}",
          "ref_module": "mapstructure"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/mitchellh/mapstructure@v1.5.0/mapstructure.go",
          "code_snippet": "func (d *Decoder) Decode(input interface{}) error {\n\treturn d.decode(\"\", input, reflect.ValueOf(d.config.Result).Elem())\n}",
          "ref_module": "mapstructure"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Kind uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Slice",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func ValueOf(i any) Value {\n\tif i == nil {\n\t\treturn Value{}\n\t}\n\treturn unpackEface(i)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Len() int {\n\t// lenNonSlice is split out to keep Len inlineable for slice kinds.\n\tif v.kind() == Slice {\n\t\treturn (*unsafeheader.Slice)(v.ptr).Len\n\t}\n\treturn v.lenNonSlice()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Interface() (i any) {\n\treturn valueInterface(v, true)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/value.go",
          "code_snippet": "func (v Value) Index(i int) Value {\n\tswitch v.kind() {\n\tcase Array:\n\t\ttt := (*arrayType)(unsafe.Pointer(v.typ()))\n\t\tif uint(i) \u003e= uint(tt.Len) {\n\t\t\tpanic(\"reflect: array index out of range\")\n\t\t}\n\t\ttyp := tt.Elem\n\t\toffset := uintptr(i) * typ.Size()\n\n\t\t// Either flagIndir is set and v.ptr points at array,\n\t\t// or flagIndir is not set and v.ptr is the actual array data.\n\t\t// In the former case, we want v.ptr + offset.\n\t\t// In the latter case, we must be doing Index(0), so offset = 0,\n\t\t// so v.ptr + offset is still the correct address.\n\t\tval := add(v.ptr, offset, \"same as \u0026v[i], i \u003c tt.len\")\n\t\tfl := v.flag\u0026(flagIndir|flagAddr) | v.flag.ro() | flag(typ.Kind()) // bits same as overall array\n\t\treturn Value{typ, val, fl}\n\n\tcase Slice:\n\t\t// Element flag same as Elem of Pointer.\n\t\t// Addressable, indirect, possibly read-only.\n\t\ts := (*unsafeheader.Slice)(v.ptr)\n\t\tif uint(i) \u003e= uint(s.Len) {\n\t\t\tpanic(\"reflect: slice index out of range\")\n\t\t}\n\t\ttt := (*sliceType)(unsafe.Pointer(v.typ()))\n\t\ttyp := tt.Elem\n\t\tval := arrayAt(s.Data, i, typ.Size(), \"i \u003c s.Len\")\n\t\tfl := flagAddr | flagIndir | v.flag.ro() | flag(typ.Kind())\n\t\treturn Value{typ, val, fl}\n\n\tcase String:\n\t\ts := (*unsafeheader.String)(v.ptr)\n\t\tif uint(i) \u003e= uint(s.Len) {\n\t\t\tpanic(\"reflect: string index out of range\")\n\t\t}\n\t\tp := arrayAt(s.Data, i, 1, \"i \u003c s.Len\")\n\t\tfl := v.flag.ro() | flag(Uint8) | flagIndir\n\t\treturn Value{uint8Type, p, fl}\n\t}\n\tpanic(\u0026ValueError{\"reflect.Value.Index\", v.kind()})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        49,
        50,
        53,
        56
      ],
      "cover_details": {
        "line_cover_rate": 0.5416666666666666
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:DecoratorOfNative",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/encode_test.go",
          "func_name": "TestEncodeUnsupportedType"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeMismatch"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeTypeDefinition"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestDecodeNaNInfinity"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestDecodeTyper"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoratorOfNative",
      "signature": "(encodeExtension) DecoratorOfNative (typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder",
      "ground_truth": "func (encodeExtension) DecoratorOfNative(typ reflect2.Type, enc jsoniter.ValEncoder) jsoniter.ValEncoder {\n\tswitch typ.Kind() {\n\tcase reflect.Bool, reflect.String:\n\t\treturn enc\n\tcase reflect.Int64, reflect.Int, reflect.Uint32:\n\t\treturn typeEncoder{enc, int64Type}\n\tcase reflect.Int32, reflect.Int8, reflect.Uint16:\n\t\treturn typeEncoder{enc, int32Type}\n\tcase reflect.Int16:\n\t\treturn typeEncoder{enc, int16Type}\n\tcase reflect.Uint64, reflect.Uint:\n\t\treturn typeEncoder{enc, bigIntegerType}\n\tcase reflect.Uint8:\n\t\treturn typeEncoder{enc, byteType}\n\tcase reflect.Float32:\n\t\treturn typeEncoder{enc, floatType}\n\tcase reflect.Float64:\n\t\treturn typeEncoder{enc, doubleType}\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "// DecoratorOfNative decorates a value encoder of a native type.",
      "function_statement": "// DecoratorOfNative decorates a value encoder of a native type.",
      "start_line": 29,
      "end_line": 50,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "encodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeEncoder struct {\n\tjsoniter.ValEncoder\n\tType Type\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int64Type  Type = \"g:Int64\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int32Type  Type = \"g:Int32\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int16Type      Type = \"gx:Int16\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "bigIntegerType Type = \"gx:BigInteger\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteType       Type = \"gx:Byte\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "floatType  Type = \"g:Float\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "doubleType Type = \"g:Double\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "String",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/reflect/type.go",
          "code_snippet": "Float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        47,
        48
      ],
      "cover_details": {
        "line_cover_rate": 0.45454545454545453
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:reflectType",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "reflectType",
      "signature": "(efaceDecoder) reflectType (typ Type) reflect2.Type",
      "ground_truth": "func (efaceDecoder) reflectType(typ Type) reflect2.Type {\n\tswitch typ {\n\tcase doubleType:\n\t\treturn reflect2.TypeOf(float64(0))\n\tcase floatType:\n\t\treturn reflect2.TypeOf(float32(0))\n\tcase byteType:\n\t\treturn reflect2.TypeOf(uint8(0))\n\tcase int16Type:\n\t\treturn reflect2.TypeOf(int16(0))\n\tcase int32Type:\n\t\treturn reflect2.TypeOf(int32(0))\n\tcase int64Type, bigIntegerType:\n\t\treturn reflect2.TypeOf(int64(0))\n\tcase byteBufferType:\n\t\treturn reflect2.TypeOf([]byte{})\n\tdefault:\n\t\treturn nil\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 101,
      "end_line": 120,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "Type string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "doubleType Type = \"g:Double\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "floatType  Type = \"g:Float\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteType       Type = \"gx:Byte\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int16Type      Type = \"gx:Int16\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int32Type  Type = \"g:Int32\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "bigIntegerType Type = \"gx:BigInteger\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "int64Type  Type = \"g:Int64\"",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "byteBufferType Type = \"gx:ByteBuffer\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "func TypeOf(obj interface{}) Type {\n\treturn ConfigUnsafe.TypeOf(obj)\n}",
          "ref_module": "reflect2"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float32 float32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "uint8 uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int16 int16",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int64 int64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "byte = uint8",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118
      ],
      "cover_details": {
        "line_cover_rate": 0.9
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:TraceStatus",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceStatus"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "TraceStatus",
      "signature": "TraceStatus (status int) trace.Status",
      "ground_truth": "func TraceStatus(status int) trace.Status {\n\tvar code int32\n\tswitch status {\n\tcase gremlin.StatusSuccess,\n\t\tgremlin.StatusNoContent,\n\t\tgremlin.StatusPartialContent:\n\t\tcode = trace.StatusCodeOK\n\tcase gremlin.StatusUnauthorized:\n\t\tcode = trace.StatusCodePermissionDenied\n\tcase gremlin.StatusAuthenticate:\n\t\tcode = trace.StatusCodeUnauthenticated\n\tcase gremlin.StatusMalformedRequest,\n\t\tgremlin.StatusInvalidRequestArguments,\n\t\tgremlin.StatusScriptEvaluationError:\n\t\tcode = trace.StatusCodeInvalidArgument\n\tcase gremlin.StatusServerError,\n\t\tgremlin.StatusServerSerializationError:\n\t\tcode = trace.StatusCodeInternal\n\tcase gremlin.StatusServerTimeout:\n\t\tcode = trace.StatusCodeDeadlineExceeded\n\tdefault:\n\t\tcode = trace.StatusCodeUnknown\n\t}\n\treturn trace.Status{Code: code, Message: gremlin.StatusText(status)}\n}",
      "function_comment": "// TraceStatus is a utility to convert the gremlin status code to a trace.Status.",
      "function_statement": "// TraceStatus is a utility to convert the gremlin status code to a trace.Status.",
      "start_line": 109,
      "end_line": 133,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusPartialContent = 206",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusSuccess = 200",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusNoContent = 204",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusUnauthorized = 401",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusAuthenticate = 407",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusScriptEvaluationError = 597",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusMalformedRequest = 498",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusInvalidRequestArguments = 499",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusServerSerializationError = 599",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusServerError = 500",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "StatusServerTimeout = 598",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/status.go",
          "code_snippet": "func StatusText(code int) string {\n\treturn statusText[code]\n}",
          "ref_module": "gremlin"
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Status struct {\n\t// Code is a status code.  Zero indicates success.\n\t//\n\t// If Code will be propagated to Google APIs, it ideally should be a value from\n\t// https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto .\n\tCode    int32\n\tMessage string\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeOK                 = 0",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodePermissionDenied   = 7",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeUnauthenticated    = 16",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeInvalidArgument    = 3",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeInternal           = 13",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeDeadlineExceeded   = 4",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeUnknown            = 2",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int32 int32",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        109,
        110,
        111,
        114,
        115,
        116,
        117,
        118,
        119,
        122,
        123,
        125,
        126,
        127,
        128,
        129,
        130,
        132
      ],
      "cover_details": {
        "line_cover_rate": 0.72
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/mysql.go:atTable",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        }
      ],
      "name": "atTable",
      "signature": "(d *MySQL) atTable (t1 *Table, t2 *schema.Table)",
      "ground_truth": "func (d *MySQL) atTable(t1 *Table, t2 *schema.Table) {\n\tt2.SetCharset(\"utf8mb4\").SetCollation(\"utf8mb4_bin\")\n\tif t1.Annotation == nil {\n\t\treturn\n\t}\n\tif charset := t1.Annotation.Charset; charset != \"\" {\n\t\tt2.SetCharset(charset)\n\t}\n\tif collate := t1.Annotation.Collation; collate != \"\" {\n\t\tt2.SetCollation(collate)\n\t}\n\tif opts := t1.Annotation.Options; opts != \"\" {\n\t\tt2.AddAttrs(\u0026mysql.CreateOptions{\n\t\t\tV: opts,\n\t\t})\n\t}\n\t// Check if the connected database supports the CHECK clause.\n\t// For MySQL, is \u003e= \"8.0.16\" and for MariaDB it is \"10.2.1\".\n\tv1, v2 := d.version, \"8.0.16\"\n\tif v, ok := d.mariadb(); ok {\n\t\tv1, v2 = v, \"10.2.1\"\n\t}\n\tif compareVersions(v1, v2) \u003e= 0 {\n\t\tsetAtChecks(t1, t2)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 80,
      "end_line": 105,
      "file_path": "./dialect/sql/schema/mysql.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "MySQL struct {\n\tdialect.Driver\n\tschema  string\n\tversion string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/entsql/annotation.go",
          "code_snippet": "Annotation struct {\n\t// The Schema option allows setting the schema which the table belongs to.\n\t// Note, this option is no-op for Ent default migration engine. However, schema\n\t// extensions (like Atlas) can accept this option and implement it accordingly.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSchema: \"public\",\n\t//\t}\n\t//\n\tSchema string `json:\"schema,omitempty\"`\n\n\t// The Table option allows overriding the default table\n\t// name that is generated by ent. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tTable: \"Users\",\n\t//\t}\n\t//\n\tTable string `json:\"table,omitempty\"`\n\n\t// Charset defines the character-set of the table. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCharset: \"utf8mb4\",\n\t//\t}\n\t//\n\tCharset string `json:\"charset,omitempty\"`\n\n\t// Collation defines the collation of the table (a set of rules for comparing\n\t// characters in a character set). For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCollation: \"utf8mb4_bin\",\n\t//\t}\n\t//\n\tCollation string `json:\"collation,omitempty\"`\n\n\t// Default specifies a literal default value of a column. Note that using\n\t// this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefault: `{\"key\":\"value\"}`,\n\t//\t}\n\t//\n\tDefault string `json:\"default,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column. Using this option,\n\t// users can define custom expressions to be set as database default values. Note that\n\t// using this option overrides the default behavior of the code-generation.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"CURRENT_TIMESTAMP\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"uuid_generate_v4()\",\n\t//\t}\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExpr: \"(a + b)\",\n\t//\t}\n\t//\n\tDefaultExpr string `json:\"default_expr,omitempty\"`\n\n\t// DefaultExpr specifies an expression default value of a column per dialect.\n\t// See, DefaultExpr for full doc.\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tDefaultExprs: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"uuid()\",\n\t//\t\t\tdialect.Postgres: \"uuid_generate_v4\",\n\t//\t\t}\n\t//\n\tDefaultExprs map[string]string `json:\"default_exprs,omitempty\"`\n\n\t// Options defines the additional table options. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOptions: \"ENGINE = INNODB\",\n\t//\t}\n\t//\n\tOptions string `json:\"options,omitempty\"`\n\n\t// Size defines the column size in the generated schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSize: 128,\n\t//\t}\n\t//\n\tSize int64 `json:\"size,omitempty\"`\n\n\t// WithComments specifies whether fields' comments should\n\t// be stored in the database schema as column comments.\n\t//\n\t//  withCommentsEnabled := true\n\t//\tentsql.WithComments{\n\t//\t\tWithComments: \u0026withCommentsEnabled,\n\t//\t}\n\t//\n\tWithComments *bool `json:\"with_comments,omitempty\"`\n\n\t// Incremental defines the auto-incremental behavior of a column. For example:\n\t//\n\t//  incrementalEnabled := true\n\t//  entsql.Annotation{\n\t//      Incremental: \u0026incrementalEnabled,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever best fits each scenario.\n\t//\n\tIncremental *bool `json:\"incremental,omitempty\"`\n\n\t// IncrementStart defines the auto-incremental start value of a column. For example:\n\t//\n\t//  incrementStart := 100\n\t//  entsql.Annotation{\n\t//      IncrementStart: \u0026incrementStart,\n\t//  }\n\t//\n\t// By default, this value is nil defaulting to whatever the database settings are.\n\t//\n\tIncrementStart *int `json:\"increment_start,omitempty\"`\n\n\t// OnDelete specifies a custom referential action for DELETE operations on parent\n\t// table that has matching rows in the child table.\n\t//\n\t// For example, in order to delete rows from the parent table and automatically delete\n\t// their matching rows in the child table, pass the following annotation:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tOnDelete: entsql.Cascade,\n\t//\t}\n\t//\n\tOnDelete ReferenceOption `json:\"on_delete,omitempty\"`\n\n\t// Check allows injecting custom \"DDL\" for setting an unnamed \"CHECK\" clause in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tCheck: \"age \u003c 10\",\n\t//\t}\n\t//\n\tCheck string `json:\"check,omitempty\"`\n\n\t// Checks allows injecting custom \"DDL\" for setting named \"CHECK\" clauses in \"CREATE TABLE\".\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tChecks: map[string]string{\n\t//\t\t\t\"valid_discount\": \"price \u003e discount_price\",\n\t//\t\t},\n\t//\t}\n\t//\n\tChecks map[string]string `json:\"checks,omitempty\"`\n\n\t// Skip indicates that the field or the schema is skipped/ignored during\n\t// migration (e.g., defined externally).\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tSkip: true,\n\t//\t}\n\t//\n\tSkip bool `json:\"skip,omitempty\"`\n\n\t// ViewAs allows defining a view for the schema. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tView: \"SELECT name FROM users\",\n\t//\t}\n\tViewAs string `json:\"view_as,omitempty\"`\n\n\t// ViewFor allows defining a view for the schema per dialect. For example:\n\t//\n\t//\tentsql.Annotation{\n\t//\t\tViewFor: map[string]string{\n\t//\t\t\tdialect.MySQL:    \"...\",\n\t//\t\t\tdialect.Postgres: \"...\",\n\t//\t\t},\n\t//\t}\n\tViewFor map[string]string `json:\"view_for,omitempty\"`\n\n\t// error occurs during annotation build. This field is not\n\t// serialized to JSON and used only by the codegen loader.\n\terr error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/mysql.go",
          "code_snippet": "func (d *MySQL) mariadb() (string, bool) {\n\tidx := strings.Index(d.version, \"MariaDB\")\n\tif idx == -1 {\n\t\treturn \"\", false\n\t}\n\treturn d.version[:idx-1], true\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "func compareVersions(v1, v2 string) int {\n\tpv1, ok1 := parseVersion(v1)\n\tpv2, ok2 := parseVersion(v2)\n\tif !ok1 \u0026\u0026 !ok2 {\n\t\treturn 0\n\t}\n\tif !ok1 {\n\t\treturn -1\n\t}\n\tif !ok2 {\n\t\treturn 1\n\t}\n\tif v := compare(pv1.major, pv2.major); v != 0 {\n\t\treturn v\n\t}\n\tif v := compare(pv1.minor, pv2.minor); v != 0 {\n\t\treturn v\n\t}\n\treturn compare(pv1.patch, pv2.patch)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func setAtChecks(et *Table, at *schema.Table) {\n\tif check := et.Annotation.Check; check != \"\" {\n\t\tat.AddChecks(\u0026schema.Check{\n\t\t\tExpr: check,\n\t\t})\n\t}\n\tif checks := et.Annotation.Checks; len(et.Annotation.Checks) \u003e 0 {\n\t\tnames := make([]string, 0, len(checks))\n\t\tfor name := range checks {\n\t\t\tnames = append(names, name)\n\t\t}\n\t\tsort.Strings(names)\n\t\tfor _, name := range names {\n\t\t\tat.AddChecks(\u0026schema.Check{\n\t\t\t\tName: name,\n\t\t\t\tExpr: checks[name],\n\t\t\t})\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) SetCollation(v string) *Table {\n\tReplaceOrAppend(\u0026t.Attrs, \u0026Collation{V: v})\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) SetCharset(v string) *Table {\n\tReplaceOrAppend(\u0026t.Attrs, \u0026Charset{V: v})\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddAttrs(attrs ...Attr) *Table {\n\tt.Attrs = append(t.Attrs, attrs...)\n\treturn t\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/mysql/inspect_oss.go",
          "code_snippet": "CreateOptions struct {\n\t\tschema.Attr\n\t\tV string\n\t}",
          "ref_module": "mysql"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        80,
        81,
        82,
        83,
        84,
        85,
        88,
        91,
        98,
        99,
        102
      ],
      "cover_details": {
        "line_cover_rate": 0.4230769230769231
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/map.go:DecoderOfMap",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeMapIntoNil"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestDecodeBadMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestDecodeStruct"
        }
      ],
      "name": "DecoderOfMap",
      "signature": "(ext decodeExtension) DecoderOfMap (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfMap(typ reflect2.Type) jsoniter.ValDecoder {\n\tmapType := typ.(reflect2.MapType)\n\tkeyType, elemType := mapType.Key(), mapType.Elem()\n\treturn \u0026mapDecoder{\n\t\tmapType:  mapType,\n\t\tkeyType:  keyType,\n\t\telemType: elemType,\n\t\tkeyDec:   ext.LazyDecoderOf(keyType),\n\t\telemDec:  ext.LazyDecoderOf(elemType),\n\t}\n}",
      "function_comment": "// DecoderOfMap returns a value decoder of a map type.",
      "function_statement": "// DecoderOfMap returns a value decoder of a map type.",
      "start_line": 61,
      "end_line": 71,
      "file_path": "./dialect/gremlin/encoding/graphson/map.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/map.go",
          "code_snippet": "mapDecoder struct {\n\tmapType  reflect2.MapType\n\tkeyType  reflect2.Type\n\telemType reflect2.Type\n\tkeyDec   jsoniter.ValDecoder\n\telemDec  jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "MapType interface {\n\tType\n\tKey() Type\n\tElem() Type\n\tMakeMap(cap int) interface{}\n\tUnsafeMakeMap(cap int) unsafe.Pointer\n\tSetIndex(obj interface{}, key interface{}, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, key unsafe.Pointer, elem unsafe.Pointer)\n\tTryGetIndex(obj interface{}, key interface{}) (interface{}, bool)\n\tGetIndex(obj interface{}, key interface{}) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, key unsafe.Pointer) unsafe.Pointer\n\tIterate(obj interface{}) MapIterator\n\tUnsafeIterate(obj unsafe.Pointer) MapIterator\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/lazy.go:IsEmpty",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/lazy_test.go",
          "func_name": "TestLazyEncode"
        }
      ],
      "name": "IsEmpty",
      "signature": "(enc *lazyEncoder) IsEmpty (ptr unsafe.Pointer) bool",
      "ground_truth": "func (enc *lazyEncoder) IsEmpty(ptr unsafe.Pointer) bool {\n\tenc.once.Do(func() { enc.ValEncoder = enc.resolve() })\n\treturn enc.ValEncoder.IsEmpty(ptr)\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 46,
      "end_line": 49,
      "file_path": "./dialect/gremlin/encoding/graphson/lazy.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "lazyEncoder struct {\n\tjsoniter.ValEncoder\n\tresolve func() jsoniter.ValEncoder\n\tonce    sync.Once\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/sync/once.go",
          "code_snippet": "func (o *Once) Do(f func()) {\n\t// Note: Here is an incorrect implementation of Do:\n\t//\n\t//\tif o.done.CompareAndSwap(0, 1) {\n\t//\t\tf()\n\t//\t}\n\t//\n\t// Do guarantees that when it returns, f has finished.\n\t// This implementation would not implement that guarantee:\n\t// given two simultaneous calls, the winner of the cas would\n\t// call f, and the second would return immediately, without\n\t// waiting for the first's call to f to complete.\n\t// This is why the slow path falls back to a mutex, and why\n\t// the o.done.Store must be delayed until after f returns.\n\n\tif o.done.Load() == 0 {\n\t\t// Outlined slow-path to allow inlining of the fast-path.\n\t\to.doSlow(f)\n\t}\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        46,
        47,
        48
      ],
      "cover_details": {
        "line_cover_rate": 0.75
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:filterChanges",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_SchemaName"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Formatter"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "filterChanges",
      "signature": "filterChanges (skip ChangeKind) DiffHook",
      "ground_truth": "func filterChanges(skip ChangeKind) DiffHook {\n\treturn func(next Differ) Differ {\n\t\treturn DiffFunc(func(current, desired *schema.Schema) ([]schema.Change, error) {\n\t\t\tvar f func([]schema.Change) []schema.Change\n\t\t\tf = func(changes []schema.Change) (keep []schema.Change) {\n\t\t\t\tvar k ChangeKind\n\t\t\t\tfor _, c := range changes {\n\t\t\t\t\tswitch c := c.(type) {\n\t\t\t\t\tcase *schema.AddSchema:\n\t\t\t\t\t\tk = AddSchema\n\t\t\t\t\tcase *schema.ModifySchema:\n\t\t\t\t\t\tk = ModifySchema\n\t\t\t\t\t\tif !skip.Is(k) {\n\t\t\t\t\t\t\tc.Changes = f(c.Changes)\n\t\t\t\t\t\t}\n\t\t\t\t\tcase *schema.DropSchema:\n\t\t\t\t\t\tk = DropSchema\n\t\t\t\t\tcase *schema.AddTable:\n\t\t\t\t\t\tk = AddTable\n\t\t\t\t\tcase *schema.ModifyTable:\n\t\t\t\t\t\tk = ModifyTable\n\t\t\t\t\t\tif !skip.Is(k) {\n\t\t\t\t\t\t\tc.Changes = f(c.Changes)\n\t\t\t\t\t\t}\n\t\t\t\t\tcase *schema.DropTable:\n\t\t\t\t\t\tk = DropTable\n\t\t\t\t\tcase *schema.AddColumn:\n\t\t\t\t\t\tk = AddColumn\n\t\t\t\t\tcase *schema.ModifyColumn:\n\t\t\t\t\t\tk = ModifyColumn\n\t\t\t\t\tcase *schema.DropColumn:\n\t\t\t\t\t\tk = DropColumn\n\t\t\t\t\tcase *schema.AddIndex:\n\t\t\t\t\t\tk = AddIndex\n\t\t\t\t\tcase *schema.ModifyIndex:\n\t\t\t\t\t\tk = ModifyIndex\n\t\t\t\t\tcase *schema.DropIndex:\n\t\t\t\t\t\tk = DropIndex\n\t\t\t\t\tcase *schema.AddForeignKey:\n\t\t\t\t\t\tk = AddIndex\n\t\t\t\t\tcase *schema.ModifyForeignKey:\n\t\t\t\t\t\tk = ModifyForeignKey\n\t\t\t\t\tcase *schema.DropForeignKey:\n\t\t\t\t\t\tk = DropForeignKey\n\t\t\t\t\tcase *schema.AddCheck:\n\t\t\t\t\t\tk = AddCheck\n\t\t\t\t\tcase *schema.ModifyCheck:\n\t\t\t\t\t\tk = ModifyCheck\n\t\t\t\t\tcase *schema.DropCheck:\n\t\t\t\t\t\tk = DropCheck\n\t\t\t\t\t}\n\t\t\t\t\tif !skip.Is(k) {\n\t\t\t\t\t\tkeep = append(keep, c)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tchanges, err := next.Diff(current, desired)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn f(changes), nil\n\t\t})\n\t}\n}",
      "function_comment": "// filterChanges is a DiffHook for filtering changes before plan.",
      "function_statement": "// filterChanges is a DiffHook for filtering changes before plan.",
      "start_line": 346,
      "end_line": 410,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ChangeKind uint",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DiffHook func(Differ) Differ",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Differ interface {\n\t\t// Diff returns a list of changes that construct a migration plan.\n\t\tDiff(current, desired *schema.Schema) ([]schema.Change, error)\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DiffFunc func(current, desired *schema.Schema) ([]schema.Change, error)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "AddSchema ChangeKind = 1 \u003c\u003c (iota - 1)",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModifySchema",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (k ChangeKind) Is(c ChangeKind) bool {\n\treturn k == c || k\u0026c != 0\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropSchema",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "AddTable",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModifyTable",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropTable",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "AddColumn",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModifyColumn",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropColumn",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "AddIndex",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModifyIndex",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropIndex",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModifyForeignKey",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropForeignKey",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "AddCheck",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModifyCheck",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "DropCheck",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Schema struct {\n\t\tName    string\n\t\tRealm   *Realm\n\t\tTables  []*Table\n\t\tViews   []*View\n\t\tFuncs   []*Func\n\t\tProcs   []*Proc\n\t\tAttrs   []Attr   // Attrs and options.\n\t\tObjects []Object // Schema-level objects (e.g., types or sequences).\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "Change interface {\n\t\tchange()\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddSchema struct {\n\t\tS     *Schema\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifySchema struct {\n\t\tS       *Schema\n\t\tChanges []Change\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropSchema struct {\n\t\tS     *Schema\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddTable struct {\n\t\tT     *Table\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyTable struct {\n\t\tT       *Table\n\t\tChanges []Change\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropTable struct {\n\t\tT     *Table\n\t\tExtra []Clause // Extra clauses.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddColumn struct {\n\t\tC *Column\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyColumn struct {\n\t\tFrom, To *Column\n\t\tChange   ChangeKind\n\t\tExtra    []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropColumn struct {\n\t\tC *Column\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddIndex struct {\n\t\tI     *Index\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyIndex struct {\n\t\tFrom, To *Index\n\t\tChange   ChangeKind\n\t\tExtra    []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropIndex struct {\n\t\tI     *Index\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddForeignKey struct {\n\t\tF     *ForeignKey\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyForeignKey struct {\n\t\tFrom, To *ForeignKey\n\t\tChange   ChangeKind\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropForeignKey struct {\n\t\tF     *ForeignKey\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "AddCheck struct {\n\t\tC     *Check\n\t\tExtra []Clause // Extra clauses and options.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "ModifyCheck struct {\n\t\tFrom, To *Check\n\t\tChange   ChangeKind\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/migrate.go",
          "code_snippet": "DropCheck struct {\n\t\tC *Check\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        363,
        364,
        397,
        398,
        399,
        401,
        403,
        404,
        407
      ],
      "cover_details": {
        "line_cover_rate": 0.26153846153846155
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:NewEncoder",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        }
      ],
      "name": "NewEncoder",
      "signature": "NewEncoder (w io.Writer) Encoder",
      "ground_truth": "func NewEncoder(w io.Writer) Encoder {\n\treturn config.NewEncoder(w)\n}",
      "function_comment": "// NewEncoder create a graphson encoder.",
      "function_statement": "// NewEncoder create a graphson encoder.",
      "start_line": 35,
      "end_line": 37,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/encode.go",
          "code_snippet": "Encoder interface {\n\tEncode(any) error\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/io/io.go",
          "code_snippet": "Writer interface {\n\tWrite(p []byte) (n int, err error)\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        35,
        36,
        37
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/ocgremlin/trace.go:RoundTrip",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/client_test.go",
          "func_name": "TestTransportOptions"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestTraceTransportRoundTrip"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/ocgremlin",
          "rel_file_path": "dialect/gremlin/ocgremlin/trace_test.go",
          "func_name": "TestEndToEnd"
        }
      ],
      "name": "RoundTrip",
      "signature": "(t *traceTransport) RoundTrip (ctx context.Context, req *gremlin.Request) (*gremlin.Response, error)",
      "ground_truth": "func (t *traceTransport) RoundTrip(ctx context.Context, req *gremlin.Request) (*gremlin.Response, error) {\n\tctx, span := trace.StartSpan(ctx,\n\t\tt.formatSpanName(ctx, req),\n\t\ttrace.WithSampler(t.startOptions.Sampler),\n\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t)\n\tdefer span.End()\n\n\tspan.AddAttributes(requestAttrs(req, t.withQuery)...)\n\trsp, err := t.base.RoundTrip(ctx, req)\n\tif err != nil {\n\t\tspan.SetStatus(trace.Status{Code: trace.StatusCodeUnknown, Message: err.Error()})\n\t\treturn rsp, err\n\t}\n\n\tspan.AddAttributes(responseAttrs(rsp)...)\n\tspan.SetStatus(TraceStatus(rsp.Status.Code))\n\treturn rsp, err\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 33,
      "end_line": 51,
      "file_path": "./dialect/gremlin/ocgremlin/trace.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "traceTransport struct {\n\tbase           gremlin.RoundTripper\n\tstartOptions   trace.StartOptions\n\tformatSpanName func(context.Context, *gremlin.Request) string\n\twithQuery      bool\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/request.go",
          "code_snippet": "Request struct {\n\t\tRequestID string         `json:\"requestId\" graphson:\"g:UUID\"`\n\t\tOperation string         `json:\"op\"`\n\t\tProcessor string         `json:\"processor\"`\n\t\tArguments map[string]any `json:\"args\"`\n\t}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/response.go",
          "code_snippet": "Response struct {\n\tRequestID string `json:\"requestId\" graphson:\"g:UUID\"`\n\tStatus    struct {\n\t\tCode       int            `json:\"code\"`\n\t\tAttributes map[string]any `json:\"attributes\"`\n\t\tMessage    string         `json:\"message\"`\n\t} `json:\"status\"`\n\tResult struct {\n\t\tData graphson.RawMessage `json:\"data\"`\n\t\tMeta map[string]any      `json:\"meta\"`\n\t} `json:\"result\"`\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func requestAttrs(req *gremlin.Request, withQuery bool) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.StringAttribute(RequestIDAttribute, req.RequestID),\n\t\ttrace.StringAttribute(OperationAttribute, req.Operation),\n\t}\n\tif withQuery {\n\t\tquery, _ := req.Arguments[gremlin.ArgsGremlin].(string)\n\t\tattrs = append(attrs, trace.StringAttribute(QueryAttribute, query))\n\t\tif bindings, ok := req.Arguments[gremlin.ArgsBindings].(map[string]any); ok {\n\t\t\tattrs = append(attrs, bindingsAttrs(bindings)...)\n\t\t}\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/client.go",
          "code_snippet": "RoundTripper interface {\n\tRoundTrip(context.Context, *Request) (*Response, error)\n}",
          "ref_module": "gremlin"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func responseAttrs(rsp *gremlin.Response) []trace.Attribute {\n\tattrs := []trace.Attribute{\n\t\ttrace.Int64Attribute(CodeAttribute, int64(rsp.Status.Code)),\n\t}\n\tif rsp.Status.Message != \"\" {\n\t\tattrs = append(attrs, trace.StringAttribute(MessageAttribute, rsp.Status.Message))\n\t}\n\treturn attrs\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/ocgremlin/trace.go",
          "code_snippet": "func TraceStatus(status int) trace.Status {\n\tvar code int32\n\tswitch status {\n\tcase gremlin.StatusSuccess,\n\t\tgremlin.StatusNoContent,\n\t\tgremlin.StatusPartialContent:\n\t\tcode = trace.StatusCodeOK\n\tcase gremlin.StatusUnauthorized:\n\t\tcode = trace.StatusCodePermissionDenied\n\tcase gremlin.StatusAuthenticate:\n\t\tcode = trace.StatusCodeUnauthenticated\n\tcase gremlin.StatusMalformedRequest,\n\t\tgremlin.StatusInvalidRequestArguments,\n\t\tgremlin.StatusScriptEvaluationError:\n\t\tcode = trace.StatusCodeInvalidArgument\n\tcase gremlin.StatusServerError,\n\t\tgremlin.StatusServerSerializationError:\n\t\tcode = trace.StatusCodeInternal\n\tcase gremlin.StatusServerTimeout:\n\t\tcode = trace.StatusCodeDeadlineExceeded\n\tdefault:\n\t\tcode = trace.StatusCodeUnknown\n\t}\n\treturn trace.Status{Code: code, Message: gremlin.StatusText(status)}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func StartSpan(ctx context.Context, name string, o ...StartOption) (context.Context, *Span) {\n\treturn DefaultTracer.StartSpan(ctx, name, o...)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "func WithSampler(sampler Sampler) StartOption {\n\treturn func(o *StartOptions) {\n\t\to.Sampler = sampler\n\t}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "StartOptions struct {\n\t// Sampler to consult for this Span. If provided, it is always consulted.\n\t//\n\t// If not provided, then the behavior differs based on whether\n\t// the parent of this Span is remote, local, or there is no parent.\n\t// In the case of a remote parent or no parent, the\n\t// default sampler (see Config) will be consulted. Otherwise,\n\t// when there is a non-remote parent, no new sampling decision will be made:\n\t// we will preserve the sampling of the parent.\n\tSampler Sampler\n\n\t// SpanKind represents the kind of a span. If none is set,\n\t// SpanKindUnspecified is used.\n\tSpanKind int\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "func WithSpanKind(spanKind int) StartOption {\n\treturn func(o *StartOptions) {\n\t\to.SpanKind = spanKind\n\t}\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace.go",
          "code_snippet": "SpanKindClient",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) End() {\n\tif s == nil {\n\t\treturn\n\t}\n\ts.internal.End()\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) AddAttributes(attributes ...Attribute) {\n\tif !s.IsRecordingEvents() {\n\t\treturn\n\t}\n\ts.internal.AddAttributes(attributes...)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/trace_api.go",
          "code_snippet": "func (s *Span) SetStatus(status Status) {\n\tif !s.IsRecordingEvents() {\n\t\treturn\n\t}\n\ts.internal.SetStatus(status)\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/basetypes.go",
          "code_snippet": "Status struct {\n\t// Code is a status code.  Zero indicates success.\n\t//\n\t// If Code will be propagated to Google APIs, it ideally should be a value from\n\t// https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto .\n\tCode    int32\n\tMessage string\n}",
          "ref_module": "trace"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/go.opencensus.io@v0.24.0/trace/status_codes.go",
          "code_snippet": "StatusCodeUnknown            = 2",
          "ref_module": "trace"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50
      ],
      "cover_details": {
        "line_cover_rate": 0.8947368421052632
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:NamedDiff",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        }
      ],
      "name": "NamedDiff",
      "signature": "(a *Atlas) NamedDiff (ctx context.Context, name string, tables ...*Table) error",
      "ground_truth": "func (a *Atlas) NamedDiff(ctx context.Context, name string, tables ...*Table) error {\n\tif a.dir == nil {\n\t\treturn errors.New(\"no migration directory given\")\n\t}\n\topts := []migrate.PlannerOption{migrate.PlanFormat(a.fmt)}\n\t// Validate the migration directory before proceeding.\n\tif err := migrate.Validate(a.dir); err != nil {\n\t\treturn fmt.Errorf(\"validating migration directory: %w\", err)\n\t}\n\ta.setupTables(tables)\n\t// Set up connections.\n\tif a.driver != nil {\n\t\tvar err error\n\t\ta.sqlDialect, err = a.entDialect(ctx, a.driver)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.atDriver, err = a.sqlDialect.atOpen(a.sqlDialect)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tc, err := sqlclient.OpenURL(ctx, a.url)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer c.Close()\n\t\ta.sqlDialect, err = a.entDialect(ctx, entsql.OpenDB(a.dialect, c.DB))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.atDriver = c.Driver\n\t}\n\tdefer func() {\n\t\ta.sqlDialect = nil\n\t\ta.atDriver = nil\n\t}()\n\tif err := a.sqlDialect.init(ctx); err != nil {\n\t\treturn err\n\t}\n\tif a.universalID {\n\t\ttables = append(tables, NewTypesTable())\n\t}\n\tvar (\n\t\terr  error\n\t\tplan *migrate.Plan\n\t)\n\tswitch a.mode {\n\tcase ModeInspect:\n\t\tplan, err = a.planInspect(ctx, a.sqlDialect, name, tables)\n\tcase ModeReplay:\n\t\tplan, err = a.planReplay(ctx, name, tables)\n\tdefault:\n\t\treturn fmt.Errorf(\"unknown migration mode: %q\", a.mode)\n\t}\n\tswitch {\n\tcase err != nil:\n\t\treturn err\n\tcase len(plan.Changes) == 0:\n\t\tif a.errNoPlan {\n\t\t\treturn migrate.ErrNoPlan\n\t\t}\n\t\treturn nil\n\tdefault:\n\t\treturn migrate.NewPlanner(nil, a.dir, opts...).WritePlan(plan)\n\t}\n}",
      "function_comment": "// NamedDiff compares the state read from the connected database with the state defined by Ent.\n// Changes will be written to migration files by the configured Planner.",
      "function_statement": "// NamedDiff compares the state read from the connected database with the state defined by Ent.\n// Changes will be written to migration files by the configured Planner.",
      "start_line": 123,
      "end_line": 189,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) setupTables(tables []*Table) {\n\tfor _, t := range tables {\n\t\tif t.columns == nil {\n\t\t\tt.columns = make(map[string]*Column, len(t.Columns))\n\t\t}\n\t\tfor _, c := range t.Columns {\n\t\t\tt.columns[c.Name] = c\n\t\t}\n\t\tfor _, idx := range t.Indexes {\n\t\t\tidx.Name = a.symbol(idx.Name)\n\t\t\tfor _, c := range idx.Columns {\n\t\t\t\tc.indexes.append(idx)\n\t\t\t}\n\t\t}\n\t\tfor _, pk := range t.PrimaryKey {\n\t\t\tc := t.columns[pk.Name]\n\t\t\tc.Key = PrimaryKey\n\t\t\tpk.Key = PrimaryKey\n\t\t}\n\t\tfor _, fk := range t.ForeignKeys {\n\t\t\tfk.Symbol = a.symbol(fk.Symbol)\n\t\t\tfor i := range fk.Columns {\n\t\t\t\tfk.Columns[i].foreign = fk\n\t\t\t}\n\t\t}\n\t}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) entDialect(ctx context.Context, drv dialect.Driver) (sqlDialect, error) {\n\tvar d sqlDialect\n\tswitch a.dialect {\n\tcase dialect.MySQL:\n\t\td = \u0026MySQL{Driver: drv}\n\tcase dialect.SQLite:\n\t\td = \u0026SQLite{Driver: drv, WithForeignKeys: a.withForeignKeys}\n\tcase dialect.Postgres:\n\t\td = \u0026Postgres{Driver: drv}\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"sql/schema: unsupported dialect %q\", a.dialect)\n\t}\n\tif err := d.init(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\treturn d, nil\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/driver.go",
          "code_snippet": "func OpenDB(dialect string, db *sql.DB) *Driver {\n\treturn NewDriver(dialect, Conn{db, dialect})\n}",
          "ref_module": "entsql"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "sqlDialect interface {\n\tatBuilder\n\tdialect.Driver\n\tinit(context.Context) error\n\ttableExist(context.Context, dialect.ExecQuerier, string) (bool, error)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/migrate.go",
          "code_snippet": "func NewTypesTable() *Table {\n\treturn NewTable(TypeTable).\n\t\tAddPrimary(\u0026Column{Name: \"id\", Type: field.TypeUint, Increment: true}).\n\t\tAddColumn(\u0026Column{Name: \"type\", Type: field.TypeString, Unique: true})\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModeInspect",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) planInspect(ctx context.Context, conn dialect.ExecQuerier, name string, tables []*Table) (*migrate.Plan, error) {\n\tcurrent, err := a.atDriver.InspectSchema(ctx, a.schema, \u0026schema.InspectOptions{\n\t\tTables: func() (t []string) {\n\t\t\tfor i := range tables {\n\t\t\t\tt = append(t, tables[i].Name)\n\t\t\t}\n\t\t\treturn t\n\t\t}(),\n\t\t// Ent supports table-level inspection only.\n\t\tMode: schema.InspectSchemas | schema.InspectTables,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar types []string\n\tif a.universalID {\n\t\ttypes, err = a.loadTypes(ctx, conn)\n\t\tif err != nil \u0026\u0026 !errors.Is(err, errTypeTableNotFound) {\n\t\t\treturn nil, err\n\t\t}\n\t\ta.types = types\n\t}\n\trealm, err := a.StateReader(tables...).ReadState(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar desired *schema.Schema\n\tswitch {\n\tcase realm != nil \u0026\u0026 len(realm.Schemas) \u003e 0:\n\t\tdesired = realm.Schemas[0]\n\tdefault:\n\t\tdesired = \u0026schema.Schema{}\n\t}\n\tdesired.Name, desired.Attrs = current.Name, current.Attrs\n\treturn a.diff(ctx, name, current, desired, a.types[len(types):], noQualifierOpt)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "ModeReplay = iota",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) planReplay(ctx context.Context, name string, tables []*Table) (*migrate.Plan, error) {\n\t// We consider a database clean if there are no tables in the connected schema.\n\ts, err := a.atDriver.InspectSchema(ctx, a.schema, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(s.Tables) \u003e 0 {\n\t\treturn nil, \u0026migrate.NotCleanError{Reason: fmt.Sprintf(\"found table %q\", s.Tables[0].Name)}\n\t}\n\t// Replay the migration directory on the database.\n\tex, err := migrate.NewExecutor(a.atDriver, a.dir, \u0026migrate.NopRevisionReadWriter{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := ex.ExecuteN(ctx, 0); err != nil \u0026\u0026 !errors.Is(err, migrate.ErrNoPendingFiles) {\n\t\treturn nil, a.cleanSchema(ctx, a.schema, err)\n\t}\n\t// Inspect the current schema (migration directory).\n\tcurrent, err := a.atDriver.InspectSchema(ctx, a.schema, nil)\n\tif err != nil {\n\t\treturn nil, a.cleanSchema(ctx, a.schema, err)\n\t}\n\tvar types []string\n\tif a.universalID {\n\t\tif types, err = a.loadTypes(ctx, a.sqlDialect); err != nil \u0026\u0026 !errors.Is(err, errTypeTableNotFound) {\n\t\t\treturn nil, a.cleanSchema(ctx, a.schema, err)\n\t\t}\n\t\ta.types = types\n\t}\n\tif err := a.cleanSchema(ctx, a.schema, nil); err != nil {\n\t\treturn nil, fmt.Errorf(\"clean schemas after migration replaying: %w\", err)\n\t}\n\tdesired, err := a.tables(tables)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// In case of replay mode, normalize the desired state (i.e. ent/schema).\n\tif nr, ok := a.atDriver.(schema.Normalizer); ok {\n\t\tns, err := nr.NormalizeSchema(ctx, schema.New(current.Name).AddTables(desired...))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(ns.Tables) != len(desired) {\n\t\t\treturn nil, fmt.Errorf(\"unexpected number of tables after normalization: %d != %d\", len(ns.Tables), len(desired))\n\t\t}\n\t\t// Ensure all tables exist in the normalized format and the order is preserved.\n\t\tfor i, t := range desired {\n\t\t\td, ok := ns.Table(t.Name)\n\t\t\tif !ok {\n\t\t\t\treturn nil, fmt.Errorf(\"table %q not found after normalization\", t.Name)\n\t\t\t}\n\t\t\tdesired[i] = d\n\t\t}\n\t}\n\treturn a.diff(ctx, name, current,\n\t\t\u0026schema.Schema{Name: current.Name, Attrs: current.Attrs, Tables: desired}, a.types[len(types):],\n\t\tnoQualifierOpt,\n\t)\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "PlannerOption func(*Planner)",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func PlanFormat(fmt Formatter) PlannerOption {\n\treturn func(p *Planner) {\n\t\tp.fmt = fmt\n\t}\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/dir.go",
          "code_snippet": "func Validate(dir Dir) error {\n\tac, err := readHashFile(dir)\n\tif errors.Is(err, fs.ErrNotExist) {\n\t\t// If there are no migration files yet, this is okay.\n\t\tif files, err := dir.Files(); err != nil {\n\t\t\treturn err\n\t\t} else if len(files) \u003e 0 {\n\t\t\treturn ErrChecksumNotFound\n\t\t}\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\tex, err := dir.Checksum()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif ac.Sum() != ex.Sum() {\n\t\terr := \u0026ChecksumError{Total: len(ac)}\n\t\t// Determine the reason for the mismatch. Iterate over the file sum,\n\t\t// based on it determine if a file was removed, added or edited.\n\t\tconst hashSize = 3 + 44 // h1: (3) + base64(sha256sum) (44)\n\t\tpos := hashSize + 1     // total hash + newline\n\t\tfor i, h := range ac {\n\t\t\t// Proceed until we find the mismatch.\n\t\t\tif len(ex) \u003e i \u0026\u0026 ex[i] == h {\n\t\t\t\tpos += len(h.N) + 1 + hashSize + 1 // filename + space + hash + newline\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Index is now pointing at the file with the mismatch.\n\t\t\terr.Line = i + 2 // first line is global hash\n\t\t\terr.Pos = pos\n\t\t\terr.File = h.N\n\t\t\tswitch idx := slices.IndexFunc(ex, func(e struct{ N, H string }) bool { return e.N == h.N }); {\n\t\t\tcase idx \u003c 0:\n\t\t\t\terr.Reason = ReasonRemoved\n\t\t\tcase idx == i:\n\t\t\t\t// If the file is in its original place, it was edited.\n\t\t\t\terr.Reason = ReasonEdited\n\t\t\tdefault:\n\t\t\t\t// File was not in its original place, meaning another file was added before it.\n\t\t\t\terr.File = ex[i].N\n\t\t\t\terr.Reason = ReasonAdded\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\t// If we land here, all migrations in the sum file are present unchanged in the computed sum.\n\t\t// But there is a mismatch, meaning the next file in the computed sum was added.\n\t\terr.Line = err.Total + 2 // first line is global hash\n\t\terr.File = ex[err.Total].N\n\t\terr.Pos = pos\n\t\terr.Reason = ReasonAdded\n\t\treturn err\n\t}\n\treturn nil\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlclient/client.go",
          "code_snippet": "func OpenURL(ctx context.Context, u *url.URL, opts ...OpenOption) (*Client, error) {\n\tcfg := \u0026openOptions{}\n\tfor _, opt := range opts {\n\t\tif err := opt(cfg); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif u.Scheme == \"\" {\n\t\treturn nil, errors.New(\"sql/sqlclient: missing driver. See: https://atlasgo.io/url\")\n\t}\n\tv, ok := drivers.Load(u.Scheme)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"sql/sqlclient: unknown driver %q. See: https://atlasgo.io/url\", u.Scheme)\n\t}\n\tdrv := v.(*driver)\n\t// If there is a schema given and the driver allows to change the schema for the url, do it.\n\tif cfg.schema != nil {\n\t\tsc, ok := drv.parser.(SchemaChanger)\n\t\tif !ok {\n\t\t\treturn nil, ErrUnsupported\n\t\t}\n\t\tu = sc.ChangeSchema(u, *cfg.schema)\n\t}\n\tclient, err := drv.Open(ctx, u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif client.URL == nil {\n\t\tclient.URL = drv.parser.ParseURL(u)\n\t}\n\tif client.openTx == nil \u0026\u0026 drv.txOpener != nil {\n\t\tclient.openTx = drv.txOpener\n\t}\n\tif len(cfg.hooks) \u003e 0 {\n\t\tclient.hooks = cfg.hooks\n\t\tif err := client.afterOpen(ctx); err != nil {\n\t\t\treturn nil, errors.Join(err, client.DB.Close())\n\t\t}\n\t}\n\treturn client, nil\n}",
          "ref_module": "sqlclient"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlclient/client.go",
          "code_snippet": "func (c *Client) Close() error {\n\terr := c.beforeClose()\n\tfor _, closer := range append(c.closers, c.DB) {\n\t\terr = errors.Join(err, closer.Close())\n\t}\n\treturn err\n}",
          "ref_module": "sqlclient"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlclient/client.go",
          "code_snippet": "Client struct {\n\t\t// Name used when creating the client.\n\t\tName string\n\n\t\t// DB used for creating the client.\n\t\tDB *sql.DB\n\t\t// URL holds an enriched url.URL.\n\t\tURL *URL\n\n\t\t// A migration driver for the attached dialect.\n\t\tmigrate.Driver\n\t\t// Additional closers that can be closed at the\n\t\t// end of the client lifetime.\n\t\tclosers []io.Closer\n\n\t\t// Marshal and Evaluator functions for decoding\n\t\t// and encoding the schema documents.\n\t\tschemahcl.Marshaler\n\t\tschemahcl.Evaluator\n\n\t\t// Ephemeral indicates that the database we connect to is \"ephemeral\"\n\t\t// (e.g., a temporary running container). This can be set by the driver\n\t\t// that opens the client to signal to its consumers that there is no need\n\t\t// to guard against race conditions with other Atlas clients.\n\t\tEphemeral bool\n\n\t\t// Functions registered by the drivers and used for opening transactions and their clients.\n\t\topenDriver func(schema.ExecQuerier) (migrate.Driver, error)\n\t\topenTx     TxOpener\n\t\thooks      []*Hook\n\t}",
          "ref_module": "sqlclient"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Plan struct {\n\t\t// Version and Name of the plan. Provided by the user or auto-generated.\n\t\tVersion, Name string\n\n\t\t// Reversible describes if the changeset is reversible.\n\t\tReversible bool\n\n\t\t// Transactional describes if the changeset is transactional.\n\t\tTransactional bool\n\n\t\t// Changes defines the list of changeset in the plan.\n\t\tChanges []*Change\n\n\t\t// Delimiter to use for separating statements.\n\t\tDelimiter string\n\n\t\t// Directives to add to the file (not associated with any statements) besides the delimiter.\n\t\t// For example, atlas:txtar, atlas:txmode, etc.\n\t\tDirectives []string\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "ErrNoPlan = errors.New(\"sql/migrate: no plan for matched states\")",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func (p *Planner) WritePlan(plan *Plan) error {\n\t// Format the plan into files.\n\tfiles, err := p.fmt.Format(plan)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Store the files in the migration directory.\n\tfor _, f := range files {\n\t\tif err := p.dir.WriteFile(f.Name(), f.Bytes()); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn p.writeSum()\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func NewPlanner(drv Driver, dir Dir, opts ...PlannerOption) *Planner {\n\tp := \u0026Planner{drv: drv, dir: dir, sum: true}\n\tfor _, opt := range opts {\n\t\topt(p)\n\t}\n\tif p.fmt == nil {\n\t\tp.fmt = DefaultFormatter\n\t}\n\treturn p\n}",
          "ref_module": "migrate"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/context/context.go",
          "code_snippet": "Context interface {\n\t// Deadline returns the time when work done on behalf of this context\n\t// should be canceled. Deadline returns ok==false when no deadline is\n\t// set. Successive calls to Deadline return the same results.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that's closed when work done on behalf of this\n\t// context should be canceled. Done may return nil if this context can\n\t// never be canceled. Successive calls to Done return the same value.\n\t// The close of the Done channel may happen asynchronously,\n\t// after the cancel function returns.\n\t//\n\t// WithCancel arranges for Done to be closed when cancel is called;\n\t// WithDeadline arranges for Done to be closed when the deadline\n\t// expires; WithTimeout arranges for Done to be closed when the timeout\n\t// elapses.\n\t//\n\t// Done is provided for use in select statements:\n\t//\n\t//  // Stream generates values with DoSomething and sends them to out\n\t//  // until DoSomething returns an error or ctx.Done is closed.\n\t//  func Stream(ctx context.Context, out chan\u003c- Value) error {\n\t//  \tfor {\n\t//  \t\tv, err := DoSomething(ctx)\n\t//  \t\tif err != nil {\n\t//  \t\t\treturn err\n\t//  \t\t}\n\t//  \t\tselect {\n\t//  \t\tcase \u003c-ctx.Done():\n\t//  \t\t\treturn ctx.Err()\n\t//  \t\tcase out \u003c- v:\n\t//  \t\t}\n\t//  \t}\n\t//  }\n\t//\n\t// See https://blog.golang.org/pipelines for more examples of how to use\n\t// a Done channel for cancellation.\n\tDone() \u003c-chan struct{}\n\n\t// If Done is not yet closed, Err returns nil.\n\t// If Done is closed, Err returns a non-nil error explaining why:\n\t// DeadlineExceeded if the context's deadline passed,\n\t// or Canceled if the context was canceled for some other reason.\n\t// After Err returns a non-nil error, successive calls to Err return the same error.\n\tErr() error\n\n\t// Value returns the value associated with this context for key, or nil\n\t// if no value is associated with key. Successive calls to Value with\n\t// the same key returns the same result.\n\t//\n\t// Use context values only for request-scoped data that transits\n\t// processes and API boundaries, not for passing optional parameters to\n\t// functions.\n\t//\n\t// A key identifies a specific value in a Context. Functions that wish\n\t// to store values in Context typically allocate a key in a global\n\t// variable then use that key as the argument to context.WithValue and\n\t// Context.Value. A key can be any type that supports equality;\n\t// packages should define keys as an unexported type to avoid\n\t// collisions.\n\t//\n\t// Packages that define a Context key should provide type-safe accessors\n\t// for the values stored using that key:\n\t//\n\t// \t// Package user defines a User type that's stored in Contexts.\n\t// \tpackage user\n\t//\n\t// \timport \"context\"\n\t//\n\t// \t// User is the type of value stored in the Contexts.\n\t// \ttype User struct {...}\n\t//\n\t// \t// key is an unexported type for keys defined in this package.\n\t// \t// This prevents collisions with keys defined in other packages.\n\t// \ttype key int\n\t//\n\t// \t// userKey is the key for user.User values in Contexts. It is\n\t// \t// unexported; clients use user.NewContext and user.FromContext\n\t// \t// instead of using this key directly.\n\t// \tvar userKey key\n\t//\n\t// \t// NewContext returns a new Context that carries value u.\n\t// \tfunc NewContext(ctx context.Context, u *User) context.Context {\n\t// \t\treturn context.WithValue(ctx, userKey, u)\n\t// \t}\n\t//\n\t// \t// FromContext returns the User value stored in ctx, if any.\n\t// \tfunc FromContext(ctx context.Context) (*User, bool) {\n\t// \t\tu, ok := ctx.Value(userKey).(*User)\n\t// \t\treturn u, ok\n\t// \t}\n\tValue(key any) any\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func append(slice []Type, elems ...Type) []Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        123,
        124,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        140,
        141,
        156,
        157,
        158,
        159,
        160,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        178,
        181,
        182,
        183,
        184,
        185,
        186,
        187
      ],
      "cover_details": {
        "line_cover_rate": 0.5671641791044776
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/encode.go:MarshalToString",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/raw_test.go",
          "func_name": "TestRawMessageEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeNestedStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/time_test.go",
          "func_name": "TestTimeEncoding"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/struct_test.go",
          "func_name": "TestEncodeStruct"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/type_test.go",
          "func_name": "TestEncodeTyper"
        }
      ],
      "name": "MarshalToString",
      "signature": "MarshalToString (v any) (string, error)",
      "ground_truth": "func MarshalToString(v any) (string, error) {\n\treturn config.MarshalToString(v)\n}",
      "function_comment": "// MarshalToString returns the graphson encoding of v as string.",
      "function_statement": "// MarshalToString returns the graphson encoding of v as string.",
      "start_line": 25,
      "end_line": 27,
      "file_path": "./dialect/gremlin/encoding/graphson/encode.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/init.go",
          "code_snippet": "config = jsoniter.Config{}.Froze()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/config.go",
          "code_snippet": "API interface {\n\tIteratorPool\n\tStreamPool\n\tMarshalToString(v interface{}) (string, error)\n\tMarshal(v interface{}) ([]byte, error)\n\tMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n\tUnmarshalFromString(str string, v interface{}) error\n\tUnmarshal(data []byte, v interface{}) error\n\tGet(data []byte, path ...interface{}) Any\n\tNewEncoder(writer io.Writer) *Encoder\n\tNewDecoder(reader io.Reader) *Decoder\n\tValid(data []byte) bool\n\tRegisterExtension(extension Extension)\n\tDecoderOf(typ reflect2.Type) ValDecoder\n\tEncoderOf(typ reflect2.Type) ValEncoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "any = interface{}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        25,
        26,
        27
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/func.go:pascalWords",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestDependencyAnnotation_Build"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_EnumName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_DefaultName"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestField_Constant"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestEdge"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/type_test.go",
          "func_name": "TestType"
        }
      ],
      "name": "pascalWords",
      "signature": "pascalWords (words []string) string",
      "ground_truth": "func pascalWords(words []string) string {\n\tfor i, w := range words {\n\t\tupper := strings.ToUpper(w)\n\t\tif _, ok := acronyms[upper]; ok {\n\t\t\twords[i] = upper\n\t\t} else {\n\t\t\twords[i] = rules.Capitalize(w)\n\t\t}\n\t}\n\treturn strings.Join(words, \"\")\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 165,
      "end_line": 175,
      "file_path": "./entc/gen/func.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "acronyms = make(map[string]struct{})",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Capitalize(word string) string {\n\treturn strings.ToUpper(word[:1]) + word[1:]\n}",
          "ref_module": "inflect"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func ToUpper(s string) string {\n\tisASCII, hasLower := true, false\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tc := s[i]\n\t\tif c \u003e= utf8.RuneSelf {\n\t\t\tisASCII = false\n\t\t\tbreak\n\t\t}\n\t\thasLower = hasLower || ('a' \u003c= c \u0026\u0026 c \u003c= 'z')\n\t}\n\n\tif isASCII { // optimize for ASCII-only strings.\n\t\tif !hasLower {\n\t\t\treturn s\n\t\t}\n\t\tvar (\n\t\t\tb   Builder\n\t\t\tpos int\n\t\t)\n\t\tb.Grow(len(s))\n\t\tfor i := 0; i \u003c len(s); i++ {\n\t\t\tc := s[i]\n\t\t\tif 'a' \u003c= c \u0026\u0026 c \u003c= 'z' {\n\t\t\t\tc -= 'a' - 'A'\n\t\t\t\tif pos \u003c i {\n\t\t\t\t\tb.WriteString(s[pos:i])\n\t\t\t\t}\n\t\t\t\tb.WriteByte(c)\n\t\t\t\tpos = i + 1\n\t\t\t}\n\t\t}\n\t\tif pos \u003c len(s) {\n\t\t\tb.WriteString(s[pos:])\n\t\t}\n\t\treturn b.String()\n\t}\n\treturn Map(unicode.ToUpper, s)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/strings/strings.go",
          "code_snippet": "func Join(elems []string, sep string) string {\n\tswitch len(elems) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn elems[0]\n\t}\n\n\tvar n int\n\tif len(sep) \u003e 0 {\n\t\tif len(sep) \u003e= maxInt/(len(elems)-1) {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(sep) * (len(elems) - 1)\n\t}\n\tfor _, elem := range elems {\n\t\tif len(elem) \u003e maxInt-n {\n\t\t\tpanic(\"strings: Join output length overflow\")\n\t\t}\n\t\tn += len(elem)\n\t}\n\n\tvar b Builder\n\tb.Grow(n)\n\tb.WriteString(elems[0])\n\tfor _, s := range elems[1:] {\n\t\tb.WriteString(sep)\n\t\tb.WriteString(s)\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        174
      ],
      "cover_details": {
        "line_cover_rate": 0.8181818181818182
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/map_test.go",
          "func_name": "TestEncodeMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        }
      ],
      "name": "Encode",
      "signature": "(enc sliceEncoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc sliceEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tif enc.sliceType.UnsafeIsNil(ptr) {\n\t\tstream.WriteNil()\n\t} else {\n\t\tenc.ValEncoder.Encode(ptr, stream)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 74,
      "end_line": 80,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "sliceEncoder struct {\n\tsliceType reflect2.SliceType\n\tjsoniter.ValEncoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "func (stream *Stream) WriteNil() {\n\tstream.writeFourBytes('n', 'u', 'l', 'l')\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValEncoder interface {\n\tIsEmpty(ptr unsafe.Pointer) bool\n\tEncode(ptr unsafe.Pointer, stream *Stream)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        74,
        75,
        76,
        77,
        78,
        79
      ],
      "cover_details": {
        "line_cover_rate": 0.8571428571428571
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:DecoratorOfArray",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeArray"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestEncodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "DecoratorOfArray",
      "signature": "(ext decodeExtension) DecoratorOfArray (dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoratorOfArray(dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\treturn typeDecoder{dec, listType}\n}",
      "function_comment": "// DecoratorOfArray decorates a value decoder of an array type.",
      "function_statement": "// DecoratorOfArray decorates a value decoder of an array type.",
      "start_line": 65,
      "end_line": 67,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/util.go",
          "code_snippet": "typeDecoder struct {\n\t\tjsoniter.ValDecoder\n\t\ttypeChecker\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/type.go",
          "code_snippet": "listType   Type = \"g:List\"",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "covered_lines": [
        65,
        66,
        67
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:DecoderOfArray",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "DecoderOfArray",
      "signature": "(ext decodeExtension) DecoderOfArray (typ reflect2.Type) jsoniter.ValDecoder",
      "ground_truth": "func (ext decodeExtension) DecoderOfArray(typ reflect2.Type) jsoniter.ValDecoder {\n\tarrayType := typ.(reflect2.ArrayType)\n\treturn arrayDecoder{\n\t\tarrayType: arrayType,\n\t\telemDec:   ext.LazyDecoderOf(arrayType.Elem()),\n\t}\n}",
      "function_comment": "// DecoderOfArray returns a value decoder of an array type.",
      "function_statement": "// DecoderOfArray returns a value decoder of an array type.",
      "start_line": 48,
      "end_line": 54,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "arrayDecoder struct {\n\tarrayType reflect2.ArrayType\n\telemDec   jsoniter.ValDecoder\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/lazy.go",
          "code_snippet": "func (decodeExtension) LazyDecoderOf(typ reflect2.Type) jsoniter.ValDecoder {\n\treturn \u0026lazyDecoder{resolve: func() jsoniter.ValDecoder {\n\t\tdec := config.DecoderOf(reflect2.PtrTo(typ))\n\t\tif td, ok := dec.(typeDecoder); ok {\n\t\t\ttd.typeChecker = \u0026uniqueType{elemChecker: td.typeChecker}\n\t\t\tdec = td\n\t\t}\n\t\treturn dec\n\t}}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ArrayType interface {\n\tListType\n\tLen() int\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ListType interface {\n\tType\n\tElem() Type\n\tSetIndex(obj interface{}, index int, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, index int, elem unsafe.Pointer)\n\tGetIndex(obj interface{}, index int) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, index int) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        48,
        49,
        50,
        51,
        52,
        53,
        54
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/slice.go:decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/slice_test.go",
          "func_name": "TestDecodeBadSlice"
        }
      ],
      "name": "decode",
      "signature": "(dec sliceDecoder) decode (ptr unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (dec sliceDecoder) decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {\n\tsliceType := dec.sliceType\n\tif iter.ReadNil() {\n\t\tsliceType.UnsafeSetNil(ptr)\n\t\treturn\n\t}\n\n\tsliceType.UnsafeSet(ptr, sliceType.UnsafeMakeSlice(0, 0))\n\tvar length int\n\n\titer.ReadArrayCB(func(iter *jsoniter.Iterator) bool {\n\t\tidx := length\n\t\tlength++\n\t\tsliceType.UnsafeGrow(ptr, length)\n\t\telem := sliceType.UnsafeGetIndex(ptr, idx)\n\t\tdec.elemDec.Decode(elem, iter)\n\t\treturn iter.Error == nil\n\t})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 94,
      "end_line": 112,
      "file_path": "./dialect/gremlin/encoding/graphson/slice.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/slice.go",
          "code_snippet": "sliceDecoder struct {\n\tsliceType reflect2.SliceType\n\telemDec   jsoniter.ValDecoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_skip.go",
          "code_snippet": "func (iter *Iterator) ReadNil() (ret bool) {\n\tc := iter.nextToken()\n\tif c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l') // null\n\t\treturn true\n\t}\n\titer.unreadByte()\n\treturn false\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "SliceType interface {\n\tListType\n\tMakeSlice(length int, cap int) interface{}\n\tUnsafeMakeSlice(length int, cap int) unsafe.Pointer\n\tGrow(obj interface{}, newLength int)\n\tUnsafeGrow(ptr unsafe.Pointer, newLength int)\n\tAppend(obj interface{}, elem interface{})\n\tUnsafeAppend(obj unsafe.Pointer, elem unsafe.Pointer)\n\tLengthOf(obj interface{}) int\n\tUnsafeLengthOf(ptr unsafe.Pointer) int\n\tSetNil(obj interface{})\n\tUnsafeSetNil(ptr unsafe.Pointer)\n\tCap(obj interface{}) int\n\tUnsafeCap(ptr unsafe.Pointer) int\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter_array.go",
          "code_snippet": "func (iter *Iterator) ReadArrayCB(callback func(*Iterator) bool) (ret bool) {\n\tc := iter.nextToken()\n\tif c == '[' {\n\t\tif !iter.incrementDepth() {\n\t\t\treturn false\n\t\t}\n\t\tc = iter.nextToken()\n\t\tif c != ']' {\n\t\t\titer.unreadByte()\n\t\t\tif !callback(iter) {\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tc = iter.nextToken()\n\t\t\tfor c == ',' {\n\t\t\t\tif !callback(iter) {\n\t\t\t\t\titer.decrementDepth()\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tc = iter.nextToken()\n\t\t\t}\n\t\t\tif c != ']' {\n\t\t\t\titer.ReportError(\"ReadArrayCB\", \"expect ] in the end, but found \"+string([]byte{c}))\n\t\t\t\titer.decrementDepth()\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn iter.decrementDepth()\n\t\t}\n\t\treturn iter.decrementDepth()\n\t}\n\tif c == 'n' {\n\t\titer.skipThreeBytes('u', 'l', 'l')\n\t\treturn true // null\n\t}\n\titer.ReportError(\"ReadArrayCB\", \"expect [ or n, but found \"+string([]byte{c}))\n\treturn false\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "ListType interface {\n\tType\n\tElem() Type\n\tSetIndex(obj interface{}, index int, elem interface{})\n\tUnsafeSetIndex(obj unsafe.Pointer, index int, elem unsafe.Pointer)\n\tGetIndex(obj interface{}, index int) interface{}\n\tUnsafeGetIndex(obj unsafe.Pointer, index int) unsafe.Pointer\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "int int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "bool bool",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        94,
        95,
        96,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111
      ],
      "cover_details": {
        "line_cover_rate": 0.7368421052631579
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/writer.go:Flush",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/writer_test.go",
          "func_name": "TestDirWriter"
        }
      ],
      "name": "Flush",
      "signature": "(d *DirWriter) Flush (name string) error",
      "ground_truth": "func (d *DirWriter) Flush(name string) error {\n\tswitch {\n\tcase d.b.Len() != 0:\n\t\treturn fmt.Errorf(\"writer has undocumented change. Use Change or FlushChange instead\")\n\tcase len(d.changes) == 0:\n\t\treturn errors.New(\"writer has no changes to flush\")\n\tdefault:\n\t\treturn migrate.NewPlanner(nil, d.Dir, migrate.PlanFormat(d.Formatter)).\n\t\t\tWritePlan(\u0026migrate.Plan{\n\t\t\t\tName:    name,\n\t\t\t\tChanges: d.changes,\n\t\t\t})\n\t}\n}",
      "function_comment": "// Flush flushes the written statements to the directory.",
      "function_statement": "// Flush flushes the written statements to the directory.",
      "start_line": 59,
      "end_line": 72,
      "file_path": "./dialect/sql/schema/writer.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/writer.go",
          "code_snippet": "DirWriter struct {\n\t\tDir       migrate.Dir       // target directory.\n\t\tFormatter migrate.Formatter // optional formatter.\n\t\tb         bytes.Buffer      // working buffer.\n\t\tchanges   []*migrate.Change // changes to flush.\n\t}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func (p *Planner) WritePlan(plan *Plan) error {\n\t// Format the plan into files.\n\tfiles, err := p.fmt.Format(plan)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Store the files in the migration directory.\n\tfor _, f := range files {\n\t\tif err := p.dir.WriteFile(f.Name(), f.Bytes()); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn p.writeSum()\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func NewPlanner(drv Driver, dir Dir, opts ...PlannerOption) *Planner {\n\tp := \u0026Planner{drv: drv, dir: dir, sum: true}\n\tfor _, opt := range opts {\n\t\topt(p)\n\t}\n\tif p.fmt == nil {\n\t\tp.fmt = DefaultFormatter\n\t}\n\treturn p\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "func PlanFormat(fmt Formatter) PlannerOption {\n\treturn func(p *Planner) {\n\t\tp.fmt = fmt\n\t}\n}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Plan struct {\n\t\t// Version and Name of the plan. Provided by the user or auto-generated.\n\t\tVersion, Name string\n\n\t\t// Reversible describes if the changeset is reversible.\n\t\tReversible bool\n\n\t\t// Transactional describes if the changeset is transactional.\n\t\tTransactional bool\n\n\t\t// Changes defines the list of changeset in the plan.\n\t\tChanges []*Change\n\n\t\t// Delimiter to use for separating statements.\n\t\tDelimiter string\n\n\t\t// Directives to add to the file (not associated with any statements) besides the delimiter.\n\t\t// For example, atlas:txtar, atlas:txmode, etc.\n\t\tDirectives []string\n\t}",
          "ref_module": "migrate"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/bytes/buffer.go",
          "code_snippet": "func (b *Buffer) Len() int { return len(b.buf) - b.off }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/errors/errors.go",
          "code_snippet": "func New(text string) error {\n\treturn \u0026errorString{text}\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        59,
        60,
        65,
        66,
        67,
        68,
        69,
        70
      ],
      "cover_details": {
        "line_cover_rate": 0.5714285714285714
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atOpen",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atOpen",
      "signature": "(d *SQLite) atOpen (conn dialect.ExecQuerier) (migrate.Driver, error)",
      "ground_truth": "func (d *SQLite) atOpen(conn dialect.ExecQuerier) (migrate.Driver, error) {\n\treturn sqlite.Open(\u0026db{ExecQuerier: conn})\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 91,
      "end_line": 93,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/dialect.go",
          "code_snippet": "ExecQuerier interface {\n\t// Exec executes a query that does not return records. For example, in SQL, INSERT or UPDATE.\n\t// It scans the result into the pointer v. For SQL drivers, it is dialect/sql.Result.\n\tExec(ctx context.Context, query string, args, v any) error\n\t// Query executes a query that returns rows, typically a SELECT in SQL.\n\t// It scans the result into the pointer v. For SQL drivers, it is *dialect/sql.Rows.\n\tQuery(ctx context.Context, query string, args, v any) error\n}",
          "ref_module": "dialect"
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "db struct{ dialect.ExecQuerier }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/migrate/migrate.go",
          "code_snippet": "Driver interface {\n\t\tschema.Differ\n\t\tschema.ExecQuerier\n\t\tschema.Inspector\n\t\tschema.Locker\n\t\tPlanApplier\n\t\tSnapshoter\n\t\tCleanChecker\n\t}",
          "ref_module": "migrate"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/sqlite/driver.go",
          "code_snippet": "func Open(db schema.ExecQuerier) (migrate.Driver, error) {\n\tc := \u0026conn{ExecQuerier: db}\n\treturn \u0026Driver{\n\t\tconn:        c,\n\t\tDiffer:      \u0026sqlx.Diff{DiffDriver: \u0026diff{}},\n\t\tInspector:   \u0026inspect{c},\n\t\tPlanApplier: \u0026planApply{c},\n\t}, nil\n}",
          "ref_module": "sqlite"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        91,
        92,
        93
      ],
      "cover_details": {
        "line_cover_rate": 1
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/atlas.go:aColumns",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "aColumns",
      "signature": "(a *Atlas) aColumns (et *Table, at *schema.Table) error",
      "ground_truth": "func (a *Atlas) aColumns(et *Table, at *schema.Table) error {\n\tfor _, c1 := range et.Columns {\n\t\tc2 := schema.NewColumn(c1.Name).\n\t\t\tSetNull(c1.Nullable)\n\t\tif c1.Collation != \"\" {\n\t\t\tc2.SetCollation(c1.Collation)\n\t\t}\n\t\tif c1.Comment != \"\" {\n\t\t\tc2.SetComment(c1.Comment)\n\t\t}\n\t\tif err := a.sqlDialect.atTypeC(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := a.atDefault(c1, c2); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif c1.Unique \u0026\u0026 (len(et.PrimaryKey) != 1 || et.PrimaryKey[0] != c1) {\n\t\t\ta.sqlDialect.atUniqueC(et, c1, at, c2)\n\t\t}\n\t\tif c1.Increment {\n\t\t\ta.sqlDialect.atIncrementC(at, c2)\n\t\t}\n\t\tat.AddColumns(c2)\n\t}\n\treturn nil\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 959,
      "end_line": 984,
      "file_path": "./dialect/sql/schema/atlas.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "Atlas struct {\n\tatDriver   migrate.Driver\n\tsqlDialect sqlDialect\n\n\tschema          string // schema to use\n\tindent          string // plan indentation\n\terrNoPlan       bool   // no plan error enabled\n\tuniversalID     bool   // global unique ids\n\tdropColumns     bool   // drop deleted columns\n\tdropIndexes     bool   // drop deleted indexes\n\twithForeignKeys bool   // with foreign keys\n\thashSymbols     bool   // whether to use a hash for too long symbols, only for StateReader\n\tmode            Mode\n\thooks           []Hook              // hooks to apply before creation\n\tdiffHooks       []DiffHook          // diff hooks to run when diffing current and desired\n\tdiffOptions     []schema.DiffOption // diff options to pass to the diff engine\n\tapplyHook       []ApplyHook         // apply hooks to run when applying the plan\n\tskip            ChangeKind          // what changes to skip and not apply\n\tdir             migrate.Dir         // the migration directory to read from\n\tfmt             migrate.Formatter   // how to format the plan into migration files\n\n\tdriver  dialect.Driver // driver passed in when not using an atlas URL\n\turl     *url.URL       // url of database connection\n\tdialect string         // Ent dialect to use when generating migration files\n\n\ttypes []string // pre-existing pk range allocation for global unique id\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Column struct {\n\tName       string            // column name.\n\tType       field.Type        // column type.\n\tSchemaType map[string]string // optional schema type per dialect.\n\tAttr       string            // extra attributes.\n\tSize       int64             // max size parameter for string, blob, etc.\n\tKey        string            // key definition (PRI, UNI or MUL).\n\tUnique     bool              // column with unique constraint.\n\tIncrement  bool              // auto increment attribute.\n\tNullable   bool              // null or not null attribute.\n\tDefault    any               // default value.\n\tEnums      []string          // enum values.\n\tCollation  string            // collation type (utf8mb4_unicode_ci, utf8mb4_general_ci)\n\ttyp        string            // row column type (used for Rows.Scan).\n\tindexes    Indexes           // linked indexes.\n\tforeign    *ForeignKey       // linked foreign-key.\n\tComment    string            // optional column comment.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "atBuilder interface {\n\tatOpen(dialect.ExecQuerier) (migrate.Driver, error)\n\tatTable(*Table, *schema.Table)\n\tsupportsDefault(*Column) bool\n\tatTypeC(*Column, *schema.Column) error\n\tatUniqueC(*Table, *Column, *schema.Table, *schema.Column)\n\tatIncrementC(*schema.Table, *schema.Column)\n\tatIncrementT(*schema.Table, int64)\n\tatIndex(*Index, *schema.Table, *schema.Index) error\n\tatTypeRangeSQL(t ...string) string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func (a *Atlas) atDefault(c1 *Column, c2 *schema.Column) error {\n\tif c1.Default == nil || !a.sqlDialect.supportsDefault(c1) {\n\t\treturn nil\n\t}\n\tswitch x := c1.Default.(type) {\n\tcase Expr:\n\t\tif len(x) \u003e 1 \u0026\u0026 (x[0] != '(' || x[len(x)-1] != ')') {\n\t\t\tx = \"(\" + x + \")\"\n\t\t}\n\t\tc2.SetDefault(\u0026schema.RawExpr{X: string(x)})\n\tcase map[string]Expr:\n\t\td, ok := x[a.sqlDialect.Dialect()]\n\t\tif !ok {\n\t\t\treturn nil\n\t\t}\n\t\tif len(d) \u003e 1 \u0026\u0026 (d[0] != '(' || d[len(d)-1] != ')') {\n\t\t\td = \"(\" + d + \")\"\n\t\t}\n\t\tc2.SetDefault(\u0026schema.RawExpr{X: string(d)})\n\tdefault:\n\t\tswitch {\n\t\tcase c1.Type == field.TypeJSON:\n\t\t\ts, ok := c1.Default.(string)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"invalid default value for JSON column %q: %v\", c1.Name, c1.Default)\n\t\t\t}\n\t\t\tc2.SetDefault(\u0026schema.Literal{V: strings.ReplaceAll(s, \"'\", \"''\")})\n\t\tdefault:\n\t\t\t// Keep backwards compatibility with the old default value format.\n\t\t\tx := fmt.Sprint(c1.Default)\n\t\t\tif v, ok := c1.Default.(string); ok \u0026\u0026 c1.Type != field.TypeUUID \u0026\u0026 c1.Type != field.TypeTime {\n\t\t\t\t// Escape single quote by replacing each with 2.\n\t\t\t\tx = fmt.Sprintf(\"'%s'\", strings.ReplaceAll(v, \"'\", \"''\"))\n\t\t\t}\n\t\t\tc2.SetDefault(\u0026schema.RawExpr{X: x})\n\t\t}\n\t}\n\treturn nil\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetNull(b bool) *Column {\n\tif c.Type == nil {\n\t\tc.Type = \u0026ColumnType{}\n\t}\n\tc.Type.Null = b\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func NewColumn(name string) *Column {\n\treturn \u0026Column{Name: name}\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetCollation(v string) *Column {\n\tReplaceOrAppend(\u0026c.Attrs, \u0026Collation{V: v})\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (c *Column) SetComment(v string) *Column {\n\tReplaceOrAppend(\u0026c.Attrs, \u0026Comment{Text: v})\n\treturn c\n}",
          "ref_module": "schema"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/dsl.go",
          "code_snippet": "func (t *Table) AddColumns(columns ...*Column) *Table {\n\tt.Columns = append(t.Columns, columns...)\n\treturn t\n}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "func len(v Type) int",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        959,
        960,
        961,
        962,
        963,
        966,
        969,
        972,
        975,
        976,
        977,
        978,
        979,
        980,
        981,
        983
      ],
      "cover_details": {
        "line_cover_rate": 0.6153846153846154
      }
    },
    {
      "id": "entgo.io/ent/entc/gen/graph.go:resolve",
      "testcases": [
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphRequiredLoop"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphBadInverse"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestResolveConflicts"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/globalid_test.go",
          "func_name": "TestIncrementStartAnnotation"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughUndefinedType"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughInvalidRel"
        },
        {
          "package": "entgo.io/ent/entc/gen",
          "rel_file_path": "entc/gen/graph_test.go",
          "func_name": "TestNewGraphThroughDuplicates"
        }
      ],
      "name": "resolve",
      "signature": "(g *Graph) resolve (t *Type) error",
      "ground_truth": "func (g *Graph) resolve(t *Type) error {\n\tfor _, e := range t.Edges {\n\t\tswitch {\n\t\tcase e.IsInverse():\n\t\t\tref, ok := e.Type.HasAssoc(e.Inverse)\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"edge %q is missing for inverse edge: %s.%s(%s)\", e.Inverse, t.Name, e.Name, e.Type.Name)\n\t\t\t}\n\t\t\tif !e.Optional \u0026\u0026 !ref.Optional {\n\t\t\t\treturn fmt.Errorf(\"edges cannot be required in both directions: %s.%s \u003c-\u003e %s.%s\", t.Name, e.Name, e.Type.Name, ref.Name)\n\t\t\t}\n\t\t\tif ref.Type != t {\n\t\t\t\treturn fmt.Errorf(\"mismatch type for back-ref %q of %s.%s \u003c-\u003e %s.%s\", e.Inverse, t.Name, e.Name, e.Type.Name, ref.Name)\n\t\t\t}\n\t\t\te.Ref, ref.Ref = ref, e\n\t\t\ttable := t.Table()\n\t\t\t// Name the foreign-key column in a format that wouldn't change even if an inverse\n\t\t\t// edge is dropped (or added). The format is: \"\u003cEdge-Owner\u003e_\u003cEdge-Name\u003e\".\n\t\t\tcolumn := fmt.Sprintf(\"%s_%s\", e.Type.Label(), snake(ref.Name))\n\t\t\tswitch a, b := ref.Unique, e.Unique; {\n\t\t\t// If the relation column is in the inverse side/table. The rule is simple, if assoc is O2M,\n\t\t\t// then inverse is M2O and the relation is in its table.\n\t\t\tcase a \u0026\u0026 b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = O2O, O2O\n\t\t\tcase !a \u0026\u0026 b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = M2O, O2M\n\n\t\t\t// If the relation column is in the assoc side.\n\t\t\tcase a \u0026\u0026 !b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = O2M, M2O\n\t\t\t\ttable = e.Type.Table()\n\n\t\t\tcase !a \u0026\u0026 !b:\n\t\t\t\te.Rel.Type, ref.Rel.Type = M2M, M2M\n\t\t\t\ttable = e.Type.Label() + \"_\" + ref.Name\n\t\t\t\tc1, c2 := ref.Owner.Label()+\"_id\", ref.Type.Label()+\"_id\"\n\t\t\t\t// If the relation is from the same type: User has Friends ([]User),\n\t\t\t\t// we give the second column a different name (the relation name).\n\t\t\t\tif c1 == c2 {\n\t\t\t\t\tc2 = rules.Singularize(e.Name) + \"_id\"\n\t\t\t\t}\n\t\t\t\t// Share the same backing array for the relation columns so\n\t\t\t\t// that any changes to one will be reflected in both edges.\n\t\t\t\te.Rel.Columns = []string{c1, c2}\n\t\t\t\tref.Rel.Columns = e.Rel.Columns\n\t\t\t}\n\t\t\te.Rel.Table, ref.Rel.Table = table, table\n\t\t\tif !e.M2M() {\n\t\t\t\te.Rel.Columns = []string{column}\n\t\t\t\tref.Rel.Columns = e.Rel.Columns\n\t\t\t}\n\t\t// Assoc with uninitialized relation.\n\t\tcase !e.IsInverse() \u0026\u0026 e.Rel.Type == Unk:\n\t\t\tswitch {\n\t\t\tcase !e.Unique \u0026\u0026 e.Type == t:\n\t\t\t\te.Rel.Type = M2M\n\t\t\t\te.Bidi = true\n\t\t\t\te.Rel.Table = t.Label() + \"_\" + e.Name\n\t\t\t\te.Rel.Columns = []string{e.Owner.Label() + \"_id\", rules.Singularize(e.Name) + \"_id\"}\n\t\t\tcase e.Unique \u0026\u0026 e.Type == t:\n\t\t\t\te.Rel.Type = O2O\n\t\t\t\te.Bidi = true\n\t\t\t\te.Rel.Table = t.Table()\n\t\t\tcase e.Unique:\n\t\t\t\te.Rel.Type = M2O\n\t\t\t\te.Rel.Table = t.Table()\n\t\t\tdefault:\n\t\t\t\te.Rel.Type = O2M\n\t\t\t\te.Rel.Table = e.Type.Table()\n\t\t\t}\n\t\t\tif !e.M2M() {\n\t\t\t\te.Rel.Columns = []string{fmt.Sprintf(\"%s_%s\", t.Label(), snake(e.Name))}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}",
      "function_comment": "// resolve the type references and relations of its edges.\n// It fails if one of the references is missing or invalid.\n//\n// Relation definitions between A and B, where A is the owner of\n// the edge and B uses this edge as a back-reference:\n//\n//\tO2O\n//\t - A have a unique edge (E) to B, and B have a back-reference unique edge (E') for E.\n//\t - A have a unique edge (E) to A.\n//\n//\tO2M (The \"Many\" side, keeps a reference to the \"One\" side).\n//\t - A have an edge (E) to B (not unique), and B doesn't have a back-reference edge for E.\n//\t - A have an edge (E) to B (not unique), and B have a back-reference unique edge (E') for E.\n//\n//\tM2O (The \"Many\" side, holds the reference to the \"One\" side).\n//\t - A have a unique edge (E) to B, and B doesn't have a back-reference edge for E.\n//\t - A have a unique edge (E) to B, and B have a back-reference non-unique edge (E') for E.\n//\n//\tM2M\n//\t - A have an edge (E) to B (not unique), and B have a back-reference non-unique edge (E') for E.\n//\t - A have an edge (E) to A (not unique).",
      "function_statement": "// resolve the type references and relations of its edges.\n// It fails if one of the references is missing or invalid.\n//\n// Relation definitions between A and B, where A is the owner of\n// the edge and B uses this edge as a back-reference:\n//\n//\tO2O\n//\t - A have a unique edge (E) to B, and B have a back-reference unique edge (E') for E.\n//\t - A have a unique edge (E) to A.\n//\n//\tO2M (The \"Many\" side, keeps a reference to the \"One\" side).\n//\t - A have an edge (E) to B (not unique), and B doesn't have a back-reference edge for E.\n//\t - A have an edge (E) to B (not unique), and B have a back-reference unique edge (E') for E.\n//\n//\tM2O (The \"Many\" side, holds the reference to the \"One\" side).\n//\t - A have a unique edge (E) to B, and B doesn't have a back-reference edge for E.\n//\t - A have a unique edge (E) to B, and B have a back-reference non-unique edge (E') for E.\n//\n//\tM2M\n//\t - A have an edge (E) to B (not unique), and B have a back-reference non-unique edge (E') for E.\n//\t - A have an edge (E) to A (not unique).",
      "start_line": 415,
      "end_line": 491,
      "file_path": "./entc/gen/graph.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/graph.go",
          "code_snippet": "Graph struct {\n\t\t*Config\n\t\t// Nodes are list of Go types that mapped to the types in the loaded schema.\n\t\tNodes []*Type\n\t\tnodes map[string]*Type\n\t\t// Schemas holds the raw interfaces for the loaded schemas.\n\t\tSchemas []*load.Schema\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Type struct {\n\t\t*Config\n\t\tschema *load.Schema\n\t\t// Name holds the type/ent name.\n\t\tName string\n\t\t// alias, or local package name of the generated package.\n\t\t// Empty means no alias.\n\t\talias string\n\t\t// ID holds the ID field of this type.\n\t\tID *Field\n\t\t// Fields holds all the primitive fields of this type.\n\t\tFields []*Field\n\t\tfields map[string]*Field\n\t\t// Edge holds all the edges of this type.\n\t\tEdges []*Edge\n\t\t// Indexes are the configured indexes for this type.\n\t\tIndexes []*Index\n\t\t// ForeignKeys are the foreign-keys that resides in the type table.\n\t\tForeignKeys []*ForeignKey\n\t\tforeignKeys map[string]struct{}\n\t\t// Annotations that were defined for the field in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t\t// EdgeSchema indicates that this type (schema) is being used as an \"edge schema\".\n\t\t// The To and From fields holds references to the edges that go \"through\" this type.\n\t\tEdgeSchema struct {\n\t\t\tID       []*Field\n\t\t\tTo, From *Edge\n\t\t}\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) IsInverse() bool { return e.Inverse != \"\" }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) HasAssoc(name string) (*Edge, bool) {\n\tfor _, e := range t.Edges {\n\t\tif name == e.Name \u0026\u0026 !e.IsInverse() {\n\t\t\treturn e, true\n\t\t}\n\t}\n\treturn nil, false\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Edge struct {\n\t\tdef *load.Edge\n\t\t// Name holds the name of the edge.\n\t\tName string\n\t\t// Type holds a reference to the type this edge is directed to.\n\t\tType *Type\n\t\t// Optional indicates is this edge is optional on create.\n\t\tOptional bool\n\t\t// Immutable indicates is this edge cannot be updated.\n\t\tImmutable bool\n\t\t// Unique indicates if this edge is a unique edge.\n\t\tUnique bool\n\t\t// Inverse holds the name of the reference edge declared in the schema.\n\t\tInverse string\n\t\t// Ref points to the reference edge. For Inverse edges (edge.From),\n\t\t// its points to the Assoc (edge.To). For Assoc edges, it points to\n\t\t// the inverse edge if it exists.\n\t\tRef *Edge\n\t\t// Owner holds the type of the edge-owner. For assoc-edges it's the\n\t\t// type that holds the edge, for inverse-edges, it's the assoc type.\n\t\tOwner *Type\n\t\t// Through edge schema type.\n\t\tThrough *Type\n\t\t// StructTag of the edge-field in the struct. default to \"json\".\n\t\tStructTag string\n\t\t// Relation holds the relation info of an edge.\n\t\tRel Relation\n\t\t// Bidi indicates if this edge is a bidirectional edge. A self-reference\n\t\t// to the same type with the same name (symmetric relation). For example,\n\t\t// a User type have one of following edges:\n\t\t//\n\t\t//\tedge.To(\"friends\", User.Type)           // many 2 many.\n\t\t//\tedge.To(\"spouse\", User.Type).Unique()   // one 2 one.\n\t\t//\n\t\tBidi bool\n\t\t// Annotations that were defined for the edge in the schema.\n\t\t// The mapping is from the Annotation.Name() to a JSON decoded object.\n\t\tAnnotations Annotations\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) Table() string {\n\tif ant := t.EntSQL(); ant != nil \u0026\u0026 ant.Table != \"\" {\n\t\treturn ant.Table\n\t}\n\tif t.schema != nil \u0026\u0026 t.schema.Config.Table != \"\" {\n\t\treturn t.schema.Config.Table\n\t}\n\treturn snake(rules.Pluralize(t.Name))\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (t Type) Label() string {\n\treturn snake(t.Name)\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "func snake(s string) string {\n\tvar (\n\t\tj int\n\t\tb strings.Builder\n\t)\n\tfor i := 0; i \u003c len(s); i++ {\n\t\tr := rune(s[i])\n\t\t// Put '_' if it is not a start or end of a word, current letter is uppercase,\n\t\t// and previous is lowercase (cases like: \"UserInfo\"), or next letter is also\n\t\t// a lowercase and previous letter is not \"_\".\n\t\tif i \u003e 0 \u0026\u0026 i \u003c len(s)-1 \u0026\u0026 unicode.IsUpper(r) {\n\t\t\tif unicode.IsLower(rune(s[i-1])) ||\n\t\t\t\tj != i-1 \u0026\u0026 unicode.IsLower(rune(s[i+1])) \u0026\u0026 unicode.IsLetter(rune(s[i-1])) {\n\t\t\t\tj = i\n\t\t\t\tb.WriteString(\"_\")\n\t\t\t}\n\t\t}\n\t\tb.WriteRune(unicode.ToLower(r))\n\t}\n\treturn b.String()\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "O2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Relation struct {\n\t\t// Type holds the relation type of the edge.\n\t\tType Rel\n\t\t// Table holds the relation table for this edge.\n\t\t// For O2O and O2M, it's the table name of the type we're this edge point to.\n\t\t// For M2O, this is the owner's type, and for M2M this is the join table.\n\t\tTable string\n\t\t// Columns holds the relation column(s) in the relation table above.\n\t\t// For O2M, M2O and O2O, it contains one element with the column name.\n\t\t// For M2M edges, it contains two columns defined in the join table with\n\t\t// the same order as defined in the schema: (owner_id, reference_id).\n\t\tColumns []string\n\t\t// foreign-key information for non-M2M edges.\n\t\tfk *ForeignKey\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "O2M",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "M2O",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "M2M",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/func.go",
          "code_snippet": "rules    = ruleset()",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "func (e Edge) M2M() bool { return e.Rel.Type == M2M }",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/entc/gen/type.go",
          "code_snippet": "Unk Rel = iota",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/go-openapi/inflect@v0.19.0/inflect.go",
          "code_snippet": "func (rs *Ruleset) Singularize(word string) string {\n\tif len(word) == 0 {\n\t\treturn word\n\t}\n\tif rs.isUncountable(word) {\n\t\treturn word\n\t}\n\tfor _, rule := range rs.singulars {\n\t\tif rule.exact {\n\t\t\tif word == rule.suffix {\n\t\t\t\treturn rule.replacement\n\t\t\t}\n\t\t} else {\n\t\t\tif strings.HasSuffix(word, rule.suffix) {\n\t\t\t\treturn replaceLast(word, rule.suffix, rule.replacement)\n\t\t\t}\n\t\t}\n\t}\n\treturn word\n}",
          "ref_module": ""
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "error interface {\n\tError() string\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/errors.go",
          "code_snippet": "func Errorf(format string, a ...any) error {\n\tp := newPrinter()\n\tp.wrapErrs = true\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tvar err error\n\tswitch len(p.wrappedErrs) {\n\tcase 0:\n\t\terr = errors.New(s)\n\tcase 1:\n\t\tw := \u0026wrapError{msg: s}\n\t\tw.err, _ = a[p.wrappedErrs[0]].(error)\n\t\terr = w\n\tdefault:\n\t\tif p.reordered {\n\t\t\tslices.Sort(p.wrappedErrs)\n\t\t}\n\t\tvar errs []error\n\t\tfor i, argNum := range p.wrappedErrs {\n\t\t\tif i \u003e 0 \u0026\u0026 p.wrappedErrs[i-1] == argNum {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif e, ok := a[argNum].(error); ok {\n\t\t\t\terrs = append(errs, e)\n\t\t\t}\n\t\t}\n\t\terr = \u0026wrapErrors{s, errs}\n\t}\n\tp.free()\n\treturn err\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/fmt/print.go",
          "code_snippet": "func Sprintf(format string, a ...any) string {\n\tp := newPrinter()\n\tp.doPrintf(format, a)\n\ts := string(p.buf)\n\tp.free()\n\treturn s\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "string string",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "true  = 0 == 0",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        415,
        416,
        417,
        418,
        419,
        420,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434,
        439,
        440,
        447,
        448,
        449,
        450,
        451,
        452,
        453,
        458,
        459,
        461,
        462,
        463,
        464,
        465,
        467,
        468,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        481,
        482,
        483,
        485,
        486,
        487,
        490
      ],
      "cover_details": {
        "line_cover_rate": 0.6753246753246753
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/error.go:Decode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/error_test.go",
          "func_name": "TestErrorCodec"
        }
      ],
      "name": "Decode",
      "signature": "(ec errorCodec) Decode (_ unsafe.Pointer, iter *jsoniter.Iterator)",
      "ground_truth": "func (ec errorCodec) Decode(_ unsafe.Pointer, iter *jsoniter.Iterator) {\n\tif iter.Error == nil {\n\t\titer.Error = ec.error\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 41,
      "end_line": 45,
      "file_path": "./dialect/gremlin/encoding/graphson/error.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/error.go",
          "code_snippet": "errorCodec struct{ error }",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/iter.go",
          "code_snippet": "Iterator struct {\n\tcfg              *frozenConfig\n\treader           io.Reader\n\tbuf              []byte\n\thead             int\n\ttail             int\n\tdepth            int\n\tcaptureStartedAt int\n\tcaptured         []byte\n\tError            error\n\tAttachment       interface{} // open for customized decoder\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        41,
        42,
        43,
        44
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/native.go:Encode",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/native_test.go",
          "func_name": "TestEncodeNative"
        }
      ],
      "name": "Encode",
      "signature": "(enc float64Encoder) Encode (ptr unsafe.Pointer, stream *jsoniter.Stream)",
      "ground_truth": "func (enc float64Encoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {\n\tf := enc.UnsafeIndirect(ptr).(float64)\n\tswitch {\n\tcase math.IsNaN(f):\n\t\tstream.WriteString(\"NaN\")\n\tcase math.IsInf(f, 1):\n\t\tstream.WriteString(\"Infinity\")\n\tcase math.IsInf(f, -1):\n\t\tstream.WriteString(\"-Infinity\")\n\tdefault:\n\t\tstream.WriteFloat64(f)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 89,
      "end_line": 101,
      "file_path": "./dialect/gremlin/encoding/graphson/native.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/native.go",
          "code_snippet": "float64Encoder struct {\n\treflect2.Type\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream.go",
          "code_snippet": "Stream struct {\n\tcfg        *frozenConfig\n\tout        io.Writer\n\tbuf        []byte\n\tError      error\n\tindention  int\n\tAttachment interface{} // open for customized encoder\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_str.go",
          "code_snippet": "func (stream *Stream) WriteString(s string) {\n\tvalLen := len(s)\n\tstream.buf = append(stream.buf, '\"')\n\t// write string, the fast path, without utf8 and escape support\n\ti := 0\n\tfor ; i \u003c valLen; i++ {\n\t\tc := s[i]\n\t\tif c \u003e 31 \u0026\u0026 c != '\"' \u0026\u0026 c != '\\\\' {\n\t\t\tstream.buf = append(stream.buf, c)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tif i == valLen {\n\t\tstream.buf = append(stream.buf, '\"')\n\t\treturn\n\t}\n\twriteStringSlowPath(stream, i, s, valLen)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/stream_float.go",
          "code_snippet": "func (stream *Stream) WriteFloat64(val float64) {\n\tif math.IsInf(val, 0) || math.IsNaN(val) {\n\t\tstream.Error = fmt.Errorf(\"unsupported value: %f\", val)\n\t\treturn\n\t}\n\tabs := math.Abs(val)\n\tfmt := byte('f')\n\t// Note: Must use float32 comparisons for underlying float32 value to get precise cutoffs right.\n\tif abs != 0 {\n\t\tif abs \u003c 1e-6 || abs \u003e= 1e21 {\n\t\t\tfmt = 'e'\n\t\t}\n\t}\n\tstream.buf = strconv.AppendFloat(stream.buf, float64(val), fmt, -1, 64)\n}",
          "ref_module": "jsoniter"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/unsafe/unsafe.go",
          "code_snippet": "Pointer *ArbitraryType",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "float64 float64",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func IsNaN(f float64) (is bool) {\n\t// IEEE 754 says that only NaNs satisfy f != f.\n\t// To avoid the floating-point hardware, could use:\n\t//\tx := Float64bits(f);\n\t//\treturn uint32(x\u003e\u003eshift)\u0026mask == mask \u0026\u0026 x != uvinf \u0026\u0026 x != uvneginf\n\treturn f != f\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/math/bits.go",
          "code_snippet": "func IsInf(f float64, sign int) bool {\n\t// Test for infinity by comparing against maximum float.\n\t// To avoid the floating-point hardware, could use:\n\t//\tx := Float64bits(f);\n\t//\treturn sign \u003e= 0 \u0026\u0026 x == uvinf || sign \u003c= 0 \u0026\u0026 x == uvneginf;\n\treturn sign \u003e= 0 \u0026\u0026 f \u003e MaxFloat64 || sign \u003c= 0 \u0026\u0026 f \u003c -MaxFloat64\n}",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "cover_details": {
        "line_cover_rate": 0.8461538461538461
      }
    },
    {
      "id": "entgo.io/ent/dialect/sql/schema/sqlite.go:atTable",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestAtlas_StateReader"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_Diff"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/schema_test.go",
          "func_name": "TestDDL"
        },
        {
          "package": "entgo.io/ent/dialect/sql/schema",
          "rel_file_path": "dialect/sql/schema/migrate_test.go",
          "func_name": "TestMigrate_DiffJoinTableAllocationBC"
        }
      ],
      "name": "atTable",
      "signature": "(d *SQLite) atTable (t1 *Table, t2 *schema.Table)",
      "ground_truth": "func (d *SQLite) atTable(t1 *Table, t2 *schema.Table) {\n\tif t1.Annotation != nil {\n\t\tsetAtChecks(t1, t2)\n\t}\n}",
      "function_comment": "",
      "function_statement": "",
      "start_line": 95,
      "end_line": 99,
      "file_path": "./dialect/sql/schema/sqlite.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/sqlite.go",
          "code_snippet": "SQLite struct {\n\t\tdialect.Driver\n\t\tWithForeignKeys bool\n\t}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\tName        string\n\tSchema      string\n\tColumns     []*Column\n\tcolumns     map[string]*Column\n\tIndexes     []*Index\n\tPrimaryKey  []*Column\n\tForeignKeys []*ForeignKey\n\tAnnotation  *entsql.Annotation\n\tComment     string\n\tView        bool   // Indicate the table is a view.\n\tPos         string // filename:line of the ent schema definition.\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/sql/schema/atlas.go",
          "code_snippet": "func setAtChecks(et *Table, at *schema.Table) {\n\tif check := et.Annotation.Check; check != \"\" {\n\t\tat.AddChecks(\u0026schema.Check{\n\t\t\tExpr: check,\n\t\t})\n\t}\n\tif checks := et.Annotation.Checks; len(et.Annotation.Checks) \u003e 0 {\n\t\tnames := make([]string, 0, len(checks))\n\t\tfor name := range checks {\n\t\t\tnames = append(names, name)\n\t\t}\n\t\tsort.Strings(names)\n\t\tfor _, name := range names {\n\t\t\tat.AddChecks(\u0026schema.Check{\n\t\t\t\tName: name,\n\t\t\t\tExpr: checks[name],\n\t\t\t})\n\t\t}\n\t}\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/ariga.io/atlas@v0.36.2-0.20250730182955-2c6300d0a3e1/sql/schema/schema.go",
          "code_snippet": "Table struct {\n\t\tName        string\n\t\tSchema      *Schema\n\t\tColumns     []*Column\n\t\tIndexes     []*Index\n\t\tPrimaryKey  *Index\n\t\tForeignKeys []*ForeignKey\n\t\tAttrs       []Attr     // Attrs, constraints and options.\n\t\tTriggers    []*Trigger // Triggers on the table.\n\t\tDeps        []Object   // Objects this table depends on.\n\t\tRefs        []Object   // Objects that depends on this table.\n\t}",
          "ref_module": "schema"
        }
      ],
      "system_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.24.0.darwin-arm64/src/builtin/builtin.go",
          "code_snippet": "nil Type",
          "ref_module": ""
        }
      ],
      "covered_lines": [
        95,
        96,
        97,
        98
      ],
      "cover_details": {
        "line_cover_rate": 0.8
      }
    },
    {
      "id": "entgo.io/ent/dialect/gremlin/encoding/graphson/interface.go:DecoratorOfInterface",
      "testcases": [
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestBadMarshaler"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerEncode"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/marshaler_test.go",
          "func_name": "TestMarshalerError"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceSlice"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterface"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceObject"
        },
        {
          "package": "entgo.io/ent/dialect/gremlin/encoding/graphson",
          "rel_file_path": "dialect/gremlin/encoding/graphson/interface_test.go",
          "func_name": "TestDecodeInterfaceMap"
        }
      ],
      "name": "DecoratorOfInterface",
      "signature": "(decodeExtension) DecoratorOfInterface (typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder",
      "ground_truth": "func (decodeExtension) DecoratorOfInterface(typ reflect2.Type, dec jsoniter.ValDecoder) jsoniter.ValDecoder {\n\tif _, ok := typ.(*reflect2.UnsafeEFaceType); ok {\n\t\treturn efaceDecoder{typ, dec}\n\t}\n\treturn dec\n}",
      "function_comment": "// DecoratorOfInterface decorates a value decoder of an interface type.",
      "function_statement": "// DecoratorOfInterface decorates a value decoder of an interface type.",
      "start_line": 20,
      "end_line": 25,
      "file_path": "./dialect/gremlin/encoding/graphson/interface.go",
      "repo_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/decode.go",
          "code_snippet": "decodeExtension struct {\n\tjsoniter.DummyExtension\n}",
          "ref_module": ""
        },
        {
          "referenced_url": "file:///Users/bytedance/code/workspace/swebench/workspace/ent/dialect/gremlin/encoding/graphson/interface.go",
          "code_snippet": "efaceDecoder struct {\n\ttyp reflect2.Type\n\tjsoniter.ValDecoder\n}",
          "ref_module": ""
        }
      ],
      "third_party_dependencies": [
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/reflect2.go",
          "code_snippet": "Type interface {\n\tKind() reflect.Kind\n\t// New return pointer to data of this type\n\tNew() interface{}\n\t// UnsafeNew return the allocated space pointed by unsafe.Pointer\n\tUnsafeNew() unsafe.Pointer\n\t// PackEFace cast a unsafe pointer to object represented pointer\n\tPackEFace(ptr unsafe.Pointer) interface{}\n\t// Indirect dereference object represented pointer to this type\n\tIndirect(obj interface{}) interface{}\n\t// UnsafeIndirect dereference pointer to this type\n\tUnsafeIndirect(ptr unsafe.Pointer) interface{}\n\t// Type1 returns reflect.Type\n\tType1() reflect.Type\n\tImplements(thatType Type) bool\n\tString() string\n\tRType() uintptr\n\t// interface{} of this type has pointer like behavior\n\tLikePtr() bool\n\tIsNullable() bool\n\tIsNil(obj interface{}) bool\n\tUnsafeIsNil(ptr unsafe.Pointer) bool\n\tSet(obj interface{}, val interface{})\n\tUnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)\n\tAssignableTo(anotherType Type) bool\n}",
          "ref_module": "reflect2"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/json-iterator/go@v1.1.12/reflect.go",
          "code_snippet": "ValDecoder interface {\n\tDecode(ptr unsafe.Pointer, iter *Iterator)\n}",
          "ref_module": "jsoniter"
        },
        {
          "referenced_url": "file:///Users/bytedance/go/pkg/mod/github.com/modern-go/reflect2@v1.0.2/unsafe_eface.go",
          "code_snippet": "UnsafeEFaceType struct {\n\tunsafeType\n}",
          "ref_module": "reflect2"
        }
      ],
      "covered_lines": [
        20,
        21,
        22,
        23,
        24
      ],
      "cover_details": {
        "line_cover_rate": 0.8333333333333334
      }
    }
  ]
}